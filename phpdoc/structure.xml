<?xml version="1.0"?>
<project version="0.12.0" title="">
  <file path="example\createBundle.php" hash="5c15fe3c8b2eaa1ba79eb2a9ac9bbe38">
    <include type="Require Once" line="7">
      <name>../lib/browserid.php</name>
    </include>
  </file>
  <file path="example\createKeys.php" hash="ee711ac0a4754be8a36f4ab35348e51d">
    <include type="Require Once" line="7">
      <name>../lib/browserid.php</name>
    </include>
  </file>
  <file path="lib\Algs\DS.php" hash="7fee0ed2b1152b5f390582bb7877ea02">
    <docblock>
      <description>DSA-SHA Hashing Interface</description>
      <long-description>&lt;p&gt;Offers methods for signing and verifiying data using RSA-SHA&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Algs"/>
      <tag name="subpackage" description="DS"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <include type="Require Once" line="35">
      <name>lib/BrowserID/Utils.php</name>
    </include>
    <include type="Require Once" line="40">
      <name>lib/Crypt/DSA.php</name>
    </include>
    <include type="Require Once" line="45">
      <name>lib/Math/BigInteger.php</name>
    </include>
    <class final="false" abstract="false" line="57" namespace="default">
      <name>DSAKeyPair</name>
      <extends>\AbstractKeyPair</extends>
      <full_name>\DSAKeyPair</full_name>
      <docblock>
        <description>DSA key pair</description>
        <long-description>&lt;p&gt;A pair of DSA keys.&lt;/p&gt;
</long-description>
        <tag name="package" description="Algs" line="47"/>
        <tag name="subpackage" description="DS" line="47"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="47"/>
        <tag name="version" description="1.0.0" line="47"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="65">
        <name>$isInitialized</name>
        <default>false</default>
        <docblock>
          <description>Is initialized</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="58"/>
          <tag name="static" description="" line="58"/>
          <tag name="var" description="" type="\type" line="58">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="74">
        <name>$zero</name>
        <default/>
        <docblock>
          <description>Big Integer zero</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="67"/>
          <tag name="static" description="" line="67"/>
          <tag name="var" description="" type="\type" line="67">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="83">
        <name>$KEYSIZES</name>
        <default>array</default>
        <docblock>
          <description>Allowed keysizes</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="76"/>
          <tag name="static" description="" line="76"/>
          <tag name="var" description="" type="array" line="76">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="111">
        <name>initialize</name>
        <docblock>
          <description>Initialization routine</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="105"/>
          <tag name="static" description="" line="105"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="142">
        <name>_getKeySizeFromRSAKeySize</name>
        <docblock>
          <description>Get keysize</description>
          <long-description>&lt;p&gt;Gets the keysize depending on the bit count of the rsa key.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="132"/>
          <tag name="statis" description="" line="132"/>
          <tag name="param" description="Amount of bits" type="int" variable="$size" line="132">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="Keysize" type="int" line="132">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$size</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="160">
        <name>createPublicKey</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyPair::createPublicKey();" line="157"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="168">
        <name>createSecretKey</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyPair::createSecretKey();" line="165"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="176">
        <name>generate</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyPair::generate($keysize);" line="173"/>
        </docblock>
        <argument line="176">
          <name>$keysize</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" line="203" namespace="default">
      <name>DSAPublicKey</name>
      <extends>\AbstractPublicKey</extends>
      <full_name>\DSAPublicKey</full_name>
      <docblock>
        <description>DSA public key</description>
        <long-description>&lt;p&gt;A public key using the DSA algorithm.&lt;/p&gt;
</long-description>
        <tag name="package" description="Algs" line="193"/>
        <tag name="subpackage" description="DS" line="193"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="193"/>
        <tag name="version" description="1.0.0" line="193"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="211">
        <name>$key_y</name>
        <default/>
        <docblock>
          <description>Public key</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="205"/>
          <tag name="var" description="" type="\Math_BigInteger" line="205">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="219">
        <name>$key_p</name>
        <default/>
        <docblock>
          <description>Prime p</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="213"/>
          <tag name="var" description="" type="\Math_BigInteger" line="213">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="227">
        <name>$key_q</name>
        <default/>
        <docblock>
          <description>Prime q</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="221"/>
          <tag name="var" description="" type="\Math_BigInteger" line="221">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="235">
        <name>$key_g</name>
        <default/>
        <docblock>
          <description>Group g</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="229"/>
          <tag name="var" description="" type="\Math_BigInteger" line="229">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="244">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="237"/>
          <tag name="param" description="Public key as number" type="\Math_BigInteger" variable="$key" line="237">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="" type="\type" variable="$keysize" line="237">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="244">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="244">
          <name>$keysize</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="260">
        <name>deserializeFromObject</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::deserializeFromObject($obj)" line="257"/>
        </docblock>
        <argument line="260">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="274">
        <name>serializeToObject</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::serializeToObject($obj)" line="271"/>
        </docblock>
        <argument line="274">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="284">
        <name>verify</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractPublicKey::verify($message, $signature)" line="281"/>
        </docblock>
        <argument line="284">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="284">
          <name>$signature</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" line="324" namespace="default">
      <name>DSASecretKey</name>
      <extends>\AbstractSecretKey</extends>
      <full_name>\DSASecretKey</full_name>
      <docblock>
        <description>DSA secret key</description>
        <long-description>&lt;p&gt;A secret key using the DSA algorithm.&lt;/p&gt;
</long-description>
        <tag name="package" description="Algs" line="314"/>
        <tag name="subpackage" description="DS" line="314"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="314"/>
        <tag name="version" description="1.0.0" line="314"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="332">
        <name>$key_x</name>
        <default/>
        <docblock>
          <description>Secret key</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="326"/>
          <tag name="var" description="" type="\Math_BigInteger" line="326">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="340">
        <name>$key_p</name>
        <default/>
        <docblock>
          <description>Prime p</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="334"/>
          <tag name="var" description="" type="\Math_BigInteger" line="334">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="348">
        <name>$key_q</name>
        <default/>
        <docblock>
          <description>Prime q</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="342"/>
          <tag name="var" description="" type="\Math_BigInteger" line="342">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="356">
        <name>$key_g</name>
        <default/>
        <docblock>
          <description>Group g</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="350"/>
          <tag name="var" description="" type="\Math_BigInteger" line="350">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="365">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="358"/>
          <tag name="param" description="Secret key as number" type="\Math_BigInteger" variable="$key" line="358">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="" type="\type" variable="$keysize" line="358">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="365">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="365">
          <name>$keysize</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="381">
        <name>deserializeFromObject</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::deserializeFromObject($obj)" line="378"/>
        </docblock>
        <argument line="381">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="394">
        <name>serializeToObject</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::serializeToObject($obj)" line="391"/>
        </docblock>
        <argument line="394">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="404">
        <name>sign</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractSecretKey::sign($message)" line="401"/>
        </docblock>
        <argument line="404">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\Algs\RS.php" hash="7153b44e45fdc8ca246292553497ce67">
    <docblock>
      <description>RSA-SHA Hashing Interface</description>
      <long-description>&lt;p&gt;Offers methods for signing and verifiying data using RSA-SHA&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Algs"/>
      <tag name="subpackage" description="RS"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <include type="Require Once" line="35">
      <name>lib/Crypt/RSA.php</name>
    </include>
    <include type="Require Once" line="40">
      <name>lib/Math/BigInteger.php</name>
    </include>
    <class final="false" abstract="false" line="52" namespace="default">
      <name>RSAKeyPair</name>
      <extends>\AbstractKeyPair</extends>
      <full_name>\RSAKeyPair</full_name>
      <docblock>
        <description>RSA key pair</description>
        <long-description>&lt;p&gt;A pair of RSA keys.&lt;/p&gt;
</long-description>
        <tag name="package" description="Algs" line="42"/>
        <tag name="subpackage" description="RS" line="42"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="42"/>
        <tag name="version" description="1.0.0" line="42"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="61">
        <name>$KEYSIZES</name>
        <default>array</default>
        <docblock>
          <description>Allowed keysizes</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="54"/>
          <tag name="static" description="" line="54"/>
          <tag name="var" description="" type="array" line="54">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="82">
        <name>$rsa</name>
        <default/>
        <docblock>
          <description>RSA instance</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="76"/>
          <tag name="var" description="" type="\Crypt_RSA" line="76">
            <type by_reference="false">\Crypt_RSA</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="94">
        <name>_getKeySizeFromRSAKeySize</name>
        <docblock>
          <description>Get keysize</description>
          <long-description>&lt;p&gt;Gets the keysize depending on the bit count of the rsa key.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="84"/>
          <tag name="statis" description="" line="84"/>
          <tag name="param" description="Amount of bits" type="int" variable="$bits" line="84">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="Keysize" type="int" line="84">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$bits</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="107">
        <name>createPublicKey</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyPair::createPublicKey();" line="104"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="115">
        <name>createSecretKey</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyPair::createSecretKey();" line="112"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="123">
        <name>generate</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyPair::generate($keysize);" line="120"/>
        </docblock>
        <argument line="123">
          <name>$keysize</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" line="152" namespace="default">
      <name>RSAPublicKey</name>
      <extends>\AbstractPublicKey</extends>
      <full_name>\RSAPublicKey</full_name>
      <docblock>
        <description>RSA public key</description>
        <long-description>&lt;p&gt;A public key using the RSA algorithm.&lt;/p&gt;
</long-description>
        <tag name="package" description="Algs" line="142"/>
        <tag name="subpackage" description="RS" line="142"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="142"/>
        <tag name="version" description="1.0.0" line="142"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="160">
        <name>$rsa</name>
        <default/>
        <docblock>
          <description>RSA instance</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="154"/>
          <tag name="var" description="" type="\Crypt_RSA" line="154">
            <type by_reference="false">\Crypt_RSA</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="169">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="162"/>
          <tag name="param" description="Public key in PKCS#1 or raw format" type="string" variable="$key" line="162">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="" type="\type" variable="$keysize" line="162">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="169">
          <name>$keysize</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="188">
        <name>deserializeFromObject</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::deserializeFromObject($obj)" line="185"/>
        </docblock>
        <argument line="188">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="206">
        <name>serializeToObject</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::serializeToObject($obj)" line="203"/>
        </docblock>
        <argument line="206">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="215">
        <name>verify</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractPublicKey::verify($message, $signature)" line="212"/>
        </docblock>
        <argument line="215">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="215">
          <name>$signature</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" line="231" namespace="default">
      <name>RSASecretKey</name>
      <extends>\AbstractSecretKey</extends>
      <full_name>\RSASecretKey</full_name>
      <docblock>
        <description>RSA secret key</description>
        <long-description>&lt;p&gt;A secret key using the RSA algorithm.&lt;/p&gt;
</long-description>
        <tag name="package" description="Algs" line="221"/>
        <tag name="subpackage" description="RS" line="221"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="221"/>
        <tag name="version" description="1.0.0" line="221"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="239">
        <name>$rsa</name>
        <default/>
        <docblock>
          <description>RSA instance</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="233"/>
          <tag name="var" description="" type="\Crypt_RSA" line="233">
            <type by_reference="false">\Crypt_RSA</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="248">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="241"/>
          <tag name="param" description="Secret key in PKCS#1 or raw format" type="string" variable="$key" line="241">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="" type="\type" variable="$keysize" line="241">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="248">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="248">
          <name>$keysize</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="267">
        <name>deserializeFromObject</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::deserializeFromObject($obj)" line="264"/>
        </docblock>
        <argument line="267">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="287">
        <name>serializeToObject</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::serializeToObject($obj)" line="284"/>
        </docblock>
        <argument line="287">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="297">
        <name>sign</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractSecretKey::sign($message)" line="294"/>
        </docblock>
        <argument line="297">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\BrowserID\algs.php" hash="4f1602011d73f2bc4c38774730a167bb">
    <docblock>
      <description>Algorithms</description>
      <long-description>&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="Algs"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <include type="Require Once" line="33">
      <name>lib/Algs/RS.php</name>
    </include>
    <include type="Require Once" line="38">
      <name>lib/Algs/DS.php</name>
    </include>
    <class final="false" abstract="true" line="59" namespace="default">
      <name>AbstractKey</name>
      <extends/>
      <full_name>\AbstractKey</full_name>
      <docblock>
        <description>Abstract key</description>
        <long-description>&lt;p&gt;A base class for all keys.&lt;/p&gt;
</long-description>
        <tag name="abstract" description="" line="48"/>
        <tag name="package" description="BrowserID" line="48"/>
        <tag name="subpackage" description="Algs" line="48"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="48"/>
        <tag name="version" description="1.0.0" line="48"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="67">
        <name>$algorithm</name>
        <default/>
        <docblock>
          <description>Algorithm</description>
          <long-description>
</long-description>
          <tag name="access" description="protected" line="61"/>
          <tag name="var" description="" type="string" line="61">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="75">
        <name>$keysize</name>
        <default/>
        <docblock>
          <description>Keysize</description>
          <long-description>
</long-description>
          <tag name="access" description="protected" line="69"/>
          <tag name="var" description="" type="int" line="69">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="85">
        <name>getAlgorithm</name>
        <docblock>
          <description>Algorithm</description>
          <long-description>&lt;p&gt;Gets the algorithm identifier as used in the web tokens header.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="77"/>
          <tag name="return" description="" type="string" line="77">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="true" line="102" namespace="default">
      <name>AbstractKeyPair</name>
      <extends>\AbstractKey</extends>
      <full_name>\AbstractKeyPair</full_name>
      <docblock>
        <description>Abstract key pair</description>
        <long-description>&lt;p&gt;A base class for all key pairs.&lt;/p&gt;
</long-description>
        <tag name="abstract" description="" line="91"/>
        <tag name="package" description="BrowserID" line="91"/>
        <tag name="subpackage" description="Algs" line="91"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="91"/>
        <tag name="version" description="1.0.0" line="91"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="110">
        <name>$publicKey</name>
        <default/>
        <docblock>
          <description>Public key</description>
          <long-description>
</long-description>
          <tag name="access" description="protected" line="104"/>
          <tag name="var" description="" type="\AbstractPublicKey" line="104">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="118">
        <name>$secretKey</name>
        <default/>
        <docblock>
          <description>Secret key</description>
          <long-description>
</long-description>
          <tag name="access" description="protected" line="112"/>
          <tag name="var" description="" type="\AbstractSecretKey" line="112">
            <type by_reference="false">\AbstractSecretKey</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="131">
        <name>generate</name>
        <docblock>
          <description>Generate keypair</description>
          <long-description>&lt;p&gt;Generates a keypair for a given keysize in bits&lt;/p&gt;
</long-description>
          <tag name="abstract" description="" line="120"/>
          <tag name="access" description="public" line="120"/>
          <tag name="static" description="" line="120"/>
          <tag name="param" description="Keysize in bits" type="int" variable="$keysize" line="120">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="Returning an instance of the key pair" type="\AbstractKeyPair" line="120">
            <type by_reference="false">\AbstractKeyPair</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$keysize</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" line="142">
        <name>createPublicKey</name>
        <docblock>
          <description>Creates public key</description>
          <long-description>&lt;p&gt;Creates a public key using the algorithm of the extended class.&lt;/p&gt;
</long-description>
          <tag name="abstract" description="" line="133"/>
          <tag name="access" description="public" line="133"/>
          <tag name="return" description="" type="\AbstractPublicKey" line="133">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" line="153">
        <name>createSecretKey</name>
        <docblock>
          <description>Creates secret key</description>
          <long-description>&lt;p&gt;Creates a secret key using the algorithm of the extended class.&lt;/p&gt;
</long-description>
          <tag name="abstract" description="" line="144"/>
          <tag name="access" description="public" line="144"/>
          <tag name="return" description="" type="\AbstractSecretKey" line="144">
            <type by_reference="false">\AbstractSecretKey</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="163">
        <name>getPublicKey</name>
        <docblock>
          <description>Get public key</description>
          <long-description>&lt;p&gt;Gets the public key of this key pair.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="155"/>
          <tag name="return" description="" type="\AbstractPublicKey" line="155">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="176">
        <name>getSecretKey</name>
        <docblock>
          <description>Get secret key</description>
          <long-description>&lt;p&gt;Gets the secret key of this key pair.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="168"/>
          <tag name="return" description="" type="\AbstractSecretKey" line="168">
            <type by_reference="false">\AbstractSecretKey</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="true" line="193" namespace="default">
      <name>AbstractKeyInstance</name>
      <extends>\AbstractKey</extends>
      <full_name>\AbstractKeyInstance</full_name>
      <docblock>
        <description>Abstract key instance</description>
        <long-description>&lt;p&gt;A base class for all instanciated keys.&lt;/p&gt;
</long-description>
        <tag name="abstract" description="" line="182"/>
        <tag name="package" description="BrowserID" line="182"/>
        <tag name="subpackage" description="Algs" line="182"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="182"/>
        <tag name="version" description="1.0.0" line="182"/>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="protected" line="205">
        <name>deserializeFromObject</name>
        <docblock>
          <description>Deserialize from object</description>
          <long-description>&lt;p&gt;Deserialize parameters from the parameter object depending on the algorithmic specific implementation.&lt;/p&gt;
</long-description>
          <tag name="abstract" description="" line="195"/>
          <tag name="access" description="protected" line="195"/>
          <tag name="params" description="array $obj Array of algorithmic specific parameters" line="195"/>
          <tag name="return" description="" type="\AbstractKeyInstance" line="195">
            <type by_reference="false">\AbstractKeyInstance</type>
          </tag>
        </docblock>
        <argument line="205">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" line="217">
        <name>serializeToObject</name>
        <docblock>
          <description>Serialize to object</description>
          <long-description>&lt;p&gt;Serializes parameters of the instance depending on the algorithmic specific
implementation into the parameter object.&lt;/p&gt;
</long-description>
          <tag name="abstract" description="" line="207"/>
          <tag name="access" description="protected" line="207"/>
          <tag name="params" description="array $obj Array of algorithmic specific parameters" line="207"/>
        </docblock>
        <argument line="217">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="230">
        <name>fromSimpleObject</name>
        <docblock>
          <description>Unflatten key</description>
          <long-description>&lt;p&gt;Creates an key instance from the parameters.&lt;/p&gt;
</long-description>
          <tag name="abstract" description="" line="219"/>
          <tag name="access" description="public" line="219"/>
          <tag name="static" description="" line="219"/>
          <tag name="param" description="Parameters of the key" type="array" variable="$obj" line="219">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="" type="\AbstractKeyInstance" line="219">
            <type by_reference="false">\AbstractKeyInstance</type>
          </tag>
        </docblock>
        <argument line="230">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="243">
        <name>deserialize</name>
        <docblock>
          <description>Deserialize key</description>
          <long-description>&lt;p&gt;Deserializes the key.&lt;/p&gt;
</long-description>
          <tag name="abstract" description="" line="232"/>
          <tag name="access" description="public" line="232"/>
          <tag name="static" description="" line="232"/>
          <tag name="param" description="Serialized parmeters of the key" type="string" variable="$str" line="232">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="\AbstractKeyInstance" line="232">
            <type by_reference="false">\AbstractKeyInstance</type>
          </tag>
        </docblock>
        <argument line="243">
          <name>$str</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="253">
        <name>toSimpleObject</name>
        <docblock>
          <description>Flatten key</description>
          <long-description>&lt;p&gt;Extracts the parameters of the key.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="245"/>
          <tag name="return" description="" type="array" line="245">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="268">
        <name>serialize</name>
        <docblock>
          <description>Serialize key</description>
          <long-description>&lt;p&gt;Serializes the key.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="260"/>
          <tag name="return" description="" type="string" line="260">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="true" line="285" namespace="default">
      <name>AbstractPublicKey</name>
      <extends>\AbstractKeyInstance</extends>
      <full_name>\AbstractPublicKey</full_name>
      <docblock>
        <description>Abstract public key</description>
        <long-description>&lt;p&gt;A base class for all public keys.&lt;/p&gt;
</long-description>
        <tag name="abstract" description="" line="274"/>
        <tag name="package" description="BrowserID" line="274"/>
        <tag name="subpackage" description="Algs" line="274"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="274"/>
        <tag name="version" description="1.0.0" line="274"/>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" line="297">
        <name>verify</name>
        <docblock>
          <description>Verify message</description>
          <long-description>&lt;p&gt;Verifies a message using a signature.&lt;/p&gt;
</long-description>
          <tag name="abstract" description="" line="286"/>
          <tag name="access" description="public" line="286"/>
          <tag name="param" description="The message to be verified" type="string" variable="$message" line="286">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The signature to be validated" type="string" variable="$signature" line="286">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="286">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="297">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="297">
          <name>$signature</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="302">
        <name>fromSimpleObject</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::fromSimpleObject($obj)" line="299"/>
        </docblock>
        <argument line="302">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="315">
        <name>deserialize</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::deserialize($str)" line="312"/>
        </docblock>
        <argument line="315">
          <name>$str</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="true" line="331" namespace="default">
      <name>AbstractSecretKey</name>
      <extends>\AbstractKeyInstance</extends>
      <full_name>\AbstractSecretKey</full_name>
      <docblock>
        <description>Abstract secret key</description>
        <long-description>&lt;p&gt;A base class for all secret keys.&lt;/p&gt;
</long-description>
        <tag name="abstract" description="" line="320"/>
        <tag name="package" description="BrowserID" line="320"/>
        <tag name="subpackage" description="Algs" line="320"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="320"/>
        <tag name="version" description="1.0.0" line="320"/>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" line="342">
        <name>sign</name>
        <docblock>
          <description>Sign message</description>
          <long-description>&lt;p&gt;Generate a signature for the message.&lt;/p&gt;
</long-description>
          <tag name="abstract" description="" line="332"/>
          <tag name="access" description="public" line="332"/>
          <tag name="param" description="The message" type="string" variable="$message" line="332">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The signature" type="string" line="332">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="342">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="347">
        <name>fromSimpleObject</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::fromSimpleObject($obj)" line="344"/>
        </docblock>
        <argument line="347">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="360">
        <name>deserialize</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="see" description="AbstractKeyInstance::deserialize($str)" line="357"/>
        </docblock>
        <argument line="360">
          <name>$str</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" line="376" namespace="default">
      <name>AlgorithmException</name>
      <extends>\Exception</extends>
      <full_name>\AlgorithmException</full_name>
      <docblock>
        <description>Algorithmic exception</description>
        <long-description>&lt;p&gt;The algorithm was not executable&lt;/p&gt;
</long-description>
        <tag name="abstract" description="" line="365"/>
        <tag name="package" description="BrowserID" line="365"/>
        <tag name="subpackage" description="Algs" line="365"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="365"/>
        <tag name="version" description="1.0.0" line="365"/>
      </docblock>
    </class>
  </file>
  <file path="lib\BrowserID\assertion.php" hash="c0f0e1e8692bff122bd5010c7dd6fd5b">
    <docblock>
      <description>BrowserID assertion implementation</description>
      <long-description>&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="Assertion"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <include type="Require Once" line="33">
      <name>lib/BrowserID/web_token.php</name>
    </include>
    <class final="false" abstract="false" line="43" namespace="default">
      <name>Assertion</name>
      <extends/>
      <full_name>\Assertion</full_name>
      <docblock>
        <description>Assertion</description>
        <long-description>
</long-description>
        <tag name="package" description="BrowserID" line="35"/>
        <tag name="subpackage" description="Assertion" line="35"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="35"/>
        <tag name="version" description="1.0.0" line="35"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="51">
        <name>$issuedAt</name>
        <default/>
        <docblock>
          <description>Issued at</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="45"/>
          <tag name="var" description="Unix timestamp in milliseconds" type="int" line="45">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="59">
        <name>$expiresAt</name>
        <default/>
        <docblock>
          <description>Expires at</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="53"/>
          <tag name="var" description="Unix timestamp in milliseconds" type="int" line="53">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="69">
        <name>$issuer</name>
        <default/>
        <docblock>
          <description>Issuer</description>
          <long-description>&lt;p&gt;The domain of the issuing identity provider&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="61"/>
          <tag name="var" description="" type="string" line="61">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="79">
        <name>$audience</name>
        <default/>
        <docblock>
          <description>Audience</description>
          <long-description>&lt;p&gt;The audience this assertion is valid for&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="71"/>
          <tag name="var" description="" type="string" line="71">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="90">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="81"/>
          <tag name="param" description="Issued at" type="int" variable="$iat" line="81">
            <type by_reference="false">int</type>
          </tag>
          <tag name="param" description="Expires at" type="int" variable="$exp" line="81">
            <type by_reference="false">int</type>
          </tag>
          <tag name="param" description="Issuer" type="string" variable="$iss" line="81">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="Audience" type="string" variable="$aud" line="81">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$iat</name>
          <default/>
          <type/>
        </argument>
        <argument line="90">
          <name>$exp</name>
          <default/>
          <type/>
        </argument>
        <argument line="90">
          <name>$iss</name>
          <default/>
          <type/>
        </argument>
        <argument line="90">
          <name>$aud</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="105">
        <name>serialize</name>
        <docblock>
          <description>Serialize parameters</description>
          <long-description>&lt;p&gt;Serializes the objects parameters into an array.&lt;/p&gt;
</long-description>
          <tag name="param" description="An array of parameters, existing ones will be overwritten" type="array" variable="$params" line="97">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="The combined params array" type="array" line="97">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="126">
        <name>deserialize</name>
        <docblock>
          <description>Deserialize parameters</description>
          <long-description>&lt;p&gt;Creates an instance based on the parameter object. The used parameters will be removed from params.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="116"/>
          <tag name="static" description="" line="116"/>
          <tag name="param" description="An array of parameters, used ones will be removed" type="array" variable="$params" line="116">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="An instance of an assertion" type="\Assertion" line="116">
            <type by_reference="false">\Assertion</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$params</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="140">
        <name>getIssuedAt</name>
        <docblock>
          <description>Issued at</description>
          <long-description>&lt;p&gt;Gets the timestamp when this assertion was issued.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="132"/>
          <tag name="return" description="" type="int" line="132">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="152">
        <name>getExpiresAt</name>
        <docblock>
          <description>Expires at</description>
          <long-description>&lt;p&gt;Gets the timestamp when this assertion will expire.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="144"/>
          <tag name="return" description="" type="int" line="144">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="164">
        <name>getIssuer</name>
        <docblock>
          <description>Issuer</description>
          <long-description>&lt;p&gt;Gets the domain of the issuing identity provider.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="156"/>
          <tag name="return" description="" type="string" line="156">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="176">
        <name>getAudience</name>
        <docblock>
          <description>Audience</description>
          <long-description>&lt;p&gt;Gets the audience this assertion is valid for.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="168"/>
          <tag name="return" description="" type="string" line="168">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="191">
        <name>sign</name>
        <docblock>
          <description>Sign assertion</description>
          <long-description>&lt;p&gt;Sign and serialize the assertion using the users secret key belonging to his
identity certificate.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="180"/>
          <tag name="param" description="Secret key of the identity certificate" type="\type" variable="$secretKey" line="180">
            <type by_reference="false">\type</type>
          </tag>
          <tag name="param" description="Additional payload" type="array" variable="$additionalPayload" line="180">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="Signed assertion" type="string" line="180">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$secretKey</name>
          <default/>
          <type/>
        </argument>
        <argument line="191">
          <name>$additionalPayload</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="209">
        <name>verify</name>
        <docblock>
          <description>Verify</description>
          <long-description>&lt;p&gt;Checks if the parameters are valid.&lt;/p&gt;
</long-description>
          <tag name="param" description="Unix timestamp in milliseconds" type="int" variable="$now" line="201">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="true, if the instance is valid" type="boolean" line="201">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="209">
          <name>$now</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\BrowserID\cert.php" hash="e35ffdcda0564743f59686b27f87f6ec">
    <docblock>
      <description>Certificate</description>
      <long-description>&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="Cert"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <include type="Require Once" line="33">
      <name>lib/BrowserID/web_token.php</name>
    </include>
    <include type="Require Once" line="38">
      <name>lib/BrowserID/assertion.php</name>
    </include>
    <include type="Require Once" line="43">
      <name>lib/BrowserID/cert_params.php</name>
    </include>
    <class final="false" abstract="false" line="55" namespace="default">
      <name>Cert</name>
      <extends/>
      <full_name>\Cert</full_name>
      <docblock>
        <description>Certificate</description>
        <long-description>&lt;p&gt;Represents an identity certificate.&lt;/p&gt;
</long-description>
        <tag name="package" description="BrowserID" line="45"/>
        <tag name="subpackage" description="Cert" line="45"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="45"/>
        <tag name="version" description="1.0.0" line="45"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="63">
        <name>$payload</name>
        <default/>
        <docblock>
          <description>Additional payload</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="57"/>
          <tag name="var" description="" type="array" line="57">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="71">
        <name>$assertion</name>
        <default/>
        <docblock>
          <description>Assertion parameters</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="65"/>
          <tag name="var" description="" type="\Assertion" line="65">
            <type by_reference="false">\Assertion</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="79">
        <name>$certParams</name>
        <default/>
        <docblock>
          <description>Certificate parameters</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="73"/>
          <tag name="var" description="" type="\CertParams" line="73">
            <type by_reference="false">\CertParams</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="89">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="81"/>
          <tag name="param" description="The assertion parameters" type="\Assertion" variable="$assertion" line="81">
            <type by_reference="false">\Assertion</type>
          </tag>
          <tag name="param" description="The certificate parameters" type="\CertParams" variable="$certParams" line="81">
            <type by_reference="false">\CertParams</type>
          </tag>
          <tag name="param" description="" type="\type" variable="$payload" line="81">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$assertion</name>
          <default/>
          <type/>
        </argument>
        <argument line="89">
          <name>$certParams</name>
          <default/>
          <type/>
        </argument>
        <argument line="89">
          <name>$payload</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="104">
        <name>serialize</name>
        <docblock>
          <description>Serialize parameters</description>
          <long-description>&lt;p&gt;Serializes the objects parameters into an array.&lt;/p&gt;
</long-description>
          <tag name="param" description="An array of parameters, existing ones will be overwritten" type="array" variable="$params" line="96">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="The combined params array" type="array" line="96">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="123">
        <name>deserialize</name>
        <docblock>
          <description>Deserialize parameters</description>
          <long-description>&lt;p&gt;Creates an instance based on the parameter object. The used parameters will be removed from params.&lt;/p&gt;
</long-description>
          <tag name="param" description="An array of parameters, used ones will be removed" type="array" variable="$params" line="115">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="An instance of a certificate" type="\Cert" line="115">
            <type by_reference="false">\Cert</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$params</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="137">
        <name>getPayload</name>
        <docblock>
          <description>Additional payload</description>
          <long-description>&lt;p&gt;Gets the additional payload.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="129"/>
          <tag name="return" description="" type="array" line="129">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="149">
        <name>getAssertion</name>
        <docblock>
          <description>Assertion parameters</description>
          <long-description>&lt;p&gt;Gets the assertion parameters.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="141"/>
          <tag name="return" description="" type="\Assertion" line="141">
            <type by_reference="false">\Assertion</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="161">
        <name>getCertParams</name>
        <docblock>
          <description>Certificate parameters</description>
          <long-description>&lt;p&gt;Gets the certificate parameters.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="153"/>
          <tag name="return" description="" type="\CertParams" line="153">
            <type by_reference="false">\CertParams</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="177">
        <name>parse</name>
        <docblock>
          <description>Parse serialized identity certificate</description>
          <long-description>&lt;p&gt;Parses a serialized, signed identity certificate and check if it's valid by
checking the signature against the public key of the issuer.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="165"/>
          <tag name="static" description="" line="165"/>
          <tag name="param" description="Signed identity certificate" type="string" variable="$signedObject" line="165">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="Public key of the issuer" type="\AbstractPublicKey" variable="$publicKey" line="165">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
          <tag name="return" description="Instance of the identity certificate" type="\Cert" line="165">
            <type by_reference="false">\Cert</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$signedObject</name>
          <default/>
          <type/>
        </argument>
        <argument line="177">
          <name>$publicKey</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="197">
        <name>sign</name>
        <docblock>
          <description>Sign identity certificate</description>
          <long-description>&lt;p&gt;Sign and serialize this instance using the secret key of the issuer.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="187"/>
          <tag name="param" description="Secret key of the issuer" type="\AbstractSecretKey" variable="$secretKey" line="187">
            <type by_reference="false">\AbstractSecretKey</type>
          </tag>
          <tag name="param" description="Additional payload or null if none to add" type="array" variable="$additionalPayload" line="187">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="Serialized identity certificate" type="string" line="187">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="197">
          <name>$secretKey</name>
          <default/>
          <type/>
        </argument>
        <argument line="197">
          <name>$additionalPayload</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="215">
        <name>verify</name>
        <docblock>
          <description>Verify</description>
          <long-description>&lt;p&gt;Checks if the parameters are valid.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="206"/>
          <tag name="param" description="Unix timestamp in milliseconds" type="int" variable="$now" line="206">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="true, if the instance is valid" type="boolean" line="206">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="215">
          <name>$now</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\BrowserID\cert_assertion.php" hash="1db58383235abf477f1432dd5e5500cb">
    <docblock>
      <description>BrowserID certificate assertion implementation</description>
      <long-description>&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="CertAssertion"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <markers>
      <todo line="261">This is only valid for mozillas main idp</todo>
    </markers>
    <include type="Require Once" line="33">
      <name>lib/BrowserID/cert_bundle.php</name>
    </include>
    <include type="Require Once" line="38">
      <name>lib/BrowserID/primary.php</name>
    </include>
    <include type="Require Once" line="43">
      <name>lib/BrowserID/configuration.php</name>
    </include>
    <class final="false" abstract="false" line="56" namespace="default">
      <name>CertAssertion</name>
      <extends/>
      <full_name>\CertAssertion</full_name>
      <docblock>
        <description>Certificate assertion</description>
        <long-description>&lt;p&gt;This class offers functions to create certified assertions, certificate identities
or to check if a signed assertion is valid.&lt;/p&gt;
</long-description>
        <tag name="package" description="BrowserID" line="45"/>
        <tag name="subpackage" description="CertAssertion" line="45"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="45"/>
        <tag name="version" description="1.0.0" line="45"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="64">
        <name>$assertion</name>
        <default/>
        <docblock>
          <description>Certified assertion</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="58"/>
          <tag name="var" description="" type="string" line="58">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="74">
        <name>$audience</name>
        <default/>
        <docblock>
          <description>Audience</description>
          <long-description>&lt;p&gt;The audience this assertion was signed for.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="66"/>
          <tag name="var" description="" type="string" line="66">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="83">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="76"/>
          <tag name="param" description="A certified assertion" type="string" variable="$assertion" line="76">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The audience the assertion was signed for" type="string" variable="$audience" line="76">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$assertion</name>
          <default/>
          <type/>
        </argument>
        <argument line="83">
          <name>$audience</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" line="99">
        <name>normalizeParsedURL</name>
        <docblock>
          <description>Normalize parsed URL</description>
          <long-description>&lt;p&gt;Normalizes a parsed URL, so that it contains the port part.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="89"/>
          <tag name="static" description="" line="89"/>
          <tag name="param" description="The parts of the parsed domain" type="array" variable="$parts" line="89">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="The parts, but with filled port field" type="array" line="89">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$parts</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="113">
        <name>compareAudiences</name>
        <docblock>
          <description>Compare audiences</description>
          <long-description>&lt;p&gt;Checks if the given assertion is valid for the audience.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="104"/>
          <tag name="param" description="The expected audience" type="string" variable="$want" line="104">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The error message if it fails or null on success" type="string" line="104">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$want</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="165">
        <name>isValid</name>
        <docblock>
          <description>Check validity</description>
          <long-description>&lt;p&gt;Checks if the assertion is valid for the given audience&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="157"/>
          <tag name="return" description="" type="boolean" line="157">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="188">
        <name>createIdentityCert</name>
        <docblock>
          <description>Create identity certificate</description>
          <long-description>&lt;p&gt;Create an identity certificate that is signed by this identity providers key&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="175"/>
          <tag name="static" description="" line="175"/>
          <tag name="param" description="The mail address of the person to identify" type="string" variable="$principal" line="175">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The public key of the person" type="\AbstractPublicKey" variable="$publicKeyIdentity" line="175">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
          <tag name="param" description="Unix Timestamp in milliseconds or null for now" type="int" variable="$now" line="175">
            <type by_reference="false">int</type>
          </tag>
          <tag name="param" description="Issuer domain of the identity provider or null for the configured hostname" type="string" variable="$issuer" line="175">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The serialized signed identity certificate" type="string" line="175">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="188">
          <name>$principal</name>
          <default/>
          <type/>
        </argument>
        <argument line="188">
          <name>$publicKeyIdentity</name>
          <default/>
          <type/>
        </argument>
        <argument line="188">
          <name>$now</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="188">
          <name>$issuer</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="214">
        <name>createAssertion</name>
        <docblock>
          <description>Create signed assertion</description>
          <long-description>&lt;p&gt;Create a signed assertion using the users secret key.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="201"/>
          <tag name="static" description="" line="201"/>
          <tag name="param" description="The audience this assertion is signed for" type="string" variable="$audience" line="201">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="An instance of the secret key matching the users certificate identity" type="\AbstractSecretkey" variable="$secretKeyIdentity" line="201">
            <type by_reference="false">\AbstractSecretkey</type>
          </tag>
          <tag name="param" description="Additional fields to assert" type="array" variable="$additionalPayload" line="201">
            <type by_reference="false">array</type>
          </tag>
          <tag name="param" description="Unix timestamp in milliseconds or null for now" type="int" variable="$now" line="201">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="The serialized signed assertion" type="string" line="201">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$audience</name>
          <default/>
          <type/>
        </argument>
        <argument line="214">
          <name>$secretKeyIdentity</name>
          <default/>
          <type/>
        </argument>
        <argument line="214">
          <name>$additionalPayload</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="214">
          <name>$now</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="232">
        <name>verify</name>
        <docblock>
          <description>Verificate validity</description>
          <long-description>&lt;p&gt;Verify if the signed assertion is valid.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="223"/>
          <tag name="return" description="Containing the used certificate chain as &amp;#039;certChain&amp;#039;, additional payload given in the assertion as &amp;#039;payload&amp;#039; and the assertion object as &amp;#039;assertion&amp;#039;" type="array" line="223">
            <type by_reference="false">array</type>
          </tag>
          <tag name="throws" description="Throws an exception if the verification fails" type="\Exception" line="223">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="lib\BrowserID\cert_bundle.php" hash="a5907a8012152a7615e5a284df8be429">
    <docblock>
      <description>Certificate bundle</description>
      <long-description>&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="CertBundle"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <include type="Require Once" line="33">
      <name>lib/BrowserID/cert.php</name>
    </include>
    <include type="Require Once" line="38">
      <name>lib/BrowserID/secrets.php</name>
    </include>
    <include type="Require Once" line="43">
      <name>lib/BrowserID/configuration.php</name>
    </include>
    <class final="false" abstract="false" line="55" namespace="default">
      <name>CertBundle</name>
      <extends/>
      <full_name>\CertBundle</full_name>
      <docblock>
        <description>Certificate bundle</description>
        <long-description>&lt;p&gt;A bundle consisting of an signed assertion and a list of identity certificates.&lt;/p&gt;
</long-description>
        <tag name="package" description="BrowserID" line="45"/>
        <tag name="subpackage" description="CertBundle" line="45"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="45"/>
        <tag name="version" description="1.0.0" line="45"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="65">
        <name>$certs</name>
        <default/>
        <docblock>
          <description>Identity certificates</description>
          <long-description>&lt;p&gt;A list of signed identity certificates&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="57"/>
          <tag name="var" description="" type="array" line="57">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="73">
        <name>$signedAssertion</name>
        <default/>
        <docblock>
          <description>Signed assertion</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="67"/>
          <tag name="var" description="" type="string" line="67">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="82">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="75"/>
          <tag name="param" description="Signed assertion" type="string" variable="$assertion" line="75">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="List of signed identity certificates" type="array" variable="$certificates" line="75">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$assertion</name>
          <default/>
          <type/>
        </argument>
        <argument line="82">
          <name>$certificates</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="99">
        <name>getCerts</name>
        <docblock>
          <description>Identity certificates</description>
          <long-description>&lt;p&gt;Gets the list of identity certificates.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="91"/>
          <tag name="return" description="" type="array" line="91">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="111">
        <name>getSignedAssertion</name>
        <docblock>
          <description>Signed assertion</description>
          <long-description>&lt;p&gt;Gets the signed assertion.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="103"/>
          <tag name="return" description="" type="string" line="103">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="125">
        <name>unbundle</name>
        <docblock>
          <description>Unbundle assertion</description>
          <long-description>&lt;p&gt;Creates an instance by parsing a bundled assertion.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="115"/>
          <tag name="static" description="" line="115"/>
          <tag name="param" description="Bundled assertion" type="string" variable="$bundle" line="115">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="\CertBundle" line="115">
            <type by_reference="false">\CertBundle</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$bundle</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="144">
        <name>bundle</name>
        <docblock>
          <description>Bundle assertion</description>
          <long-description>&lt;p&gt;Bundle the signed assertion and the list of identity certificates into an bundled assertion.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="136"/>
          <tag name="return" description="Bundled assertion" type="string" line="136">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="162">
        <name>verifyChain</name>
        <docblock>
          <description>Verify certificate chain</description>
          <long-description>&lt;p&gt;Verifies the chain of certificates based on the first one as root certificate.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="153"/>
          <tag name="param" description="Unix timestamp in milliseconds" type="int" variable="$now" line="153">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="An array of Cert-objects based on the identity certificates" type="array" line="153">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$now</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="203">
        <name>getPublicKey</name>
        <docblock>
          <description>Get public key</description>
          <long-description>&lt;p&gt;Gets the public key for the issuer. If our own identity provider is the issuer, we
can load our own public key avoiding network traffic.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="192"/>
          <tag name="static" description="" line="192"/>
          <tag name="param" description="The issuers domain" type="string" variable="$issuer" line="192">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="\AbstractPublicKey" line="192">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$issuer</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="223">
        <name>verify</name>
        <docblock>
          <description>Verify the bundled assertion</description>
          <long-description>&lt;p&gt;Verifies if the bundled assertion is valid.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="214"/>
          <tag name="param" description="Unix timestamp in milliseconds" type="int" variable="$now" line="214">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="Containing the array of certificates as &amp;#039;certChain&amp;#039;, the additional assertion payload as &amp;#039;payload&amp;#039; and an assertion object as &amp;#039;assertion&amp;#039;" type="array" line="214">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="223">
          <name>$now</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\BrowserID\cert_params.php" hash="88fdb442a715382002252b1088410068">
    <docblock>
      <description>Certification parameters</description>
      <long-description>&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="CertParams"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <include type="Require Once" line="33">
      <name>lib/BrowserID/algs.php</name>
    </include>
    <class final="false" abstract="false" line="45" namespace="default">
      <name>CertParams</name>
      <extends/>
      <full_name>\CertParams</full_name>
      <docblock>
        <description>Certificate parameters</description>
        <long-description>&lt;p&gt;A container for certificate specific parameters like the principal or the public key.&lt;/p&gt;
</long-description>
        <tag name="package" description="BrowserID" line="35"/>
        <tag name="subpackage" description="CertParams" line="35"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="35"/>
        <tag name="version" description="1.0.0" line="35"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="53">
        <name>$publicKey</name>
        <default/>
        <docblock>
          <description>Public key</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="47"/>
          <tag name="var" description="The public key of the certificate" type="\AbstractPublicKey" line="47">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="61">
        <name>$principal</name>
        <default/>
        <docblock>
          <description>Principal</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="55"/>
          <tag name="var" description="the principal, mostly the email address" type="array" line="55">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="70">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="63"/>
          <tag name="param" description="Public key of the certificate" type="\AbstractPublicKey" variable="$pubKey" line="63">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
          <tag name="param" description="The principal the certificate belongs to" type="array" variable="$principal" line="63">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$pubKey</name>
          <default/>
          <type/>
        </argument>
        <argument line="70">
          <name>$principal</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="85">
        <name>serialize</name>
        <docblock>
          <description>Serialize parameters</description>
          <long-description>&lt;p&gt;Serializes the objects parameters into an array.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="76"/>
          <tag name="param" description="An array of parameters, existing ones will be overwritten" type="array" variable="$params" line="76">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="The combined params array" type="array" line="76">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="105">
        <name>deserialize</name>
        <docblock>
          <description>Deserialize parameters</description>
          <long-description>&lt;p&gt;Creates an instance based on the parameter object. The used parameters will be removed from params.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="95"/>
          <tag name="static" description="" line="95"/>
          <tag name="param" description="An array of parameters, used ones will be removed" type="array" variable="$params" line="95">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="An instance of certificate parameters" type="\CertParams" line="95">
            <type by_reference="false">\CertParams</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$params</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="121">
        <name>verify</name>
        <docblock>
          <description>Verify</description>
          <long-description>&lt;p&gt;Checks if the parameters are valid.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="112"/>
          <tag name="param" description="Unix timestamp in milliseconds" type="int" variable="$now" line="112">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="true, if the instance is valid" type="boolean" line="112">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="121">
          <name>$now</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="133">
        <name>getPublicKey</name>
        <docblock>
          <description>Public Key</description>
          <long-description>&lt;p&gt;Gets the public key.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="125"/>
          <tag name="return" description="" type="\AbstractPublicKey" line="125">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="144">
        <name>getPrincipal</name>
        <docblock>
          <description>Principal</description>
          <long-description>&lt;p&gt;Gets the principal.&lt;/p&gt;
</long-description>
          <tag name="return" description="" type="array" line="137">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="lib\BrowserID\configuration.php" hash="84b65155cc584a997f937ddf15a727b5">
    <docblock>
      <description>Configuration</description>
      <long-description>&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="Configuration"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <class final="false" abstract="false" line="44" namespace="default">
      <name>Configuration</name>
      <extends/>
      <full_name>\Configuration</full_name>
      <docblock>
        <description>Configuration</description>
        <long-description>&lt;p&gt;An abstraction which contains various pre-set deployment
environments and adjusts runtime configuration appropriate for
the current environmnet (specified via Configuration::getInstance()-&gt;setEnvironment(...))&lt;/p&gt;

&lt;p&gt;The class can only be used through the singleton Configuration::getInstance()&lt;/p&gt;
</long-description>
        <tag name="package" description="BrowserID" line="30"/>
        <tag name="subpackage" description="Configuration" line="30"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="30"/>
        <tag name="version" description="1.0.0" line="30"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="52">
        <name>$g_configs</name>
        <default>array</default>
        <docblock>
          <description>The various deployment configurations</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="46"/>
          <tag name="var" description="The array contains configurations for the environments" type="array" line="46">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="60">
        <name>$environment</name>
        <default>production</default>
        <docblock>
          <description>The environment that defines what configuration to use</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="54"/>
          <tag name="var" description="The selected environment" type="string" line="54">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="68">
        <name>$g_config</name>
        <default>NULL</default>
        <docblock>
          <description>The configuration selected through the environment</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="62"/>
          <tag name="var" description="The current configuration" type="array" line="62">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="77">
        <name>$instance</name>
        <default>NULL</default>
        <docblock>
          <description>Singleton</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="70"/>
          <tag name="static" description="" line="70"/>
          <tag name="var" description="The only instance of this class" type="\Configuration" line="70">
            <type by_reference="false">\Configuration</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="private" line="85">
        <name>__construct</name>
        <docblock>
          <description>Disallow construction</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="80"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="92">
        <name>__clone</name>
        <docblock>
          <description>Disallow cloning</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="87"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="99">
        <name>__initInstance</name>
        <docblock>
          <description>Initialize the singleton instance</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="94"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="134">
        <name>getPortForURL</name>
        <docblock>
          <description>Extract port from URL</description>
          <long-description>&lt;p&gt;Return the port extension if the port is not the standard for the scheme&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="126"/>
          <tag name="return" description="Port extension for URL" type="string" line="126">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="149">
        <name>getInstance</name>
        <docblock>
          <description>Get singleton</description>
          <long-description>&lt;p&gt;Returns an instance of the configuration singleton&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="140"/>
          <tag name="static" description="" line="140"/>
          <tag name="return" description="The singleton" type="\Configuration" line="140">
            <type by_reference="false">\Configuration</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="166">
        <name>get</name>
        <docblock>
          <description>Getter</description>
          <long-description>&lt;p&gt;Fetch a configuration parameter for the current environment&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="157"/>
          <tag name="param" description="The configuration param to retrieve" type="string" variable="$val" line="157">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The value corresponding to $val" type="string" line="157">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$val</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="179">
        <name>setEnvironment</name>
        <docblock>
          <description>Select environment</description>
          <long-description>&lt;p&gt;Select a new environment to use in the instance&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="171"/>
          <tag name="param" description="The environment to select (production, developement)" type="string" variable="$env" line="171">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="179">
          <name>$env</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\BrowserID\primary.php" hash="f58c66017064180c00fe9b1bd79576ce">
    <docblock>
      <description>Identity provider</description>
      <long-description>&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="Primary"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <markers>
      <todo line="200">This is only valid for mozillas main idp)</todo>
      <todo line="348">Maybe later</todo>
    </markers>
    <include type="Require Once" line="33">
      <name>lib/BrowserID/utils.php</name>
    </include>
    <include type="Require Once" line="38">
      <name>lib/BrowserID/secrets.php</name>
    </include>
    <include type="Require Once" line="43">
      <name>lib/BrowserID/algs.php</name>
    </include>
    <include type="Require Once" line="48">
      <name>lib/BrowserID/configuration.php</name>
    </include>
    <class final="false" abstract="false" line="67" namespace="default">
      <name>Primary</name>
      <extends/>
      <full_name>\Primary</full_name>
      <docblock>
        <description>Identity Provider (Primary)</description>
        <long-description>&lt;p&gt;To verify the validity of certificates, the public keys of the identity providers
have to be well-known. Therefore every identity provider has offer an /.well-known/browserid
under his domain.&lt;/p&gt;

&lt;p&gt;This class can check a identity provider using the 'Basic Support Document', offering his
public key, an authentication- and an provisioning-url for his own signed identity
certificates or the 'Delegated Support Document' stating the authority which takes care
of the signing and key holding.&lt;/p&gt;
</long-description>
        <tag name="package" description="BrowserID" line="50"/>
        <tag name="subpackage" description="Primary" line="50"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="50"/>
        <tag name="version" description="1.0.0" line="50"/>
      </docblock>
      <constant namespace="default" line="72">
        <name>WELL_KNOWN_URL</name>
        <value>/.well-known/browserid</value>
        <docblock>
          <description>The path to the well-known document</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="77">
        <name>MAX_AUTHORITY_DELEGATIONS</name>
        <value>6</value>
        <docblock>
          <description>The maximum number of hops supported for cert chains</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="private" line="88">
        <name>$initialized</name>
        <default>false</default>
        <docblock>
          <description>Initialization status</description>
          <long-description>&lt;p&gt;This shows if the class and static variables are already initialized.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="79"/>
          <tag name="static" description="" line="79"/>
          <tag name="var" description="" type="boolean" line="79">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="103">
        <name>$g_shim_cache</name>
        <default>array</default>
        <docblock>
          <description>Shimmed primaries</description>
          <long-description>&lt;p&gt;A list of shimmed primaries. Used for local developement or standard
certificates to boost up key retrieval.&lt;/p&gt;

&lt;p&gt;Every entry of the array contains the 'origin' where the traffic should be
directed to and a 'body' where the public key is stored.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="90"/>
          <tag name="static" description="" line="90"/>
          <tag name="var" description="Indixed by the domain name" type="array" line="90">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="115">
        <name>$public_key</name>
        <default>null</default>
        <docblock>
          <description>Public key of the Identity Provider</description>
          <long-description>&lt;p&gt;If this server is used as identity provider, this localy public key is used
for verification instead of using the well-known protocol.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="105"/>
          <tag name="static" description="" line="105"/>
          <tag name="var" description="Public key of this identity provider" type="\AbstractPublicKey" line="105">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="123">
        <name>initialize</name>
        <docblock>
          <description>Initialization routine</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="117"/>
          <tag name="static" description="" line="117"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="164">
        <name>parseWellKnownBody</name>
        <docblock>
          <description>Well-Known document parsing</description>
          <long-description>&lt;p&gt;Parses the reply of the well-known document, verifying that all needed
parts are contained. 'Basic Support Documents' have to implement the keys
'public-key', 'authentication' and 'provisioning'. 'Delegated Support Documents'
only need an 'authority' entry.&lt;/p&gt;

&lt;p&gt;This is called recursive for delegated identity providers.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="147"/>
          <tag name="static" description="" line="147"/>
          <tag name="param" description="The body of the well-known document" type="string" variable="$body" line="147">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The domain the body belongs to" type="string" variable="$domain" line="147">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="A list of already seen domains while delegating" type="array" variable="$delegates" line="147">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="Containing the string &amp;#039;publicKey&amp;#039; (the domains public key) and the array &amp;#039;urls&amp;#039; (with the URL of the authentification document as &amp;#039;auth&amp;#039; and the URL of the provisioning document as &amp;#039;prov&amp;#039;)" type="array" line="147">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$body</name>
          <default/>
          <type/>
        </argument>
        <argument line="164">
          <name>$domain</name>
          <default/>
          <type/>
        </argument>
        <argument line="164">
          <name>$delegates</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="245">
        <name>getWellKnown</name>
        <docblock>
          <description>Well-Known document retrieval</description>
          <long-description>&lt;p&gt;Get the body of the well-known document of a domain.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="234"/>
          <tag name="static" description="" line="234"/>
          <tag name="param" description="The domain for which the well-known document should be retrieved" type="string" variable="$domain" line="234">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="A list of already seen domains while delegating" type="array" variable="$delegates" line="234">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="Containing the content of the document as &amp;#039;body&amp;#039;, &amp;#039;domain&amp;#039; and the already seen deletages as &amp;#039;delegates&amp;#039;" type="array" line="234">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="245">
          <name>$domain</name>
          <default/>
          <type/>
        </argument>
        <argument line="245">
          <name>$delegates</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="289">
        <name>checkSupport</name>
        <docblock>
          <description>Check domain support</description>
          <long-description>&lt;p&gt;Checks if the given domain supports BrowserID/Persona and offers a support document.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="278"/>
          <tag name="static" description="" line="278"/>
          <tag name="param" description="The name of the domain" type="string" variable="$domain" line="278">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="A list of already seen domains while delegating" type="array" variable="$delegates" line="278">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="@see Primary::getWellKnown() or null if not supported" type="array" line="278">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="289">
          <name>$domain</name>
          <default/>
          <type/>
        </argument>
        <argument line="289">
          <name>$delegates</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="325">
        <name>getPublicKey</name>
        <docblock>
          <description>Retrieve public key for domain</description>
          <long-description>&lt;p&gt;Gets the public key for a domain that acts as Persona Identity Provider&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="316"/>
          <tag name="static" description="" line="316"/>
          <tag name="param" description="The domain" type="string" variable="$domain" line="316">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="Instance of the public key" type="\AbstractPublicKey" line="316">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
        </docblock>
        <argument line="325">
          <name>$domain</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="347">
        <name>delegatesAuthority</name>
        <docblock>
          <description>Check for authority delegation</description>
          <long-description>&lt;p&gt;Checking if the issuing domain is allowed to issue identity certificates for
this email  domain. This should only be the case if the issuing domain is
Mozilla's server or if the email domain is delegating to the issuing domain.&lt;/p&gt;
</long-description>
          <tag name="param" description="The domain of the mail, the expected issuer" type="string" variable="$emailDomain" line="336">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The domain that issued the assertion" type="string" variable="$issuingDomain" line="336">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="\type" line="336">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="347">
          <name>$emailDomain</name>
          <default/>
          <type/>
        </argument>
        <argument line="347">
          <name>$issuingDomain</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\BrowserID\secrets.php" hash="d4659d9c0026ba6642b6b067472a08ff">
    <docblock>
      <description>Secret credentials</description>
      <long-description>&lt;p&gt;Some helping function to access the credentials of the identity provider.
These can be used to verify own signed assertions or to sign identity certificates
for principals.&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="Secrets"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <include type="Require Once" line="37">
      <name>lib/BrowserID/utils.php</name>
    </include>
    <include type="Require Once" line="43">
      <name>lib/BrowserID/configuration.php</name>
    </include>
    <class final="false" abstract="false" line="57" namespace="default">
      <name>Secrets</name>
      <extends/>
      <full_name>\Secrets</full_name>
      <docblock>
        <description>Secret credentials</description>
        <long-description>&lt;p&gt;Some helping function to access the credentials of the identity provider.
These can be used to verify own signed assertions or to sign identity certificates
for principals.&lt;/p&gt;
</long-description>
        <tag name="package" description="BrowserID" line="45"/>
        <tag name="subpackage" description="Secrets" line="45"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="45"/>
        <tag name="version" description="1.0.0" line="45"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" line="66">
        <name>checkName</name>
        <docblock>
          <description>Get the base name of the certificate to use if given or use the default
name 'root'</description>
          <long-description>
</long-description>
          <tag name="param" description="string $name Name to use or null" type="\optional" variable="$name" line="59">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="Name to use" type="string" line="59">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="77">
        <name>checkDir</name>
        <docblock>
          <description>Get the directory where the certificates are stored or use the default
path defined in the configuration as 'var_path'</description>
          <long-description>
</long-description>
          <tag name="param" description="string $dir Directory to use or null" type="\optional" variable="$dir" line="70">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="Directory to use" type="string" line="70">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$dir</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="89">
        <name>getPathSecretKey</name>
        <docblock>
          <description>Get the complete path to the secret key of the identity provider</description>
          <long-description>
</long-description>
          <tag name="param" description="string $name The basename of the certificate or null for default" type="\optional" variable="$name" line="82">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="string $dir The directory to the certificate or null for default" type="\optional" variable="$dir" line="82">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="The path to the secret key" type="string" line="82">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="89">
          <name>$dir</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="102">
        <name>loadSecretKey</name>
        <docblock>
          <description>Gets an instance of the secret key of the identity provider</description>
          <long-description>
</long-description>
          <tag name="param" description="string $name The basename of the certificate or null for default" type="\optional" variable="$name" line="95">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="string $dir The directory to the certificate or null for default" type="\optional" variable="$dir" line="95">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="The secret key" type="\AbstractSecretKey" line="95">
            <type by_reference="false">\AbstractSecretKey</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="102">
          <name>$dir</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="123">
        <name>getPathPublicKey</name>
        <docblock>
          <description>Get the complete path to the public key of the identity provider</description>
          <long-description>
</long-description>
          <tag name="param" description="string $name The basename of the certificate or null for default" type="\optional" variable="$name" line="116">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="string $dir The directory to the certificate or null for default" type="\optional" variable="$dir" line="116">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="The path to the public key" type="string" line="116">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="123">
          <name>$dir</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="136">
        <name>readAndParseCert</name>
        <docblock>
          <description>Get the public key of the basic support document of the identity provider</description>
          <long-description>
</long-description>
          <tag name="param" description="string $name The basename of the certificate or null for default" type="\optional" variable="$name" line="129">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="string $dir The directory to the certificate or null for default" type="\optional" variable="$dir" line="129">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="An instance of the basic support document containing the public key or null" type="object" line="129">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="136">
          <name>$dir</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="165">
        <name>loadPublicKey</name>
        <docblock>
          <description>Gets an instance of the public key of the identity provider</description>
          <long-description>
</long-description>
          <tag name="param" description="string $name The basename of the certificate or null for default" type="\optional" variable="$name" line="158">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="string $dir The directory to the certificate or null for default" type="\optional" variable="$dir" line="158">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="The public key" type="\AbstractPublicKey" line="158">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="165">
          <name>$dir</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\BrowserID\utils.php" hash="914a862223014a1925f44effb9691f76">
    <docblock>
      <description>Utility library</description>
      <long-description>&lt;p&gt;This class defines some static functions that are used through the project.&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="Utils"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <class final="false" abstract="false" line="40" namespace="default">
      <name>Utils</name>
      <extends/>
      <full_name>\Utils</full_name>
      <docblock>
        <description>Utility library</description>
        <long-description>
</long-description>
        <tag name="package" description="BrowserID" line="32"/>
        <tag name="subpackage" description="Utils" line="32"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="32"/>
        <tag name="version" description="1.0.0" line="32"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" line="48">
        <name>base64url_encode</name>
        <docblock>
          <description>Encodes data with MIME base64 and make it URL-safe</description>
          <long-description>
</long-description>
          <tag name="param" description="The message to encode" type="string" variable="$data" line="42">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The encoded message" type="string" line="42">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="58">
        <name>base64url_decode</name>
        <docblock>
          <description>Decodes data made URL-safe and encoded with MIME base64</description>
          <long-description>
</long-description>
          <tag name="param" description="The message to decode" type="string" variable="$data" line="52">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The decoded message" type="string" line="52">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="67">
        <name>path_concat</name>
        <docblock>
          <description>Concat parts of a file path descriptor into a complete path</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="string" line="62">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="78">
        <name>is_url_valid</name>
        <docblock>
          <description>Checks if a given URL is valid</description>
          <long-description>
</long-description>
          <tag name="param" description="URL to be verified" type="string" variable="$url" line="72">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="true, if the URL is valid" type="boolean" line="72">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$url</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="90">
        <name>hex_lpad</name>
        <docblock>
          <description>Pads a hexadecimal string with 0s to the left</description>
          <long-description>
</long-description>
          <tag name="param" description="Hexadecimal number to be padded" type="string" variable="$str" line="83">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The length of the final hexadecimal number" type="int" variable="$length" line="83">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="" type="string" line="83">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$str</name>
          <default/>
          <type/>
        </argument>
        <argument line="90">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\BrowserID\verifier.php" hash="4a5f3f86c6a261d7be857cdcbda80704">
    <docblock>
      <description>BrowserID assertion verifier</description>
      <long-description>&lt;p&gt;Verifies an assertion bundle that was generated by the users browser. This
can be used to assure that the assertion is valid and to get the payload sent
with the assertion.&lt;/p&gt;

&lt;p&gt;Here's a short example of how to use this library:
&lt;code&gt;
&lt;?php
   include('lib/browserid.php');

   $response = Verifier::verify($assertion, 'yoursite.org');
   if ($response["status"] == "okay") {
       $_SESSION['email'] = $response["email"];
       ...
   } else {
       echo $response["reason"];
       ...
   }
?&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="Verifier"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <markers>
      <todo line="87">Contains the additional payload of the assertion, may be added later!</todo>
    </markers>
    <include type="Require Once" line="53">
      <name>lib/BrowserID/cert_assertion.php</name>
    </include>
    <include type="Require Once" line="58">
      <name>lib/BrowserID/primary.php</name>
    </include>
    <include type="Require Once" line="63">
      <name>lib/BrowserID/configuration.php</name>
    </include>
    <class final="false" abstract="false" line="73" namespace="default">
      <name>Verifier</name>
      <extends/>
      <full_name>\Verifier</full_name>
      <docblock>
        <description>Verifier</description>
        <long-description>
</long-description>
        <tag name="package" description="BrowserID" line="65"/>
        <tag name="subpackage" description="Verifier" line="65"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="65"/>
        <tag name="version" description="1.0.0" line="65"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" line="82">
        <name>verify</name>
        <docblock>
          <description>Verifies a given assertion bundle for validity and against the audience.</description>
          <long-description>
</long-description>
          <tag name="param" description="The serialized assertion bundle" type="String" variable="$assertion" line="75">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="The audience as valid URL" type="String" variable="$audience" line="75">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="An array containing status okay on success or failure on error" type="array" line="75">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$assertion</name>
          <default/>
          <type/>
        </argument>
        <argument line="82">
          <name>$audience</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\BrowserID\web_token.php" hash="38ebc3782300b00d34e5106eb2749e0b">
    <docblock>
      <description>JSON Web Token implementation</description>
      <long-description>&lt;p&gt;Implementation of the JWT protocol based on:
http://self-issued.info/docs/draft-jones-json-web-token-01.html&lt;/p&gt;

&lt;p&gt;This code is also based on the scripts found at jwcryptos's github repository:
https://github.com/mozilla/jwcrypto/blob/master/lib/jwcrypto.js&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="subpackage" description="WebToken"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <include type="Require Once" line="39">
      <name>lib/BrowserID/utils.php</name>
    </include>
    <class final="false" abstract="false" line="52" namespace="default">
      <name>WebToken</name>
      <extends/>
      <full_name>\WebToken</full_name>
      <docblock>
        <description>JSON Web Token implementation</description>
        <long-description>&lt;p&gt;Implementation of the JWT protocol based on:
http://self-issued.info/docs/draft-jones-json-web-token-01.html&lt;/p&gt;
</long-description>
        <tag name="package" description="BrowserID" line="41"/>
        <tag name="subpackage" description="WebToken" line="41"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="41"/>
        <tag name="version" description="1.0.0" line="41"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="60">
        <name>$headerSegment</name>
        <default/>
        <docblock>
          <description>The header segment of the web token on parsing</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="54"/>
          <tag name="var" description="A list of header entries (like the algorithm)" type="array" line="54">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="68">
        <name>$payloadSegment</name>
        <default/>
        <docblock>
          <description>The payload that was signed</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="62"/>
          <tag name="var" description="The data" type="string" line="62">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="77">
        <name>$cryptoSegment</name>
        <default/>
        <docblock>
          <description>The signature generated from the payload using the algorithm
given in the header</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="70"/>
          <tag name="var" description="The signature" type="string" line="70">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="85">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="79"/>
          <tag name="param" description="The data to be signed" type="string" variable="$object" line="79">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$object</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="99">
        <name>parse</name>
        <docblock>
          <description>Parse serialized JWT data</description>
          <long-description>&lt;p&gt;Generate a Webtoken object for parsing JWT data.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="89"/>
          <tag name="static" description="" line="89"/>
          <tag name="param" description="The JSON Web Token" type="string" variable="$input" line="89">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="A Webtoken instance for verification" type="\WebToken" line="89">
            <type by_reference="false">\WebToken</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$input</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="121">
        <name>serialize</name>
        <docblock>
          <description>Serialize web token</description>
          <long-description>&lt;p&gt;Serializes data as JWT using the defined algorithm and data and signed
with the key.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="111"/>
          <tag name="param" description="The key used for hashing" type="string" variable="$key" line="111">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="Serialized web token" type="string" line="111">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="121">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="140">
        <name>verify</name>
        <docblock>
          <description>Verify web token</description>
          <long-description>&lt;p&gt;Verifies a Webtoken against an public key.&lt;/p&gt;
</long-description>
          <tag name="param" description="The key used to verify the webtoken" type="\AbstractPublicKey" variable="$key" line="132">
            <type by_reference="false">\AbstractPublicKey</type>
          </tag>
          <tag name="return" description="true, if the webtoken is valid" type="bool" line="132">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="152">
        <name>getHeader</name>
        <docblock>
          <description>Header data</description>
          <long-description>&lt;p&gt;Returns the data of the token header, normally containing the algorithm used.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="144"/>
          <tag name="return" description="An object of header data" type="object" line="144">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="168">
        <name>getHeaderSegment</name>
        <docblock>
          <description>Header segment</description>
          <long-description>&lt;p&gt;Returns the serialized header segment of the token.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="160"/>
          <tag name="return" description="" type="string" line="160">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="180">
        <name>getPayload</name>
        <docblock>
          <description>Payload data</description>
          <long-description>&lt;p&gt;Returns the payload of the token that was to be serialized and signed.&lt;/p&gt;
</long-description>
          <tag name="return" description="An object of payload data" type="object" line="173">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="196">
        <name>getPayloadSegment</name>
        <docblock>
          <description>Payload segment</description>
          <long-description>&lt;p&gt;Returns the serialized payload segment of the token.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="188"/>
          <tag name="return" description="" type="string" line="188">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="208">
        <name>getSignature</name>
        <docblock>
          <description>Signature</description>
          <long-description>&lt;p&gt;Returns the signature of the token as binary data.&lt;/p&gt;
</long-description>
          <tag name="return" description="The signature as binary data" type="string" line="201">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="224">
        <name>getCryptoSegment</name>
        <docblock>
          <description>Crypto segment</description>
          <long-description>&lt;p&gt;Returns the serialized crypto segment of the token.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="216"/>
          <tag name="return" description="" type="string" line="216">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" line="240" namespace="default">
      <name>MalformedWebTokenException</name>
      <extends>\Exception</extends>
      <full_name>\MalformedWebTokenException</full_name>
      <docblock>
        <description>Malformed webtoken</description>
        <long-description>&lt;p&gt;The webtoken is not well-formed&lt;/p&gt;
</long-description>
        <tag name="package" description="BrowserID" line="230"/>
        <tag name="subpackage" description="WebToken" line="230"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="230"/>
        <tag name="version" description="1.0.0" line="230"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="247">
        <name>__construct</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="access" description="public" line="242"/>
          <tag name="param" description="The error message" type="string" variable="$message" line="242">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="An error code" type="int" variable="$code" line="242">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="247">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="247">
          <name>$code</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\browserid.php" hash="afed9a7a06ccb77d49843f0cc92f1a3e">
    <docblock>
      <description>Verifier</description>
      <long-description>&lt;p&gt;Verifies an assertion received via HTTP POST and returns a JSON object.&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <include type="Require Once" line="34">
      <name>BrowserID/configuration.php</name>
    </include>
    <include type="Require Once" line="44">
      <name>lib/BrowserID/verifier.php</name>
    </include>
    <include type="Require Once" line="49">
      <name>lib/BrowserID/cert_assertion.php</name>
    </include>
    <include type="Require Once" line="54">
      <name>lib/BrowserID/utils.php</name>
    </include>
    <include type="Require Once" line="59">
      <name>lib/BrowserID/secrets.php</name>
    </include>
    <constant namespace="default" line="39">
      <name>BROWSERID_BASE_PATH</name>
      <value>Configuration::getInstance()-&gt;get("base_path")</value>
    </constant>
  </file>
  <file path="lib\Crypt\AES.php" hash="abfc02125524992cadbe9a1008791b80">
    <docblock>
      <description>Pure-PHP implementation of AES.</description>
      <long-description>&lt;p&gt;Uses mcrypt, if available, and an internal implementation, otherwise.&lt;/p&gt;

&lt;p&gt;PHP versions 4 and 5&lt;/p&gt;

&lt;p&gt;If {@link Crypt_AES::setKeyLength() setKeyLength()} isn't called, it'll be calculated from
{@link Crypt_AES::setKey() setKey()}.  ie. if the key is 128-bits, the key length will be 128-bits.  If it's 136-bits
it'll be null-padded to 160-bits and 160 bits will be the key length until {@link Crypt_Rijndael::setKey() setKey()}
is called, again, at which point, it'll be recalculated.&lt;/p&gt;

&lt;p&gt;Since Crypt_AES extends Crypt_Rijndael, some functions are available to be called that, in the context of AES, don't
make a whole lot of sense.  {@link Crypt_AES::setBlockLength() setBlockLength()}, for instance.  Calling that function,
however possible, won't do anything (AES has a fixed block length whereas Rijndael has a variable one).&lt;/p&gt;

&lt;p&gt;Here's a short example of how to use this library:
&lt;code&gt;
&lt;?php
   include('Crypt/AES.php');

   $aes = new Crypt_AES();

   $aes-&gt;setKey('abcdefghijklmnop');

   $size = 10 * 1024;
   $plaintext = '';
   for ($i = 0; $i &lt; $size; $i++) {
       $plaintext.= 'a';
   }

   echo $aes-&gt;decrypt($aes-&gt;encrypt($plaintext));
?&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Crypt"/>
      <tag name="subpackage" description="Crypt_AES"/>
      <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;"/>
      <tag name="copyright" description="MMVIII Jim Wigginton"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
      <tag name="version" description="$Id: AES.php,v 1.7 2010/02/09 06:10:25 terrafrost Exp $"/>
      <tag name="link" description="http://phpseclib.sourceforge.net" link="http://phpseclib.sourceforge.net"/>
    </docblock>
    <include type="Require Once" line="69">
      <name>Rijndael.php</name>
    </include>
    <constant namespace="default" line="83">
      <name>CRYPT_AES_MODE_CTR</name>
      <value>-1</value>
      <docblock>
        <description>Encrypt / decrypt using the Counter mode.</description>
        <long-description>&lt;p&gt;Set to -1 since that's what Crypt/Random.php uses to index the CTR mode.&lt;/p&gt;
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Counter_.28CTR.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Counter_.28CTR.29" line="76"/>
      </docblock>
    </constant>
    <constant namespace="default" line="89">
      <name>CRYPT_AES_MODE_ECB</name>
      <value>1</value>
      <docblock>
        <description>Encrypt / decrypt using the Electronic Code Book mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29" line="84"/>
      </docblock>
    </constant>
    <constant namespace="default" line="95">
      <name>CRYPT_AES_MODE_CBC</name>
      <value>2</value>
      <docblock>
        <description>Encrypt / decrypt using the Code Book Chaining mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher-block_chaining_.28CBC.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher-block_chaining_.28CBC.29" line="90"/>
      </docblock>
    </constant>
    <constant namespace="default" line="101">
      <name>CRYPT_AES_MODE_CFB</name>
      <value>3</value>
      <docblock>
        <description>Encrypt / decrypt using the Cipher Feedback mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher_feedback_.28CFB.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher_feedback_.28CFB.29" line="96"/>
      </docblock>
    </constant>
    <constant namespace="default" line="107">
      <name>CRYPT_AES_MODE_OFB</name>
      <value>4</value>
      <docblock>
        <description>Encrypt / decrypt using the Cipher Feedback mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Output_feedback_.28OFB.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Output_feedback_.28OFB.29" line="102"/>
      </docblock>
    </constant>
    <constant namespace="default" line="117">
      <name>CRYPT_AES_MODE_INTERNAL</name>
      <value>1</value>
      <docblock>
        <description>Toggles the internal implementation</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="121">
      <name>CRYPT_AES_MODE_MCRYPT</name>
      <value>2</value>
      <docblock>
        <description>Toggles the mcrypt implementation</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <class final="false" abstract="false" line="133" namespace="default">
      <name>Crypt_AES</name>
      <extends>\Crypt_Rijndael</extends>
      <full_name>\Crypt_AES</full_name>
      <docblock>
        <description>Pure-PHP implementation of AES.</description>
        <long-description>
</long-description>
        <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;" line="124"/>
        <tag name="version" description="0.1.0" line="124"/>
        <tag name="access" description="public" line="124"/>
        <tag name="package" description="Crypt" line="124"/>
        <tag name="subpackage" description="Crypt_AES" line="124"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="144">
        <name>$enmcrypt</name>
        <default/>
        <docblock>
          <description>mcrypt resource for encryption</description>
          <long-description>&lt;p&gt;The mcrypt resource can be recreated every time something needs to be created or it can be created just once.
Since mcrypt operates in continuous mode, by default, it'll need to be recreated when in non-continuous mode.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_AES::encrypt()" line="134"/>
          <tag name="var" description="" type="String" line="134">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="134"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="156">
        <name>$demcrypt</name>
        <default/>
        <docblock>
          <description>mcrypt resource for decryption</description>
          <long-description>&lt;p&gt;The mcrypt resource can be recreated every time something needs to be created or it can be created just once.
Since mcrypt operates in continuous mode, by default, it'll need to be recreated when in non-continuous mode.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_AES::decrypt()" line="146"/>
          <tag name="var" description="" type="String" line="146">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="146"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="166">
        <name>$ecb</name>
        <default/>
        <docblock>
          <description>mcrypt resource for CFB mode</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_AES::encrypt()" line="158"/>
          <tag name="see" description="Crypt_AES::decrypt()" line="158"/>
          <tag name="var" description="" type="String" line="158">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="158"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="178">
        <name>Crypt_AES</name>
        <docblock>
          <description>Default Constructor.</description>
          <long-description>&lt;p&gt;Determines whether or not the mcrypt extension should be used.  $mode should only, at present, be
CRYPT_AES_MODE_ECB or CRYPT_AES_MODE_CBC.  If not explictly set, CRYPT_AES_MODE_CBC will be used.&lt;/p&gt;
</long-description>
          <tag name="param" description="Integer $mode" type="\optional" variable="$mode" line="168">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="\Crypt_AES" line="168">
            <type by_reference="false">\Crypt_AES</type>
          </tag>
          <tag name="access" description="public" line="168"/>
        </docblock>
        <argument line="178">
          <name>$mode</name>
          <default>CRYPT_AES_MODE_CBC</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="257">
        <name>setBlockLength</name>
        <docblock>
          <description>Dummy function</description>
          <long-description>&lt;p&gt;Since Crypt_AES extends Crypt_Rijndael, this function is, technically, available, but it doesn't do anything.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="249"/>
          <tag name="param" description="" type="Integer" variable="$length" line="249">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="257">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="279">
        <name>encrypt</name>
        <docblock>
          <description>Encrypts a message.</description>
          <long-description>&lt;p&gt;$plaintext will be padded with up to 16 additional bytes.  Other AES implementations may or may not pad in the
same manner.  Other common approaches to padding and the reasons why it's necessary are discussed in the following
URL:&lt;/p&gt;

&lt;p&gt;{@link http://www.di-mgt.com.au/cryptopad.html http://www.di-mgt.com.au/cryptopad.html}&lt;/p&gt;

&lt;p&gt;An alternative to padding is to, separately, send the length of the file.  This is what SSH, in fact, does.
strlen($plaintext) will still need to be a multiple of 16, however, arbitrary values can be added to make it that
length.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_AES::decrypt()" line="262"/>
          <tag name="access" description="public" line="262"/>
          <tag name="param" description="" type="String" variable="$plaintext" line="262">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="279">
          <name>$plaintext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="357">
        <name>decrypt</name>
        <docblock>
          <description>Decrypts a message.</description>
          <long-description>&lt;p&gt;If strlen($ciphertext) is not a multiple of 16, null bytes will be added to the end of the string until it is.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_AES::encrypt()" line="348"/>
          <tag name="access" description="public" line="348"/>
          <tag name="param" description="" type="String" variable="$ciphertext" line="348">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="357">
          <name>$ciphertext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="433">
        <name>_mcryptSetup</name>
        <docblock>
          <description>Setup mcrypt</description>
          <long-description>&lt;p&gt;Validates all the variables.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="426"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="491">
        <name>_encryptBlock</name>
        <docblock>
          <description>Encrypts a block</description>
          <long-description>&lt;p&gt;Optimized over Crypt_Rijndael's implementation by means of loop unrolling.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_Rijndael::_encryptBlock()" line="481"/>
          <tag name="access" description="private" line="481"/>
          <tag name="param" description="" type="String" variable="$in" line="481">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="481">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="491">
          <name>$in</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="552">
        <name>_decryptBlock</name>
        <docblock>
          <description>Decrypts a block</description>
          <long-description>&lt;p&gt;Optimized over Crypt_Rijndael's implementation by means of loop unrolling.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_Rijndael::_decryptBlock()" line="542"/>
          <tag name="access" description="private" line="542"/>
          <tag name="param" description="" type="String" variable="$in" line="542">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="542">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="552">
          <name>$in</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\Crypt\DES.php" hash="55cd8661a163ba6e21969f17c25bc27f">
    <docblock>
      <description>Pure-PHP implementation of DES.</description>
      <long-description>&lt;p&gt;Uses mcrypt, if available, and an internal implementation, otherwise.&lt;/p&gt;

&lt;p&gt;PHP versions 4 and 5&lt;/p&gt;

&lt;p&gt;Useful resources are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{@link http://en.wikipedia.org/wiki/DES_supplementary_material Wikipedia: DES supplementary material}&lt;/li&gt;
&lt;li&gt;{@link http://www.itl.nist.gov/fipspubs/fip46-2.htm FIPS 46-2 - (DES), Data Encryption Standard}&lt;/li&gt;
&lt;li&gt;{@link http://www.cs.eku.edu/faculty/styer/460/Encrypt/JS-DES.html JavaScript DES Example}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's a short example of how to use this library:
&lt;code&gt;
&lt;?php
   include('Crypt/DES.php');

   $des = new Crypt_DES();

   $des-&gt;setKey('abcdefgh');

   $size = 10 * 1024;
   $plaintext = '';
   for ($i = 0; $i &lt; $size; $i++) {
       $plaintext.= 'a';
   }

   echo $des-&gt;decrypt($des-&gt;encrypt($plaintext));
?&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Crypt"/>
      <tag name="subpackage" description="Crypt_DES"/>
      <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;"/>
      <tag name="copyright" description="MMVII Jim Wigginton"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
      <tag name="version" description="$Id: DES.php,v 1.12 2010/02/09 06:10:26 terrafrost Exp $"/>
      <tag name="link" description="http://phpseclib.sourceforge.net" link="http://phpseclib.sourceforge.net"/>
    </docblock>
    <constant namespace="default" line="71">
      <name>CRYPT_DES_ENCRYPT</name>
      <value>0</value>
      <docblock>
        <description>Contains array_reverse($keys[CRYPT_DES_DECRYPT])</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="75">
      <name>CRYPT_DES_DECRYPT</name>
      <value>1</value>
      <docblock>
        <description>Contains array_reverse($keys[CRYPT_DES_ENCRYPT])</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="90">
      <name>CRYPT_DES_MODE_CTR</name>
      <value>-1</value>
      <docblock>
        <description>Encrypt / decrypt using the Counter mode.</description>
        <long-description>&lt;p&gt;Set to -1 since that's what Crypt/Random.php uses to index the CTR mode.&lt;/p&gt;
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Counter_.28CTR.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Counter_.28CTR.29" line="83"/>
      </docblock>
    </constant>
    <constant namespace="default" line="96">
      <name>CRYPT_DES_MODE_ECB</name>
      <value>1</value>
      <docblock>
        <description>Encrypt / decrypt using the Electronic Code Book mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29" line="91"/>
      </docblock>
    </constant>
    <constant namespace="default" line="102">
      <name>CRYPT_DES_MODE_CBC</name>
      <value>2</value>
      <docblock>
        <description>Encrypt / decrypt using the Code Book Chaining mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher-block_chaining_.28CBC.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher-block_chaining_.28CBC.29" line="97"/>
      </docblock>
    </constant>
    <constant namespace="default" line="108">
      <name>CRYPT_DES_MODE_CFB</name>
      <value>3</value>
      <docblock>
        <description>Encrypt / decrypt using the Cipher Feedback mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher_feedback_.28CFB.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher_feedback_.28CFB.29" line="103"/>
      </docblock>
    </constant>
    <constant namespace="default" line="114">
      <name>CRYPT_DES_MODE_OFB</name>
      <value>4</value>
      <docblock>
        <description>Encrypt / decrypt using the Cipher Feedback mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Output_feedback_.28OFB.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Output_feedback_.28OFB.29" line="109"/>
      </docblock>
    </constant>
    <constant namespace="default" line="124">
      <name>CRYPT_DES_MODE_INTERNAL</name>
      <value>1</value>
      <docblock>
        <description>Toggles the internal implementation</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="128">
      <name>CRYPT_DES_MODE_MCRYPT</name>
      <value>2</value>
      <docblock>
        <description>Toggles the mcrypt implementation</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <class final="false" abstract="false" line="140" namespace="default">
      <name>Crypt_DES</name>
      <extends/>
      <full_name>\Crypt_DES</full_name>
      <docblock>
        <description>Pure-PHP implementation of DES.</description>
        <long-description>
</long-description>
        <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;" line="131"/>
        <tag name="version" description="0.1.0" line="131"/>
        <tag name="access" description="public" line="131"/>
        <tag name="package" description="Crypt" line="131"/>
        <tag name="subpackage" description="Crypt_DES" line="131"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="148">
        <name>$keys</name>
        <default>\0\0\0\0\0\0\0\0</default>
        <docblock>
          <description>The Key Schedule</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::setKey()" line="141"/>
          <tag name="var" description="" type="Array" line="141">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="141"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="157">
        <name>$mode</name>
        <default/>
        <docblock>
          <description>The Encryption Mode</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::Crypt_DES()" line="150"/>
          <tag name="var" description="" type="Integer" line="150">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="150"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="166">
        <name>$continuousBuffer</name>
        <default>false</default>
        <docblock>
          <description>Continuous Buffer status</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::enableContinuousBuffer()" line="159"/>
          <tag name="var" description="" type="Boolean" line="159">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="159"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="175">
        <name>$padding</name>
        <default>true</default>
        <docblock>
          <description>Padding status</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::enablePadding()" line="168"/>
          <tag name="var" description="" type="Boolean" line="168">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="168"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="184">
        <name>$iv</name>
        <default>\0\0\0\0\0\0\0\0</default>
        <docblock>
          <description>The Initialization Vector</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::setIV()" line="177"/>
          <tag name="var" description="" type="String" line="177">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="177"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="193">
        <name>$encryptIV</name>
        <default>\0\0\0\0\0\0\0\0</default>
        <docblock>
          <description>A "sliding" Initialization Vector</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::enableContinuousBuffer()" line="186"/>
          <tag name="var" description="" type="String" line="186">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="186"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="202">
        <name>$decryptIV</name>
        <default>\0\0\0\0\0\0\0\0</default>
        <docblock>
          <description>A "sliding" Initialization Vector</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::enableContinuousBuffer()" line="195"/>
          <tag name="var" description="" type="String" line="195">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="195"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="214">
        <name>$enmcrypt</name>
        <default/>
        <docblock>
          <description>mcrypt resource for encryption</description>
          <long-description>&lt;p&gt;The mcrypt resource can be recreated every time something needs to be created or it can be created just once.
Since mcrypt operates in continuous mode, by default, it'll need to be recreated when in non-continuous mode.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_DES::encrypt()" line="204"/>
          <tag name="var" description="" type="String" line="204">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="204"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="226">
        <name>$demcrypt</name>
        <default/>
        <docblock>
          <description>mcrypt resource for decryption</description>
          <long-description>&lt;p&gt;The mcrypt resource can be recreated every time something needs to be created or it can be created just once.
Since mcrypt operates in continuous mode, by default, it'll need to be recreated when in non-continuous mode.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_DES::decrypt()" line="216"/>
          <tag name="var" description="" type="String" line="216">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="216"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="236">
        <name>$enchanged</name>
        <default>true</default>
        <docblock>
          <description>Does the enmcrypt resource need to be (re)initialized?</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::setKey()" line="228"/>
          <tag name="see" description="Crypt_DES::setIV()" line="228"/>
          <tag name="var" description="" type="Boolean" line="228">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="228"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="246">
        <name>$dechanged</name>
        <default>true</default>
        <docblock>
          <description>Does the demcrypt resource need to be (re)initialized?</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::setKey()" line="238"/>
          <tag name="see" description="Crypt_DES::setIV()" line="238"/>
          <tag name="var" description="" type="Boolean" line="238">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="238"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="255">
        <name>$paddable</name>
        <default>false</default>
        <docblock>
          <description>Is the mode one that is paddable?</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::Crypt_DES()" line="248"/>
          <tag name="var" description="" type="Boolean" line="248">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="248"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="264">
        <name>$enbuffer</name>
        <default/>
        <docblock>
          <description>Encryption buffer for CTR, OFB and CFB modes</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::encrypt()" line="257"/>
          <tag name="var" description="" type="String" line="257">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="257"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="273">
        <name>$debuffer</name>
        <default/>
        <docblock>
          <description>Decryption buffer for CTR, OFB and CFB modes</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::decrypt()" line="266"/>
          <tag name="var" description="" type="String" line="266">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="266"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="283">
        <name>$ecb</name>
        <default/>
        <docblock>
          <description>mcrypt resource for CFB mode</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::encrypt()" line="275"/>
          <tag name="see" description="Crypt_DES::decrypt()" line="275"/>
          <tag name="var" description="" type="String" line="275">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="275"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="295">
        <name>Crypt_DES</name>
        <docblock>
          <description>Default Constructor.</description>
          <long-description>&lt;p&gt;Determines whether or not the mcrypt extension should be used.  $mode should only, at present, be
CRYPT_DES_MODE_ECB or CRYPT_DES_MODE_CBC.  If not explictly set, CRYPT_DES_MODE_CBC will be used.&lt;/p&gt;
</long-description>
          <tag name="param" description="Integer $mode" type="\optional" variable="$mode" line="285">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="\Crypt_DES" line="285">
            <type by_reference="false">\Crypt_DES</type>
          </tag>
          <tag name="access" description="public" line="285"/>
        </docblock>
        <argument line="295">
          <name>$mode</name>
          <default>CRYPT_MODE_DES_CBC</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="367">
        <name>setKey</name>
        <docblock>
          <description>Sets the key.</description>
          <long-description>&lt;p&gt;Keys can be of any length.  DES, itself, uses 64-bit keys (eg. strlen($key) == 8), however, we
only use the first eight, if $key has more then eight characters in it, and pad $key with the
null byte if it is less then eight characters long.&lt;/p&gt;

&lt;p&gt;DES also requires that every eighth bit be a parity bit, however, we'll ignore that.&lt;/p&gt;

&lt;p&gt;If the key is not explicitly set, it'll be assumed to be all zero's.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="353"/>
          <tag name="param" description="" type="String" variable="$key" line="353">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="367">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="382">
        <name>setIV</name>
        <docblock>
          <description>Sets the initialization vector. (optional)</description>
          <long-description>&lt;p&gt;SetIV is not required when CRYPT_DES_MODE_ECB is being used.  If not explictly set, it'll be assumed
to be all zero's.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="373"/>
          <tag name="param" description="" type="String" variable="$iv" line="373">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="382">
          <name>$iv</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="400">
        <name>_generate_xor</name>
        <docblock>
          <description>Generate CTR XOR encryption key</description>
          <long-description>&lt;p&gt;Encrypt the output of this and XOR it against the ciphertext / plaintext to get the
plaintext / ciphertext in CTR mode.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_DES::decrypt()" line="388"/>
          <tag name="see" description="Crypt_DES::encrypt()" line="388"/>
          <tag name="access" description="public" line="388"/>
          <tag name="param" description="" type="Integer" variable="$length" line="388">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="param" description="" type="String" variable="$iv" line="388">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="400">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
        <argument line="400">
          <name>$iv</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="443">
        <name>encrypt</name>
        <docblock>
          <description>Encrypts a message.</description>
          <long-description>&lt;p&gt;$plaintext will be padded with up to 8 additional bytes.  Other DES implementations may or may not pad in the
same manner.  Other common approaches to padding and the reasons why it's necessary are discussed in the following
URL:&lt;/p&gt;

&lt;p&gt;{@link http://www.di-mgt.com.au/cryptopad.html http://www.di-mgt.com.au/cryptopad.html}&lt;/p&gt;

&lt;p&gt;An alternative to padding is to, separately, send the length of the file.  This is what SSH, in fact, does.
strlen($plaintext) will still need to be a multiple of 8, however, arbitrary values can be added to make it that
length.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_DES::decrypt()" line="426"/>
          <tag name="access" description="public" line="426"/>
          <tag name="param" description="" type="String" variable="$plaintext" line="426">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="443">
          <name>$plaintext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="616">
        <name>decrypt</name>
        <docblock>
          <description>Decrypts a message.</description>
          <long-description>&lt;p&gt;If strlen($ciphertext) is not a multiple of 8, null bytes will be added to the end of the string until it is.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_DES::encrypt()" line="607"/>
          <tag name="access" description="public" line="607"/>
          <tag name="param" description="" type="String" variable="$ciphertext" line="607">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="616">
          <name>$ciphertext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="821">
        <name>enableContinuousBuffer</name>
        <docblock>
          <description>Treat consecutive "packets" as if they are a continuous buffer.</description>
          <long-description>&lt;p&gt;Say you have a 16-byte plaintext $plaintext.  Using the default behavior, the two following code snippets
will yield different outputs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
   echo $des-&gt;encrypt(substr($plaintext, 0, 8));
   echo $des-&gt;encrypt(substr($plaintext, 8, 8));
&lt;/code&gt;
&lt;code&gt;
   echo $des-&gt;encrypt($plaintext);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The solution is to enable the continuous buffer.  Although this will resolve the above discrepancy, it creates
another, as demonstrated with the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
   $des-&gt;encrypt(substr($plaintext, 0, 8));
   echo $des-&gt;decrypt($des-&gt;encrypt(substr($plaintext, 8, 8)));
&lt;/code&gt;
&lt;code&gt;
   echo $des-&gt;decrypt($des-&gt;encrypt(substr($plaintext, 8, 8)));
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With the continuous buffer disabled, these would yield the same output.  With it enabled, they yield different
outputs.  The reason is due to the fact that the initialization vector's change after every encryption /
decryption round when the continuous buffer is enabled.  When it's disabled, they remain constant.&lt;/p&gt;

&lt;p&gt;Put another way, when the continuous buffer is enabled, the state of the Crypt_DES() object changes after each
encryption / decryption round, whereas otherwise, it'd remain constant.  For this reason, it's recommended that
continuous buffers not be used.  They do offer better security and are, in fact, sometimes required (SSH uses them),
however, they are also less intuitive and more likely to cause you problems.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_DES::disableContinuousBuffer()" line="784"/>
          <tag name="access" description="public" line="784"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="834">
        <name>disableContinuousBuffer</name>
        <docblock>
          <description>Treat consecutive packets as if they are a discontinuous buffer.</description>
          <long-description>&lt;p&gt;The default behavior.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_DES::enableContinuousBuffer()" line="826"/>
          <tag name="access" description="public" line="826"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="855">
        <name>enablePadding</name>
        <docblock>
          <description>Pad "packets".</description>
          <long-description>&lt;p&gt;DES works by encrypting eight bytes at a time.  If you ever need to encrypt or decrypt something that's not
a multiple of eight, it becomes necessary to pad the input so that it's length is a multiple of eight.&lt;/p&gt;

&lt;p&gt;Padding is enabled by default.  Sometimes, however, it is undesirable to pad strings.  Such is the case in SSH1,
where "packets" are padded with random bytes before being encrypted.  Unpad these packets and you risk stripping
away characters that shouldn't be stripped away. (SSH knows how many bytes are added because the length is
transmitted separately)&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_DES::disablePadding()" line="841"/>
          <tag name="access" description="public" line="841"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="866">
        <name>disablePadding</name>
        <docblock>
          <description>Do not pad packets.</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_DES::enablePadding()" line="860"/>
          <tag name="access" description="public" line="860"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="883">
        <name>_pad</name>
        <docblock>
          <description>Pads a string</description>
          <long-description>&lt;p&gt;Pads a string using the RSA PKCS padding standards so that its length is a multiple of the blocksize (8).
8 - (strlen($text) &amp;amp; 7) bytes are added, each of which is equal to chr(8 - (strlen($text) &amp;amp; 7)&lt;/p&gt;

&lt;p&gt;If padding is disabled and $text is not a multiple of the blocksize, the string will be padded regardless
and padding will, hence forth, be enabled.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_DES::_unpad()" line="871"/>
          <tag name="access" description="private" line="871"/>
        </docblock>
        <argument line="883">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="909">
        <name>_unpad</name>
        <docblock>
          <description>Unpads a string</description>
          <long-description>&lt;p&gt;If padding is enabled and the reported padding length is invalid the encryption key will be assumed to be wrong
and false will be returned.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_DES::_pad()" line="900"/>
          <tag name="access" description="private" line="900"/>
        </docblock>
        <argument line="909">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="936">
        <name>_processBlock</name>
        <docblock>
          <description>Encrypts or decrypts a 64-bit block</description>
          <long-description>&lt;p&gt;$mode should be either CRYPT_DES_ENCRYPT or CRYPT_DES_DECRYPT.  See
{@link http://en.wikipedia.org/wiki/Image:Feistel.png Feistel.png} to get a general
idea of what this function does.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="924"/>
          <tag name="param" description="" type="String" variable="$block" line="924">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$mode" line="924">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="String" line="924">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="936">
          <name>$block</name>
          <default/>
          <type/>
        </argument>
        <argument line="936">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1128">
        <name>_prepareKey</name>
        <docblock>
          <description>Creates the key schedule.</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="1121"/>
          <tag name="param" description="" type="String" variable="$key" line="1121">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="Array" line="1121">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="1128">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1237">
        <name>_string_shift</name>
        <docblock>
          <description>String Shift</description>
          <long-description>&lt;p&gt;Inspired by array_shift&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="String" variable="$string" line="1227">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="Integer $index" type="\optional" variable="$index" line="1227">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="String" line="1227">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="1227"/>
        </docblock>
        <argument line="1237">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="1237">
          <name>$index</name>
          <default>1</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\Crypt\DSA.php" hash="46b9103bd0bf52f1407afa9392c39677">
    <docblock>
      <description>Crypt_DSA</description>
      <long-description>&lt;p&gt;Crypt_DSA - DSA signature verification and signing library&lt;/p&gt;

&lt;p&gt;LICENSE:&lt;/p&gt;

&lt;p&gt;Copyright (c) 2004-2006, TSURUOKA Naoya
All rights reserved.&lt;/p&gt;

&lt;p&gt;Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.&lt;/li&gt;
&lt;li&gt;Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided
with the distribution.&lt;/li&gt;
&lt;li&gt;Neither the name of the author nor the names of its contributors
may be used to endorse or promote products derived from this
software without specific prior written permission.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Crypt"/>
      <tag name="subpackage" description="Crypt_DSA"/>
      <tag name="author" description="TSURUOKA Naoya &amp;lt;tsuruoka@labs.cybozu.co.jp&amp;gt;"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="2006 TSURUOKA Naoya"/>
      <tag name="license" description="http://www.opensource.org/licenses/bsd-license.php The BSD License"/>
      <tag name="see" description="http://search.cpan.org/dist/Crypt-DSA/lib/Crypt/DSA.pm"/>
      <tag name="version" description="0.0.4"/>
    </docblock>
    <include type="Require Once" line="51">
      <name>PEAR/Exception.php</name>
    </include>
    <include type="Require Once" line="56">
      <name>lib/Math/BigInteger.php</name>
    </include>
    <include type="Require Once" line="61">
      <name>lib/Crypt/Random.php</name>
    </include>
    <include type="Require Once" line="66">
      <name>lib/Crypt/Hash.php</name>
    </include>
    <class final="false" abstract="false" line="79" namespace="default">
      <name>Crypt_DSA_Exception</name>
      <extends>\PEAR_Exception</extends>
      <full_name>\Crypt_DSA_Exception</full_name>
      <docblock>
        <description>Crypt_DSA_Exception</description>
        <long-description>&lt;p&gt;This class is used in all place in the package where Exceptions
are raised.&lt;/p&gt;
</long-description>
        <tag name="package" description="Crypt" line="68"/>
        <tag name="subpackage" description="Crypt_DSA" line="68"/>
        <tag name="author" description="Shin OHNO &amp;lt;ganchiku@gmail.com&amp;gt;" line="68"/>
        <tag name="author" description="TSURUOKA Naoya &amp;lt;tsuruoka@labs.cybozu.co.jp&amp;gt;" line="68"/>
      </docblock>
      
    </class>
    <class final="false" abstract="false" line="111" namespace="default">
      <name>Crypt_DSA</name>
      <extends/>
      <full_name>\Crypt_DSA</full_name>
      <docblock>
        <description>Crypt_DSA</description>
        <long-description>
</long-description>
        <tag name="package" description="Crypt" line="102"/>
        <tag name="subpackage" description="Crypt_DSA" line="102"/>
        <tag name="author" description="TSURUOKA Naoya &amp;lt;tsuruoka@labs.cybozu.co.jp&amp;gt;" line="102"/>
        <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;" line="102"/>
        <tag name="version" description="0.0.4" line="102"/>
      </docblock>
      <constant namespace="default" line="116">
        <name>VERSION</name>
        <value>0.0.4</value>
        <docblock>
          <description>Version of this package</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="true" visibility="private" line="127">
        <name>_random</name>
        <docblock>
          <description>Generates a random string x bytes long</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="118"/>
          <tag name="static" description="" line="118"/>
          <tag name="param" description="" type="Integer" variable="$bytes" line="118">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="param" description="Integer $nonzero" type="\optional" variable="$nonzero" line="118">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="String" line="118">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$bytes</name>
          <default/>
          <type/>
        </argument>
        <argument line="127">
          <name>$nonzero</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" line="154">
        <name>_os2ip</name>
        <docblock>
          <description>Octet-String-to-Integer primitive</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-4.2 RFC3447#section-4.2}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="144"/>
          <tag name="static" description="" line="144"/>
          <tag name="param" description="" type="String" variable="$x" line="144">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="144">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="170">
        <name>randomNumberMod</name>
        <docblock>
          <description>Generate modulated number</description>
          <long-description>&lt;p&gt;Generates a number that lies between 0 and q-1&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="159"/>
          <tag name="static" description="" line="159"/>
          <tag name="staticvar" description="Math_BigInteger $one Constant one" line="159"/>
          <tag name="param" description="Modulation" type="\Math_BigInteger" variable="$q" line="159">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="Generated number" type="\Math_BigInteger" line="159">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="170">
          <name>$q</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="193">
        <name>generate</name>
        <docblock>
          <description>DSA keypair creation</description>
          <long-description>
</long-description>
          <tag name="param" description="p" type="\Math_BigInteger" variable="$p" line="184">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="q" type="\Math_BigInteger" variable="$q" line="184">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="g" type="\Math_BigInteger" variable="$g" line="184">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="x = private key, y = public key" type="array" line="184">
            <type by_reference="false">array</type>
          </tag>
          <tag name="throws" description="" type="\Crypt_DSA_Exception" line="184">
            <type by_reference="false">\Crypt_DSA_Exception</type>
          </tag>
        </docblock>
        <argument line="193">
          <name>$p</name>
          <default/>
          <type/>
        </argument>
        <argument line="193">
          <name>$q</name>
          <default/>
          <type/>
        </argument>
        <argument line="193">
          <name>$g</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="218">
        <name>sign</name>
        <docblock>
          <description>DSA sign</description>
          <long-description>
</long-description>
          <tag name="param" description="message" type="string" variable="$message" line="206">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="hash algorithm" type="string" variable="$hash_alg" line="206">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="p" type="\Math_BigInteger" variable="$p" line="206">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="q" type="\Math_BigInteger" variable="$q" line="206">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="g" type="\Math_BigInteger" variable="$g" line="206">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="private key" type="\Math_BigInteger" variable="$x" line="206">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="r,s key" type="array" line="206">
            <type by_reference="false">array</type>
          </tag>
          <tag name="throws" description="" type="\Crypt_DSA_Exception" line="206">
            <type by_reference="false">\Crypt_DSA_Exception</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$hash_alg</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$p</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$q</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$g</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="283">
        <name>verify</name>
        <docblock>
          <description>DSA verify</description>
          <long-description>
</long-description>
          <tag name="param" description="message" type="string" variable="$message" line="269">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="hash algorithm" type="string" variable="$hash_alg" line="269">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="r" type="\Math_BigInteger" variable="$r" line="269">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="s" type="\Math_BigInteger" variable="$s" line="269">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="p" type="\Math_BigInteger" variable="$p" line="269">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="q" type="\Math_BigInteger" variable="$q" line="269">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="g" type="\Math_BigInteger" variable="$g" line="269">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="public key" type="\Math_BigInteger" variable="$y" line="269">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="bool" line="269">
            <type by_reference="false">bool</type>
          </tag>
          <tag name="throws" description="" type="\Crypt_DSA_Exception" line="269">
            <type by_reference="false">\Crypt_DSA_Exception</type>
          </tag>
        </docblock>
        <argument line="283">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="283">
          <name>$hash_alg</name>
          <default/>
          <type/>
        </argument>
        <argument line="283">
          <name>$r</name>
          <default/>
          <type/>
        </argument>
        <argument line="283">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
        <argument line="283">
          <name>$p</name>
          <default/>
          <type/>
        </argument>
        <argument line="283">
          <name>$q</name>
          <default/>
          <type/>
        </argument>
        <argument line="283">
          <name>$g</name>
          <default/>
          <type/>
        </argument>
        <argument line="283">
          <name>$y</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\Crypt\Hash.php" hash="b047b85702ec2860a80152d3c934c54f">
    <docblock>
      <description>Pure-PHP implementations of keyed-hash message authentication codes (HMACs) and various cryptographic hashing functions.</description>
      <long-description>&lt;p&gt;Uses hash() or mhash() if available and an internal implementation, otherwise.  Currently supports the following:&lt;/p&gt;

&lt;p&gt;md2, md5, md5-96, sha1, sha1-96, sha256, sha384, and sha512&lt;/p&gt;

&lt;p&gt;If {@link Crypt_Hash::setKey() setKey()} is called, {@link Crypt_Hash::hash() hash()} will return the HMAC as opposed to
the hash.  If no valid algorithm is provided, sha1 will be used.&lt;/p&gt;

&lt;p&gt;PHP versions 4 and 5&lt;/p&gt;

&lt;p&gt;{@internal The variable names are the same as those in
{@link http://tools.ietf.org/html/rfc2104#section-2 RFC2104}.}}&lt;/p&gt;

&lt;p&gt;Here's a short example of how to use this library:
&lt;code&gt;
&lt;?php
   include('Crypt/Hash.php');

   $hash = new Crypt_Hash('sha1');

   $hash-&gt;setKey('abcdefg');

   echo base64_encode($hash-&gt;hash('abcdefg'));
?&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Crypt"/>
      <tag name="subpackage" description="Crypt_Hash"/>
      <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;"/>
      <tag name="copyright" description="MMVII Jim Wigginton"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
      <tag name="version" description="$Id: Hash.php,v 1.6 2009/11/23 23:37:07 terrafrost Exp $"/>
      <tag name="link" description="http://phpseclib.sourceforge.net" link="http://phpseclib.sourceforge.net"/>
    </docblock>
    <constant namespace="default" line="66">
      <name>CRYPT_HASH_MODE_INTERNAL</name>
      <value>1</value>
      <docblock>
        <description>Toggles the internal implementation</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="70">
      <name>CRYPT_HASH_MODE_MHASH</name>
      <value>2</value>
      <docblock>
        <description>Toggles the mhash() implementation, which has been deprecated on PHP 5.3.0+.</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="74">
      <name>CRYPT_HASH_MODE_HASH</name>
      <value>3</value>
      <docblock>
        <description>Toggles the hash() implementation, which works on PHP 5.1.2+.</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <class final="false" abstract="false" line="86" namespace="default">
      <name>Crypt_Hash</name>
      <extends/>
      <full_name>\Crypt_Hash</full_name>
      <docblock>
        <description>Pure-PHP implementations of keyed-hash message authentication codes (HMACs) and various cryptographic hashing functions.</description>
        <long-description>
</long-description>
        <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;" line="77"/>
        <tag name="version" description="0.1.0" line="77"/>
        <tag name="access" description="public" line="77"/>
        <tag name="package" description="Crypt" line="77"/>
        <tag name="subpackage" description="Crypt_Hash" line="77"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="94">
        <name>$b</name>
        <default/>
        <docblock>
          <description>Byte-length of compression blocks / key (Internal HMAC)</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Hash::setAlgorithm()" line="87"/>
          <tag name="var" description="" type="Integer" line="87">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="87"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="103">
        <name>$l</name>
        <default>false</default>
        <docblock>
          <description>Byte-length of hash output (Internal HMAC)</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Hash::setHash()" line="96"/>
          <tag name="var" description="" type="Integer" line="96">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="96"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="112">
        <name>$hash</name>
        <default/>
        <docblock>
          <description>Hash Algorithm</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Hash::setHash()" line="105"/>
          <tag name="var" description="" type="String" line="105">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="105"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="121">
        <name>$key</name>
        <default/>
        <docblock>
          <description>Key</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Hash::setKey()" line="114"/>
          <tag name="var" description="" type="String" line="114">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="114"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="130">
        <name>$opad</name>
        <default/>
        <docblock>
          <description>Outer XOR (Internal HMAC)</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Hash::setKey()" line="123"/>
          <tag name="var" description="" type="String" line="123">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="123"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="139">
        <name>$ipad</name>
        <default/>
        <docblock>
          <description>Inner XOR (Internal HMAC)</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Hash::setKey()" line="132"/>
          <tag name="var" description="" type="String" line="132">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="132"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="148">
        <name>Crypt_Hash</name>
        <docblock>
          <description>Default Constructor.</description>
          <long-description>
</long-description>
          <tag name="param" description="String $hash" type="\optional" variable="$hash" line="141">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="\Crypt_Hash" line="141">
            <type by_reference="false">\Crypt_Hash</type>
          </tag>
          <tag name="access" description="public" line="141"/>
        </docblock>
        <argument line="148">
          <name>$hash</name>
          <default>sha1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="174">
        <name>setKey</name>
        <docblock>
          <description>Sets the key for HMACs</description>
          <long-description>&lt;p&gt;Keys can be of any length.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="166"/>
          <tag name="param" description="" type="String" variable="$key" line="166">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="185">
        <name>setHash</name>
        <docblock>
          <description>Sets the hash function.</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="179"/>
          <tag name="param" description="" type="String" variable="$hash" line="179">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="185">
          <name>$hash</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="295">
        <name>hash</name>
        <docblock>
          <description>Compute the HMAC.</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="288"/>
          <tag name="param" description="" type="String" variable="$text" line="288">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="288">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="295">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="344">
        <name>getLength</name>
        <docblock>
          <description>Returns the hash length (in bytes)</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="338"/>
          <tag name="return" description="" type="Integer" line="338">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="355">
        <name>_md5</name>
        <docblock>
          <description>Wrapper for MD5</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="349"/>
          <tag name="param" description="" type="String" variable="$text" line="349">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="355">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="366">
        <name>_sha1</name>
        <docblock>
          <description>Wrapper for SHA1</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="360"/>
          <tag name="param" description="" type="String" variable="$text" line="360">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="366">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="379">
        <name>_md2</name>
        <docblock>
          <description>Pure-PHP implementation of MD2</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc1319 RFC1319}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="371"/>
          <tag name="param" description="" type="String" variable="$text" line="371">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="379">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="455">
        <name>_sha256</name>
        <docblock>
          <description>Pure-PHP implementation of SHA256</description>
          <long-description>&lt;p&gt;See {@link http://en.wikipedia.org/wiki/SHA_hash_functions#SHA-256_.28a_SHA-2_variant.29_pseudocode SHA-256 (a SHA-2 variant) pseudocode - Wikipedia}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="447"/>
          <tag name="param" description="" type="String" variable="$text" line="447">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="455">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="560">
        <name>_sha512</name>
        <docblock>
          <description>Pure-PHP implementation of SHA384 and SHA512</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="554"/>
          <tag name="param" description="" type="String" variable="$text" line="554">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="560">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="746">
        <name>_rightRotate</name>
        <docblock>
          <description>Right Rotate</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="737"/>
          <tag name="param" description="" type="Integer" variable="$int" line="737">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$amt" line="737">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="see" description="_sha256()" line="737"/>
          <tag name="return" description="" type="Integer" line="737">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="746">
          <name>$int</name>
          <default/>
          <type/>
        </argument>
        <argument line="746">
          <name>$amt</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="762">
        <name>_rightShift</name>
        <docblock>
          <description>Right Shift</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="753"/>
          <tag name="param" description="" type="Integer" variable="$int" line="753">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$amt" line="753">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="see" description="_sha256()" line="753"/>
          <tag name="return" description="" type="Integer" line="753">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="762">
          <name>$int</name>
          <default/>
          <type/>
        </argument>
        <argument line="762">
          <name>$amt</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="776">
        <name>_not</name>
        <docblock>
          <description>Not</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="768"/>
          <tag name="param" description="" type="Integer" variable="$int" line="768">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="see" description="_sha256()" line="768"/>
          <tag name="return" description="" type="Integer" line="768">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="776">
          <name>$int</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="793">
        <name>_add</name>
        <docblock>
          <description>Add</description>
          <long-description>&lt;p&gt;_sha256() adds multiple unsigned 32-bit integers.  Since PHP doesn't support unsigned integers and since the
possibility of overflow exists, care has to be taken.  Math_BigInteger() could be used but this should be faster.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="String" variable="$string" line="781">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="Integer $index" type="\optional" variable="" line="781">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="String" line="781">
            <type by_reference="false">String</type>
          </tag>
          <tag name="see" description="_sha256()" line="781"/>
          <tag name="access" description="private" line="781"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="819">
        <name>_string_shift</name>
        <docblock>
          <description>String Shift</description>
          <long-description>&lt;p&gt;Inspired by array_shift&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="String" variable="$string" line="809">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="Integer $index" type="\optional" variable="$index" line="809">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="String" line="809">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="809"/>
        </docblock>
        <argument line="819">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="819">
          <name>$index</name>
          <default>1</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\Crypt\Random.php" hash="76db05ada42d8641b127d00236c8ee24">
    <docblock>
      <description>Random Number Generator</description>
      <long-description>&lt;p&gt;PHP versions 4 and 5&lt;/p&gt;

&lt;p&gt;Here's a short example of how to use this library:
&lt;code&gt;
&lt;?php
   include('Crypt/Random.php');

   echo crypt_random();
?&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Crypt"/>
      <tag name="subpackage" description="Crypt_Random"/>
      <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;"/>
      <tag name="copyright" description="MMVII Jim Wigginton"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
      <tag name="version" description="$Id: Random.php,v 1.9 2010/04/24 06:40:48 terrafrost Exp $"/>
      <tag name="link" description="http://phpseclib.sourceforge.net" link="http://phpseclib.sourceforge.net"/>
    </docblock>
    <function namespace="default" line="60">
      <name>crypt_random</name>
      <type>function</type>
      <docblock>
        <description>Generate a random value.</description>
        <long-description>&lt;p&gt;On 32-bit machines, the largest distance that can exist between $min and $max is 2**31.
If $min and $max are farther apart than that then the last ($max - range) numbers.&lt;/p&gt;

&lt;p&gt;Depending on how this is being used, it may be worth while to write a replacement.  For example,
a PHP-based web app that stores its data in an SQL database can collect more entropy than this function
can.&lt;/p&gt;
</long-description>
        <tag name="param" description="Integer $min" type="\optional" variable="$min" line="45">
          <type by_reference="false">\optional</type>
        </tag>
        <tag name="param" description="Integer $max" type="\optional" variable="$max" line="45">
          <type by_reference="false">\optional</type>
        </tag>
        <tag name="return" description="" type="Integer" line="45">
          <type by_reference="false">Integer</type>
        </tag>
        <tag name="access" description="public" line="45"/>
      </docblock>
      <argument line="60">
        <name>$min</name>
        <default>0</default>
        <type/>
      </argument>
      <argument line="60">
        <name>$max</name>
        <default>0x7FFFFFFF</default>
        <type/>
      </argument>
    </function>
  </file>
  <file path="lib\Crypt\RC4.php" hash="df2957aac0d94550d26716389cc3ebfd">
    <docblock>
      <description>Pure-PHP implementation of RC4.</description>
      <long-description>&lt;p&gt;Uses mcrypt, if available, and an internal implementation, otherwise.&lt;/p&gt;

&lt;p&gt;PHP versions 4 and 5&lt;/p&gt;

&lt;p&gt;Useful resources are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{@link http://www.mozilla.org/projects/security/pki/nss/draft-kaukonen-cipher-arcfour-03.txt ARCFOUR Algorithm}&lt;/li&gt;
&lt;li&gt;{@link http://en.wikipedia.org/wiki/RC4 - Wikipedia: RC4}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RC4 is also known as ARCFOUR or ARC4.  The reason is elaborated upon at Wikipedia.  This class is named RC4 and not
ARCFOUR or ARC4 because RC4 is how it is refered to in the SSH1 specification.&lt;/p&gt;

&lt;p&gt;Here's a short example of how to use this library:
&lt;code&gt;
&lt;?php
   include('Crypt/RC4.php');

   $rc4 = new Crypt_RC4();

   $rc4-&gt;setKey('abcdefgh');

   $size = 10 * 1024;
   $plaintext = '';
   for ($i = 0; $i &lt; $size; $i++) {
       $plaintext.= 'a';
   }

   echo $rc4-&gt;decrypt($rc4-&gt;encrypt($plaintext));
?&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Crypt"/>
      <tag name="subpackage" description="Crypt_RC4"/>
      <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;"/>
      <tag name="copyright" description="MMVII Jim Wigginton"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
      <tag name="version" description="$Id: RC4.php,v 1.8 2009/06/09 04:00:38 terrafrost Exp $"/>
      <tag name="link" description="http://phpseclib.sourceforge.net" link="http://phpseclib.sourceforge.net"/>
    </docblock>
    <constant namespace="default" line="72">
      <name>CRYPT_RC4_MODE_INTERNAL</name>
      <value>1</value>
      <docblock>
        <description>Toggles the internal implementation</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="76">
      <name>CRYPT_RC4_MODE_MCRYPT</name>
      <value>2</value>
      <docblock>
        <description>Toggles the mcrypt implementation</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="83">
      <name>CRYPT_RC4_ENCRYPT</name>
      <value>0</value>
    </constant>
    <constant namespace="default" line="84">
      <name>CRYPT_RC4_DECRYPT</name>
      <value>1</value>
    </constant>
    <class final="false" abstract="false" line="96" namespace="default">
      <name>Crypt_RC4</name>
      <extends/>
      <full_name>\Crypt_RC4</full_name>
      <docblock>
        <description>Pure-PHP implementation of RC4.</description>
        <long-description>
</long-description>
        <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;" line="87"/>
        <tag name="version" description="0.1.0" line="87"/>
        <tag name="access" description="public" line="87"/>
        <tag name="package" description="Crypt" line="87"/>
        <tag name="subpackage" description="Crypt_RC4" line="87"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="104">
        <name>$key</name>
        <default>\0</default>
        <docblock>
          <description>The Key</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_RC4::setKey()" line="97"/>
          <tag name="var" description="" type="String" line="97">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="97"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="115">
        <name>$encryptStream</name>
        <default>false</default>
        <docblock>
          <description>The Key Stream for encryption</description>
          <long-description>&lt;p&gt;If CRYPT_RC4_MODE == CRYPT_RC4_MODE_MCRYPT, this will be equal to the mcrypt object&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_RC4::setKey()" line="106"/>
          <tag name="var" description="" type="Array" line="106">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="106"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="126">
        <name>$decryptStream</name>
        <default>false</default>
        <docblock>
          <description>The Key Stream for decryption</description>
          <long-description>&lt;p&gt;If CRYPT_RC4_MODE == CRYPT_RC4_MODE_MCRYPT, this will be equal to the mcrypt object&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_RC4::setKey()" line="117"/>
          <tag name="var" description="" type="Array" line="117">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="117"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="135">
        <name>$encryptIndex</name>
        <default>0</default>
        <docblock>
          <description>The $i and $j indexes for encryption</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_RC4::_crypt()" line="128"/>
          <tag name="var" description="" type="Integer" line="128">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="128"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="144">
        <name>$decryptIndex</name>
        <default>0</default>
        <docblock>
          <description>The $i and $j indexes for decryption</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_RC4::_crypt()" line="137"/>
          <tag name="var" description="" type="Integer" line="137">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="137"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="153">
        <name>$mcrypt</name>
        <default>array</default>
        <docblock>
          <description>MCrypt parameters</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_RC4::setMCrypt()" line="146"/>
          <tag name="var" description="" type="Array" line="146">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="146"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="164">
        <name>$mode</name>
        <default/>
        <docblock>
          <description>The Encryption Algorithm</description>
          <long-description>&lt;p&gt;Only used if CRYPT_RC4_MODE == CRYPT_RC4_MODE_MCRYPT.  Only possible values are MCRYPT_RC4 or MCRYPT_ARCFOUR.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_RC4::Crypt_RC4()" line="155"/>
          <tag name="var" description="" type="Integer" line="155">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="155"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="173">
        <name>$continuousBuffer</name>
        <default>false</default>
        <docblock>
          <description>Continuous Buffer status</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_RC4::enableContinuousBuffer()" line="166"/>
          <tag name="var" description="" type="Boolean" line="166">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="166"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="184">
        <name>Crypt_RC4</name>
        <docblock>
          <description>Default Constructor.</description>
          <long-description>&lt;p&gt;Determines whether or not the mcrypt extension should be used.&lt;/p&gt;
</long-description>
          <tag name="param" description="Integer $mode" type="\optional" variable="" line="175">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="\Crypt_RC4" line="175">
            <type by_reference="false">\Crypt_RC4</type>
          </tag>
          <tag name="access" description="public" line="175"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="220">
        <name>setKey</name>
        <docblock>
          <description>Sets the key.</description>
          <long-description>&lt;p&gt;Keys can be between 1 and 256 bytes long.  If they are longer then 256 bytes, the first 256 bytes will
be used.  If no key is explicitly set, it'll be assumed to be a single null byte.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="211"/>
          <tag name="param" description="" type="String" variable="$key" line="211">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="220">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="264">
        <name>setIV</name>
        <docblock>
          <description>Dummy function.</description>
          <long-description>&lt;p&gt;Some protocols, such as WEP, prepend an "initialization vector" to the key, effectively creating a new key [1].
If you need to use an initialization vector in this manner, feel free to prepend it to the key, yourself, before
calling setKey().&lt;/p&gt;

&lt;p&gt;[1] WEP's initialization vectors (IV's) are used in a somewhat insecure way.  Since, in that protocol,
the IV's are relatively easy to predict, an attack described by
{@link http://www.drizzle.com/~aboba/IEEE/rc4_ksaproc.pdf Scott Fluhrer, Itsik Mantin, and Adi Shamir}
can be used to quickly guess at the rest of the key.  The following links elaborate:&lt;/p&gt;

&lt;p&gt;{@link http://www.rsa.com/rsalabs/node.asp?id=2009 http://www.rsa.com/rsalabs/node.asp?id=2009}
{@link http://en.wikipedia.org/wiki/Related_key_attack http://en.wikipedia.org/wiki/Related_key_attack}&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="String" variable="$iv" line="245">
            <type by_reference="false">String</type>
          </tag>
          <tag name="see" description="Crypt_RC4::setKey()" line="245"/>
          <tag name="access" description="public" line="245"/>
        </docblock>
        <argument line="264">
          <name>$iv</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="278">
        <name>setMCrypt</name>
        <docblock>
          <description>Sets MCrypt parameters. (optional)</description>
          <long-description>&lt;p&gt;If MCrypt is being used, empty strings will be used, unless otherwise specified.&lt;/p&gt;
</long-description>
          <tag name="link" description="http://php.net/function.mcrypt-module-open#function.mcrypt-module-open" link="http://php.net/function.mcrypt-module-open#function.mcrypt-module-open" line="268"/>
          <tag name="access" description="public" line="268"/>
          <tag name="param" description="Integer $algorithm_directory" type="\optional" variable="$algorithm_directory" line="268">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="Integer $mode_directory" type="\optional" variable="$mode_directory" line="268">
            <type by_reference="false">\optional</type>
          </tag>
        </docblock>
        <argument line="278">
          <name>$algorithm_directory</name>
          <default/>
          <type/>
        </argument>
        <argument line="278">
          <name>$mode_directory</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="293">
        <name>encrypt</name>
        <docblock>
          <description>Encrypts a message.</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_RC4::_crypt()" line="286"/>
          <tag name="access" description="public" line="286"/>
          <tag name="param" description="" type="String" variable="$plaintext" line="286">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="293">
          <name>$plaintext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="308">
        <name>decrypt</name>
        <docblock>
          <description>Decrypts a message.</description>
          <long-description>&lt;p&gt;$this-&gt;decrypt($this-&gt;encrypt($plaintext)) == $this-&gt;encrypt($this-&gt;encrypt($plaintext)).
Atleast if the continuous buffer is disabled.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_RC4::_crypt()" line="298"/>
          <tag name="access" description="public" line="298"/>
          <tag name="param" description="" type="String" variable="$ciphertext" line="298">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="308">
          <name>$ciphertext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="322">
        <name>_crypt</name>
        <docblock>
          <description>Encrypts or decrypts a message.</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_RC4::encrypt()" line="313"/>
          <tag name="see" description="Crypt_RC4::decrypt()" line="313"/>
          <tag name="access" description="private" line="313"/>
          <tag name="param" description="" type="String" variable="$text" line="313">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$mode" line="313">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="322">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="322">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="418">
        <name>enableContinuousBuffer</name>
        <docblock>
          <description>Treat consecutive "packets" as if they are a continuous buffer.</description>
          <long-description>&lt;p&gt;Say you have a 16-byte plaintext $plaintext.  Using the default behavior, the two following code snippets
will yield different outputs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
   echo $rc4-&gt;encrypt(substr($plaintext, 0, 8));
   echo $rc4-&gt;encrypt(substr($plaintext, 8, 8));
&lt;/code&gt;
&lt;code&gt;
   echo $rc4-&gt;encrypt($plaintext);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The solution is to enable the continuous buffer.  Although this will resolve the above discrepancy, it creates
another, as demonstrated with the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
   $rc4-&gt;encrypt(substr($plaintext, 0, 8));
   echo $rc4-&gt;decrypt($des-&gt;encrypt(substr($plaintext, 8, 8)));
&lt;/code&gt;
&lt;code&gt;
   echo $rc4-&gt;decrypt($des-&gt;encrypt(substr($plaintext, 8, 8)));
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With the continuous buffer disabled, these would yield the same output.  With it enabled, they yield different
outputs.  The reason is due to the fact that the initialization vector's change after every encryption /
decryption round when the continuous buffer is enabled.  When it's disabled, they remain constant.&lt;/p&gt;

&lt;p&gt;Put another way, when the continuous buffer is enabled, the state of the Crypt_DES() object changes after each
encryption / decryption round, whereas otherwise, it'd remain constant.  For this reason, it's recommended that
continuous buffers not be used.  They do offer better security and are, in fact, sometimes required (SSH uses them),
however, they are also less intuitive and more likely to cause you problems.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_RC4::disableContinuousBuffer()" line="381"/>
          <tag name="access" description="public" line="381"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="431">
        <name>disableContinuousBuffer</name>
        <docblock>
          <description>Treat consecutive packets as if they are a discontinuous buffer.</description>
          <long-description>&lt;p&gt;The default behavior.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_RC4::enableContinuousBuffer()" line="423"/>
          <tag name="access" description="public" line="423"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="450">
        <name>enablePadding</name>
        <docblock>
          <description>Dummy function.</description>
          <long-description>&lt;p&gt;Since RC4 is a stream cipher and not a block cipher, no padding is necessary.  The only reason this function is
included is so that you can switch between a block cipher and a stream cipher transparently.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_RC4::disablePadding()" line="441"/>
          <tag name="access" description="public" line="441"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="460">
        <name>disablePadding</name>
        <docblock>
          <description>Dummy function.</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_RC4::enablePadding()" line="454"/>
          <tag name="access" description="public" line="454"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="472">
        <name>__destruct</name>
        <docblock>
          <description>Class destructor.</description>
          <long-description>&lt;p&gt;Will be called, automatically, if you're using PHP5.  If you're using PHP4, call it yourself.  Only really
needs to be called if mcrypt is being used.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="464"/>
        </docblock>
      </method>
      
    </class>
  </file>
  <file path="lib\Crypt\Rijndael.php" hash="d564598ee1cc2e327b0dfb99ad3fc258">
    <docblock>
      <description>Pure-PHP implementation of Rijndael.</description>
      <long-description>&lt;p&gt;Does not use mcrypt, even when available, for reasons that are explained below.&lt;/p&gt;

&lt;p&gt;PHP versions 4 and 5&lt;/p&gt;

&lt;p&gt;If {@link Crypt_Rijndael::setBlockLength() setBlockLength()} isn't called, it'll be assumed to be 128 bits.  If
{@link Crypt_Rijndael::setKeyLength() setKeyLength()} isn't called, it'll be calculated from
{@link Crypt_Rijndael::setKey() setKey()}.  ie. if the key is 128-bits, the key length will be 128-bits.  If it's
136-bits it'll be null-padded to 160-bits and 160 bits will be the key length until
{@link Crypt_Rijndael::setKey() setKey()} is called, again, at which point, it'll be recalculated.&lt;/p&gt;

&lt;p&gt;Not all Rijndael implementations may support 160-bits or 224-bits as the block length / key length.  mcrypt, for example,
does not.  AES, itself, only supports block lengths of 128 and key lengths of 128, 192, and 256.
{@link http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=10 Rijndael-ammended.pdf#page=10} defines the
algorithm for block lengths of 192 and 256 but not for block lengths / key lengths of 160 and 224.  Indeed, 160 and 224
are first defined as valid key / block lengths in
{@link http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=44 Rijndael-ammended.pdf#page=44}:
Extensions: Other block and Cipher Key lengths.&lt;/p&gt;

&lt;p&gt;{@internal The variable names are the same as those in
{@link http://www.csrc.nist.gov/publications/fips/fips197/fips-197.pdf#page=10 fips-197.pdf#page=10}.}}&lt;/p&gt;

&lt;p&gt;Here's a short example of how to use this library:
&lt;code&gt;
&lt;?php
   include('Crypt/Rijndael.php');

   $rijndael = new Crypt_Rijndael();

   $rijndael-&gt;setKey('abcdefghijklmnop');

   $size = 10 * 1024;
   $plaintext = '';
   for ($i = 0; $i &lt; $size; $i++) {
       $plaintext.= 'a';
   }

   echo $rijndael-&gt;decrypt($rijndael-&gt;encrypt($plaintext));
?&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Crypt"/>
      <tag name="subpackage" description="Crypt_Rijndael"/>
      <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;"/>
      <tag name="copyright" description="MMVIII Jim Wigginton"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
      <tag name="version" description="$Id: Rijndael.php,v 1.12 2010/02/09 06:10:26 terrafrost Exp $"/>
      <tag name="link" description="http://phpseclib.sourceforge.net" link="http://phpseclib.sourceforge.net"/>
    </docblock>
    <constant namespace="default" line="86">
      <name>CRYPT_RIJNDAEL_MODE_CTR</name>
      <value>-1</value>
      <docblock>
        <description>Encrypt / decrypt using the Counter mode.</description>
        <long-description>&lt;p&gt;Set to -1 since that's what Crypt/Random.php uses to index the CTR mode.&lt;/p&gt;
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Counter_.28CTR.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Counter_.28CTR.29" line="79"/>
      </docblock>
    </constant>
    <constant namespace="default" line="92">
      <name>CRYPT_RIJNDAEL_MODE_ECB</name>
      <value>1</value>
      <docblock>
        <description>Encrypt / decrypt using the Electronic Code Book mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29" line="87"/>
      </docblock>
    </constant>
    <constant namespace="default" line="98">
      <name>CRYPT_RIJNDAEL_MODE_CBC</name>
      <value>2</value>
      <docblock>
        <description>Encrypt / decrypt using the Code Book Chaining mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher-block_chaining_.28CBC.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher-block_chaining_.28CBC.29" line="93"/>
      </docblock>
    </constant>
    <constant namespace="default" line="104">
      <name>CRYPT_RIJNDAEL_MODE_CFB</name>
      <value>3</value>
      <docblock>
        <description>Encrypt / decrypt using the Cipher Feedback mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher_feedback_.28CFB.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher_feedback_.28CFB.29" line="99"/>
      </docblock>
    </constant>
    <constant namespace="default" line="110">
      <name>CRYPT_RIJNDAEL_MODE_OFB</name>
      <value>4</value>
      <docblock>
        <description>Encrypt / decrypt using the Cipher Feedback mode.</description>
        <long-description>
</long-description>
        <tag name="link" description="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Output_feedback_.28OFB.29" link="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Output_feedback_.28OFB.29" line="105"/>
      </docblock>
    </constant>
    <constant namespace="default" line="120">
      <name>CRYPT_RIJNDAEL_MODE_INTERNAL</name>
      <value>1</value>
      <docblock>
        <description>Toggles the internal implementation</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="124">
      <name>CRYPT_RIJNDAEL_MODE_MCRYPT</name>
      <value>2</value>
      <docblock>
        <description>Toggles the mcrypt implementation</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <class final="false" abstract="false" line="136" namespace="default">
      <name>Crypt_Rijndael</name>
      <extends/>
      <full_name>\Crypt_Rijndael</full_name>
      <docblock>
        <description>Pure-PHP implementation of Rijndael.</description>
        <long-description>
</long-description>
        <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;" line="127"/>
        <tag name="version" description="0.1.0" line="127"/>
        <tag name="access" description="public" line="127"/>
        <tag name="package" description="Crypt" line="127"/>
        <tag name="subpackage" description="Crypt_Rijndael" line="127"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="144">
        <name>$mode</name>
        <default/>
        <docblock>
          <description>The Encryption Mode</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael::Crypt_Rijndael()" line="137"/>
          <tag name="var" description="" type="Integer" line="137">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="137"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="153">
        <name>$key</name>
        <default>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</default>
        <docblock>
          <description>The Key</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael::setKey()" line="146"/>
          <tag name="var" description="" type="String" line="146">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="146"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="162">
        <name>$iv</name>
        <default/>
        <docblock>
          <description>The Initialization Vector</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael::setIV()" line="155"/>
          <tag name="var" description="" type="String" line="155">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="155"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="171">
        <name>$encryptIV</name>
        <default/>
        <docblock>
          <description>A "sliding" Initialization Vector</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael::enableContinuousBuffer()" line="164"/>
          <tag name="var" description="" type="String" line="164">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="164"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="180">
        <name>$decryptIV</name>
        <default/>
        <docblock>
          <description>A "sliding" Initialization Vector</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael::enableContinuousBuffer()" line="173"/>
          <tag name="var" description="" type="String" line="173">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="173"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="189">
        <name>$continuousBuffer</name>
        <default>false</default>
        <docblock>
          <description>Continuous Buffer status</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael::enableContinuousBuffer()" line="182"/>
          <tag name="var" description="" type="Boolean" line="182">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="182"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="198">
        <name>$padding</name>
        <default>true</default>
        <docblock>
          <description>Padding status</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael::enablePadding()" line="191"/>
          <tag name="var" description="" type="Boolean" line="191">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="191"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="209">
        <name>$changed</name>
        <default>true</default>
        <docblock>
          <description>Does the key schedule need to be (re)calculated?</description>
          <long-description>
</long-description>
          <tag name="see" description="setKey()" line="200"/>
          <tag name="see" description="setBlockLength()" line="200"/>
          <tag name="see" description="setKeyLength()" line="200"/>
          <tag name="var" description="" type="Boolean" line="200">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="200"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="218">
        <name>$explicit_key_length</name>
        <default>false</default>
        <docblock>
          <description>Has the key length explicitly been set or should it be derived from the key, itself?</description>
          <long-description>
</long-description>
          <tag name="see" description="setKeyLength()" line="211"/>
          <tag name="var" description="" type="Boolean" line="211">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="211"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="227">
        <name>$w</name>
        <default/>
        <docblock>
          <description>The Key Schedule</description>
          <long-description>
</long-description>
          <tag name="see" description="_setup()" line="220"/>
          <tag name="var" description="" type="Array" line="220">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="220"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="236">
        <name>$dw</name>
        <default/>
        <docblock>
          <description>The Inverse Key Schedule</description>
          <long-description>
</long-description>
          <tag name="see" description="_setup()" line="229"/>
          <tag name="var" description="" type="Array" line="229">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="229"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="247">
        <name>$block_size</name>
        <default>16</default>
        <docblock>
          <description>The Block Length</description>
          <long-description>
</long-description>
          <tag name="see" description="setBlockLength()" line="238"/>
          <tag name="var" description="" type="Integer" line="238">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="238"/>
          <tag name="internal" description="The max value is 32, the min value is 16.  All valid values are multiples of 4.  Exists in conjunction with&#13;&#10;$Nb because we need this value and not $Nb to pad strings appropriately." line="238"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="261">
        <name>$Nb</name>
        <default>4</default>
        <docblock>
          <description>The Block Length divided by 32</description>
          <long-description>
</long-description>
          <tag name="see" description="setBlockLength()" line="249"/>
          <tag name="var" description="" type="Integer" line="249">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="249"/>
          <tag name="internal" description="The max value is 256 / 32 = 8, the min value is 128 / 32 = 4.  Exists in conjunction with $block_size&#13;&#10;because the encryption / decryption / key schedule creation requires this number and not $block_size.  We could&#13;&#10;derive this from $block_size or vice versa, but that&amp;#039;d mean we&amp;#039;d have to do multiple shift operations, so in lieu&#13;&#10;of that, we&amp;#039;ll just precompute it once." line="249"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="274">
        <name>$key_size</name>
        <default>16</default>
        <docblock>
          <description>The Key Length</description>
          <long-description>
</long-description>
          <tag name="see" description="setKeyLength()" line="263"/>
          <tag name="var" description="" type="Integer" line="263">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="263"/>
          <tag name="internal" description="The max value is 256 / 8 = 32, the min value is 128 / 8 = 16.  Exists in conjunction with $key_size&#13;&#10;because the encryption / decryption / key schedule creation requires this number and not $key_size.  We could&#13;&#10;derive this from $key_size or vice versa, but that&amp;#039;d mean we&amp;#039;d have to do multiple shift operations, so in lieu&#13;&#10;of that, we&amp;#039;ll just precompute it once." line="263"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="284">
        <name>$Nk</name>
        <default>4</default>
        <docblock>
          <description>The Key Length divided by 32</description>
          <long-description>
</long-description>
          <tag name="see" description="setKeyLength()" line="276"/>
          <tag name="var" description="" type="Integer" line="276">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="276"/>
          <tag name="internal" description="The max value is 256 / 32 = 8, the min value is 128 / 32 = 4" line="276"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="293">
        <name>$Nr</name>
        <default/>
        <docblock>
          <description>The Number of Rounds</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Integer" line="286">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="286"/>
          <tag name="internal" description="The max value is 14, the min value is 10." line="286"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="301">
        <name>$c</name>
        <default/>
        <docblock>
          <description>Shift offsets</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Array" line="295">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="295"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="310">
        <name>$t0</name>
        <default/>
        <docblock>
          <description>Precomputed mixColumns table</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael()" line="303"/>
          <tag name="var" description="" type="Array" line="303">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="303"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="319">
        <name>$t1</name>
        <default/>
        <docblock>
          <description>Precomputed mixColumns table</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael()" line="312"/>
          <tag name="var" description="" type="Array" line="312">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="312"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="328">
        <name>$t2</name>
        <default/>
        <docblock>
          <description>Precomputed mixColumns table</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael()" line="321"/>
          <tag name="var" description="" type="Array" line="321">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="321"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="337">
        <name>$t3</name>
        <default/>
        <docblock>
          <description>Precomputed mixColumns table</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael()" line="330"/>
          <tag name="var" description="" type="Array" line="330">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="330"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="346">
        <name>$dt0</name>
        <default/>
        <docblock>
          <description>Precomputed invMixColumns table</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael()" line="339"/>
          <tag name="var" description="" type="Array" line="339">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="339"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="355">
        <name>$dt1</name>
        <default/>
        <docblock>
          <description>Precomputed invMixColumns table</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael()" line="348"/>
          <tag name="var" description="" type="Array" line="348">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="348"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="364">
        <name>$dt2</name>
        <default/>
        <docblock>
          <description>Precomputed invMixColumns table</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael()" line="357"/>
          <tag name="var" description="" type="Array" line="357">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="357"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="373">
        <name>$dt3</name>
        <default/>
        <docblock>
          <description>Precomputed invMixColumns table</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael()" line="366"/>
          <tag name="var" description="" type="Array" line="366">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="366"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="382">
        <name>$paddable</name>
        <default>false</default>
        <docblock>
          <description>Is the mode one that is paddable?</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael::Crypt_Rijndael()" line="375"/>
          <tag name="var" description="" type="Boolean" line="375">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="375"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="391">
        <name>$enbuffer</name>
        <default>array</default>
        <docblock>
          <description>Encryption buffer for CTR, OFB and CFB modes</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael::encrypt()" line="384"/>
          <tag name="var" description="" type="String" line="384">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="384"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="400">
        <name>$debuffer</name>
        <default>array</default>
        <docblock>
          <description>Decryption buffer for CTR, OFB and CFB modes</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael::decrypt()" line="393"/>
          <tag name="var" description="" type="String" line="393">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="393"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="412">
        <name>Crypt_Rijndael</name>
        <docblock>
          <description>Default Constructor.</description>
          <long-description>&lt;p&gt;Determines whether or not the mcrypt extension should be used.  $mode should only, at present, be
CRYPT_RIJNDAEL_MODE_ECB or CRYPT_RIJNDAEL_MODE_CBC.  If not explictly set, CRYPT_RIJNDAEL_MODE_CBC will be used.&lt;/p&gt;
</long-description>
          <tag name="param" description="Integer $mode" type="\optional" variable="$mode" line="402">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="\Crypt_Rijndael" line="402">
            <type by_reference="false">\Crypt_Rijndael</type>
          </tag>
          <tag name="access" description="public" line="402"/>
        </docblock>
        <argument line="412">
          <name>$mode</name>
          <default>CRYPT_RIJNDAEL_MODE_CBC</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="537">
        <name>setKey</name>
        <docblock>
          <description>Sets the key.</description>
          <long-description>&lt;p&gt;Keys can be of any length.  Rijndael, itself, requires the use of a key that's between 128-bits and 256-bits long and
whose length is a multiple of 32.  If the key is less than 256-bits and the key length isn't set, we round the length
up to the closest valid key length, padding $key with null bytes.  If the key is more than 256-bits, we trim the
excess bits.&lt;/p&gt;

&lt;p&gt;If the key is not explicitly set, it'll be assumed to be all null bytes.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="524"/>
          <tag name="param" description="" type="String" variable="$key" line="524">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="537">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="552">
        <name>setIV</name>
        <docblock>
          <description>Sets the initialization vector. (optional)</description>
          <long-description>&lt;p&gt;SetIV is not required when CRYPT_RIJNDAEL_MODE_ECB is being used.  If not explictly set, it'll be assumed
to be all zero's.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="543"/>
          <tag name="param" description="" type="String" variable="$iv" line="543">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="552">
          <name>$iv</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="566">
        <name>setKeyLength</name>
        <docblock>
          <description>Sets the key length</description>
          <long-description>&lt;p&gt;Valid key lengths are 128, 160, 192, 224, and 256.  If the length is less than 128, it will be rounded up to
128.  If the length is greater then 128 and invalid, it will be rounded down to the closest valid amount.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="557"/>
          <tag name="param" description="" type="Integer" variable="$length" line="557">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="566">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="590">
        <name>setBlockLength</name>
        <docblock>
          <description>Sets the block length</description>
          <long-description>&lt;p&gt;Valid block lengths are 128, 160, 192, 224, and 256.  If the length is less than 128, it will be rounded up to
128.  If the length is greater then 128 and invalid, it will be rounded down to the closest valid amount.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="581"/>
          <tag name="param" description="" type="Integer" variable="$length" line="581">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="590">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="615">
        <name>_generate_xor</name>
        <docblock>
          <description>Generate CTR XOR encryption key</description>
          <long-description>&lt;p&gt;Encrypt the output of this and XOR it against the ciphertext / plaintext to get the
plaintext / ciphertext in CTR mode.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_Rijndael::decrypt()" line="603"/>
          <tag name="see" description="Crypt_Rijndael::encrypt()" line="603"/>
          <tag name="access" description="public" line="603"/>
          <tag name="param" description="" type="Integer" variable="$length" line="603">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="param" description="" type="String" variable="$iv" line="603">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="615">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
        <argument line="615">
          <name>$iv</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="660">
        <name>encrypt</name>
        <docblock>
          <description>Encrypts a message.</description>
          <long-description>&lt;p&gt;$plaintext will be padded with additional bytes such that it's length is a multiple of the block size.  Other Rjindael
implementations may or may not pad in the same manner.  Other common approaches to padding and the reasons why it's
necessary are discussed in the following
URL:&lt;/p&gt;

&lt;p&gt;{@link http://www.di-mgt.com.au/cryptopad.html http://www.di-mgt.com.au/cryptopad.html}&lt;/p&gt;

&lt;p&gt;An alternative to padding is to, separately, send the length of the file.  This is what SSH, in fact, does.
strlen($plaintext) will still need to be a multiple of 8, however, arbitrary values can be added to make it that
length.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_Rijndael::decrypt()" line="642"/>
          <tag name="access" description="public" line="642"/>
          <tag name="param" description="" type="String" variable="$plaintext" line="642">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="660">
          <name>$plaintext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="779">
        <name>decrypt</name>
        <docblock>
          <description>Decrypts a message.</description>
          <long-description>&lt;p&gt;If strlen($ciphertext) is not a multiple of the block size, null bytes will be added to the end of the string until
it is.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_Rijndael::encrypt()" line="769"/>
          <tag name="access" description="public" line="769"/>
          <tag name="param" description="" type="String" variable="$ciphertext" line="769">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="779">
          <name>$ciphertext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="897">
        <name>_encryptBlock</name>
        <docblock>
          <description>Encrypts a block</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="890"/>
          <tag name="param" description="" type="String" variable="$in" line="890">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="890">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="897">
          <name>$in</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="984">
        <name>_decryptBlock</name>
        <docblock>
          <description>Decrypts a block</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="977"/>
          <tag name="param" description="" type="String" variable="$in" line="977">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="977">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="984">
          <name>$in</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1062">
        <name>_setup</name>
        <docblock>
          <description>Setup Rijndael</description>
          <long-description>&lt;p&gt;Validates all the variables and calculates $Nr - the number of rounds that need to be performed - and $w - the key
key schedule.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1054"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1176">
        <name>_subWord</name>
        <docblock>
          <description>Performs S-Box substitutions</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="1171"/>
        </docblock>
        <argument line="1176">
          <name>$word</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1222">
        <name>_invSubWord</name>
        <docblock>
          <description>Performs inverse S-Box substitutions</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="1217"/>
        </docblock>
        <argument line="1222">
          <name>$word</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1278">
        <name>enablePadding</name>
        <docblock>
          <description>Pad "packets".</description>
          <long-description>&lt;p&gt;Rijndael works by encrypting between sixteen and thirty-two bytes at a time, provided that number is also a multiple
of four.  If you ever need to encrypt or decrypt something that isn't of the proper length, it becomes necessary to
pad the input so that it is of the proper length.&lt;/p&gt;

&lt;p&gt;Padding is enabled by default.  Sometimes, however, it is undesirable to pad strings.  Such is the case in SSH,
where "packets" are padded with random bytes before being encrypted.  Unpad these packets and you risk stripping
away characters that shouldn't be stripped away. (SSH knows how many bytes are added because the length is
transmitted separately)&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_Rijndael::disablePadding()" line="1263"/>
          <tag name="access" description="public" line="1263"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1289">
        <name>disablePadding</name>
        <docblock>
          <description>Do not pad packets.</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_Rijndael::enablePadding()" line="1283"/>
          <tag name="access" description="public" line="1283"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1307">
        <name>_pad</name>
        <docblock>
          <description>Pads a string</description>
          <long-description>&lt;p&gt;Pads a string using the RSA PKCS padding standards so that its length is a multiple of the blocksize.
$block_size - (strlen($text) % $block_size) bytes are added, each of which is equal to
chr($block_size - (strlen($text) % $block_size)&lt;/p&gt;

&lt;p&gt;If padding is disabled and $text is not a multiple of the blocksize, the string will be padded regardless
and padding will, hence forth, be enabled.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_Rijndael::_unpad()" line="1294"/>
          <tag name="access" description="private" line="1294"/>
        </docblock>
        <argument line="1307">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1334">
        <name>_unpad</name>
        <docblock>
          <description>Unpads a string.</description>
          <long-description>&lt;p&gt;If padding is enabled and the reported padding length is invalid the encryption key will be assumed to be wrong
and false will be returned.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_Rijndael::_pad()" line="1325"/>
          <tag name="access" description="private" line="1325"/>
        </docblock>
        <argument line="1334">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1386">
        <name>enableContinuousBuffer</name>
        <docblock>
          <description>Treat consecutive "packets" as if they are a continuous buffer.</description>
          <long-description>&lt;p&gt;Say you have a 32-byte plaintext $plaintext.  Using the default behavior, the two following code snippets
will yield different outputs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
   echo $rijndael-&gt;encrypt(substr($plaintext,  0, 16));
   echo $rijndael-&gt;encrypt(substr($plaintext, 16, 16));
&lt;/code&gt;
&lt;code&gt;
   echo $rijndael-&gt;encrypt($plaintext);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The solution is to enable the continuous buffer.  Although this will resolve the above discrepancy, it creates
another, as demonstrated with the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
   $rijndael-&gt;encrypt(substr($plaintext, 0, 16));
   echo $rijndael-&gt;decrypt($des-&gt;encrypt(substr($plaintext, 16, 16)));
&lt;/code&gt;
&lt;code&gt;
   echo $rijndael-&gt;decrypt($des-&gt;encrypt(substr($plaintext, 16, 16)));
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With the continuous buffer disabled, these would yield the same output.  With it enabled, they yield different
outputs.  The reason is due to the fact that the initialization vector's change after every encryption /
decryption round when the continuous buffer is enabled.  When it's disabled, they remain constant.&lt;/p&gt;

&lt;p&gt;Put another way, when the continuous buffer is enabled, the state of the Crypt_Rijndael() object changes after each
encryption / decryption round, whereas otherwise, it'd remain constant.  For this reason, it's recommended that
continuous buffers not be used.  They do offer better security and are, in fact, sometimes required (SSH uses them),
however, they are also less intuitive and more likely to cause you problems.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_Rijndael::disableContinuousBuffer()" line="1349"/>
          <tag name="access" description="public" line="1349"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1399">
        <name>disableContinuousBuffer</name>
        <docblock>
          <description>Treat consecutive packets as if they are a discontinuous buffer.</description>
          <long-description>&lt;p&gt;The default behavior.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_Rijndael::enableContinuousBuffer()" line="1391"/>
          <tag name="access" description="public" line="1391"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1416">
        <name>_string_shift</name>
        <docblock>
          <description>String Shift</description>
          <long-description>&lt;p&gt;Inspired by array_shift&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="String" variable="$string" line="1406">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="Integer $index" type="\optional" variable="$index" line="1406">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="String" line="1406">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="1406"/>
        </docblock>
        <argument line="1416">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="1416">
          <name>$index</name>
          <default>1</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\Crypt\RSA.php" hash="acd55060d74c17650c1a8ae80b7e61a4">
    <docblock>
      <description>Pure-PHP PKCS#1 (v2.1) compliant implementation of RSA.</description>
      <long-description>&lt;p&gt;PHP versions 4 and 5&lt;/p&gt;

&lt;p&gt;Here's an example of how to encrypt and decrypt text with this library:
&lt;code&gt;
&lt;?php
   include('Crypt/RSA.php');

   $rsa = new Crypt_RSA();
   extract($rsa-&gt;createKey());

   $plaintext = 'terrafrost';

   $rsa-&gt;loadKey($privatekey);
   $ciphertext = $rsa-&gt;encrypt($plaintext);

   $rsa-&gt;loadKey($publickey);
   echo $rsa-&gt;decrypt($ciphertext);
?&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here's an example of how to create signatures and verify signatures with this library:
&lt;code&gt;
&lt;?php
   include('Crypt/RSA.php');

   $rsa = new Crypt_RSA();
   extract($rsa-&gt;createKey());

   $plaintext = 'terrafrost';

   $rsa-&gt;loadKey($privatekey);
   $signature = $rsa-&gt;sign($plaintext);

   $rsa-&gt;loadKey($publickey);
   echo $rsa-&gt;verify($plaintext, $signature) ? 'verified' : 'unverified';
?&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Crypt"/>
      <tag name="subpackage" description="Crypt_RSA"/>
      <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;"/>
      <tag name="copyright" description="MMIX Jim Wigginton"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
      <tag name="version" description="$Id: RSA.php,v 1.19 2010/09/12 21:58:54 terrafrost Exp $"/>
      <tag name="link" description="http://phpseclib.sourceforge.net" link="http://phpseclib.sourceforge.net"/>
    </docblock>
    <include type="Require Once" line="75">
      <name>lib/Math/BigInteger.php</name>
    </include>
    <include type="Require Once" line="80">
      <name>lib/Crypt/Random.php</name>
    </include>
    <include type="Require Once" line="85">
      <name>lib/Crypt/Hash.php</name>
    </include>
    <constant namespace="default" line="101">
      <name>CRYPT_RSA_ENCRYPTION_OAEP</name>
      <value>1</value>
      <docblock>
        <description>Use {@link http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding Optimal Asymmetric Encryption Padding}
(OAEP) for encryption / decryption.</description>
        <long-description>&lt;p&gt;Uses sha1 by default.&lt;/p&gt;
</long-description>
        <tag name="see" description="Crypt_RSA::setHash()" line="92"/>
        <tag name="see" description="Crypt_RSA::setMGFHash()" line="92"/>
      </docblock>
    </constant>
    <constant namespace="default" line="108">
      <name>CRYPT_RSA_ENCRYPTION_PKCS1</name>
      <value>2</value>
      <docblock>
        <description>Use PKCS#1 padding.</description>
        <long-description>&lt;p&gt;Although CRYPT_RSA_ENCRYPTION_OAEP offers more security, including PKCS#1 padding is necessary for purposes of backwards
compatability with protocols (like SSH-1) written before OAEP's introduction.&lt;/p&gt;
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="125">
      <name>CRYPT_RSA_SIGNATURE_PSS</name>
      <value>1</value>
      <docblock>
        <description>Use the Probabilistic Signature Scheme for signing</description>
        <long-description>&lt;p&gt;Uses sha1 by default.&lt;/p&gt;
</long-description>
        <tag name="see" description="Crypt_RSA::setSaltLength()" line="117"/>
        <tag name="see" description="Crypt_RSA::setMGFHash()" line="117"/>
      </docblock>
    </constant>
    <constant namespace="default" line="132">
      <name>CRYPT_RSA_SIGNATURE_PKCS1</name>
      <value>2</value>
      <docblock>
        <description>Use the PKCS#1 scheme by default.</description>
        <long-description>&lt;p&gt;Although CRYPT_RSA_SIGNATURE_PSS offers more security, including PKCS#1 signing is necessary for purposes of backwards
compatability with protocols (like SSH-2) written before PSS's introduction.&lt;/p&gt;
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="142">
      <name>CRYPT_RSA_ASN1_INTEGER</name>
      <value>2</value>
      <docblock>
        <description>ASN1 Integer</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="146">
      <name>CRYPT_RSA_ASN1_SEQUENCE</name>
      <value>48</value>
      <docblock>
        <description>ASN1 Sequence (with the constucted bit set)</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="156">
      <name>CRYPT_RSA_MODE_INTERNAL</name>
      <value>1</value>
      <docblock>
        <description>To use the pure-PHP implementation</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="162">
      <name>CRYPT_RSA_MODE_OPENSSL</name>
      <value>2</value>
      <docblock>
        <description>To use the OpenSSL library</description>
        <long-description>&lt;p&gt;(if enabled; otherwise, the internal implementation will be used)&lt;/p&gt;
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="175">
      <name>CRYPT_RSA_PRIVATE_FORMAT_PKCS1</name>
      <value>0</value>
      <docblock>
        <description>PKCS#1 formatted private key</description>
        <long-description>&lt;p&gt;Used by OpenSSH&lt;/p&gt;
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="179">
      <name>CRYPT_RSA_PRIVATE_FORMAT_PUTTY</name>
      <value>1</value>
      <docblock>
        <description>PuTTY formatted private key</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="183">
      <name>CRYPT_RSA_PRIVATE_FORMAT_XML</name>
      <value>2</value>
      <docblock>
        <description>XML formatted private key</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="204">
      <name>CRYPT_RSA_PUBLIC_FORMAT_RAW</name>
      <value>3</value>
      <docblock>
        <description>Raw public key</description>
        <long-description>&lt;p&gt;An array containing two Math_BigInteger objects.&lt;/p&gt;

&lt;p&gt;The exponent can be indexed with any of the following:&lt;/p&gt;

&lt;p&gt;0, e, exponent, publicExponent&lt;/p&gt;

&lt;p&gt;The modulus can be indexed with any of the following:&lt;/p&gt;

&lt;p&gt;1, n, modulo, modulus&lt;/p&gt;
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="208">
      <name>CRYPT_RSA_PUBLIC_FORMAT_PKCS1</name>
      <value>4</value>
      <docblock>
        <description>PKCS#1 formatted public key</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="212">
      <name>CRYPT_RSA_PUBLIC_FORMAT_XML</name>
      <value>5</value>
      <docblock>
        <description>XML formatted public key</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="218">
      <name>CRYPT_RSA_PUBLIC_FORMAT_OPENSSH</name>
      <value>6</value>
      <docblock>
        <description>OpenSSH formatted public key</description>
        <long-description>&lt;p&gt;Place in $HOME/.ssh/authorized_keys&lt;/p&gt;
</long-description>
      </docblock>
    </constant>
    <class final="false" abstract="false" line="230" namespace="default">
      <name>Crypt_RSA</name>
      <extends/>
      <full_name>\Crypt_RSA</full_name>
      <docblock>
        <description>Pure-PHP PKCS#1 compliant implementation of RSA.</description>
        <long-description>
</long-description>
        <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;" line="221"/>
        <tag name="version" description="0.1.0" line="221"/>
        <tag name="access" description="public" line="221"/>
        <tag name="package" description="Crypt" line="221"/>
        <tag name="subpackage" description="Crypt_RSA" line="221"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="237">
        <name>$zero</name>
        <default/>
        <docblock>
          <description>Precomputed Zero</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Array" line="231">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="231"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="245">
        <name>$one</name>
        <default/>
        <docblock>
          <description>Precomputed One</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Array" line="239">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="239"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="253">
        <name>$privateKeyFormat</name>
        <default>CRYPT_RSA_PRIVATE_FORMAT_PKCS1</default>
        <docblock>
          <description>Private Key Format</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Integer" line="247">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="247"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="261">
        <name>$publicKeyFormat</name>
        <default>CRYPT_RSA_PUBLIC_FORMAT_PKCS1</default>
        <docblock>
          <description>Public Key Format</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Integer" line="255">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="public" line="255"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="269">
        <name>$modulus</name>
        <default/>
        <docblock>
          <description>Modulus (ie. n)</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="\Math_BigInteger" line="263">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="private" line="263"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="277">
        <name>$k</name>
        <default/>
        <docblock>
          <description>Modulus length</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="\Math_BigInteger" line="271">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="private" line="271"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="285">
        <name>$exponent</name>
        <default/>
        <docblock>
          <description>Exponent (ie. e or d)</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="\Math_BigInteger" line="279">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="private" line="279"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="293">
        <name>$primes</name>
        <default/>
        <docblock>
          <description>Primes for Chinese Remainder Theorem (ie. p and q)</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Array" line="287">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="287"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="301">
        <name>$exponents</name>
        <default/>
        <docblock>
          <description>Exponents for Chinese Remainder Theorem (ie. dP and dQ)</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Array" line="295">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="295"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="309">
        <name>$coefficients</name>
        <default/>
        <docblock>
          <description>Coefficients for Chinese Remainder Theorem (ie. qInv)</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Array" line="303">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="303"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="317">
        <name>$hashName</name>
        <default/>
        <docblock>
          <description>Hash name</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="String" line="311">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="311"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="325">
        <name>$hash</name>
        <default/>
        <docblock>
          <description>Hash function</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="\Crypt_Hash" line="319">
            <type by_reference="false">\Crypt_Hash</type>
          </tag>
          <tag name="access" description="private" line="319"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="333">
        <name>$hLen</name>
        <default/>
        <docblock>
          <description>Length of hash function output</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Integer" line="327">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="327"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="341">
        <name>$sLen</name>
        <default/>
        <docblock>
          <description>Length of salt</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Integer" line="335">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="335"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="349">
        <name>$mgfHash</name>
        <default/>
        <docblock>
          <description>Hash function for the Mask Generation Function</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="\Crypt_Hash" line="343">
            <type by_reference="false">\Crypt_Hash</type>
          </tag>
          <tag name="access" description="private" line="343"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="357">
        <name>$mgfHLen</name>
        <default/>
        <docblock>
          <description>Length of MGF hash function output</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Integer" line="351">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="351"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="365">
        <name>$encryptionMode</name>
        <default>CRYPT_RSA_ENCRYPTION_OAEP</default>
        <docblock>
          <description>Encryption mode</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Integer" line="359">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="359"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="373">
        <name>$signatureMode</name>
        <default>CRYPT_RSA_SIGNATURE_PSS</default>
        <docblock>
          <description>Signature mode</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Integer" line="367">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="367"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="381">
        <name>$publicExponent</name>
        <default>false</default>
        <docblock>
          <description>Public Exponent</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Mixed" line="375">
            <type by_reference="false">Mixed</type>
          </tag>
          <tag name="access" description="private" line="375"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="389">
        <name>$password</name>
        <default/>
        <docblock>
          <description>Password</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="String" line="383">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="383"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="401">
        <name>$components</name>
        <default>array</default>
        <docblock>
          <description>Components</description>
          <long-description>&lt;p&gt;For use with parsing XML formatted keys.  PHP's XML Parser functions use utilized - instead of PHP's DOM functions -
because PHP's XML Parser functions work on PHP4 whereas PHP's DOM functions - although surperior - don't.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_RSA::_start_element_handler()" line="391"/>
          <tag name="var" description="" type="Array" line="391">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="391"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="413">
        <name>$current</name>
        <default/>
        <docblock>
          <description>Current String</description>
          <long-description>&lt;p&gt;For use with parsing XML formatted keys.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_RSA::_character_handler()" line="403"/>
          <tag name="see" description="Crypt_RSA::_stop_element_handler()" line="403"/>
          <tag name="var" description="" type="Mixed" line="403">
            <type by_reference="false">Mixed</type>
          </tag>
          <tag name="access" description="private" line="403"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="425">
        <name>Crypt_RSA</name>
        <docblock>
          <description>The constructor</description>
          <long-description>&lt;p&gt;If you want to make use of the openssl extension, you'll need to set the mode manually, yourself.  The reason
Crypt_RSA doesn't do it is because OpenSSL doesn't fail gracefully.  openssl_pkey_new(), in particular, requires
openssl.cnf be present somewhere and, unfortunately, the only real way to find out is too late.&lt;/p&gt;
</long-description>
          <tag name="return" description="" type="\Crypt_RSA" line="415">
            <type by_reference="false">\Crypt_RSA</type>
          </tag>
          <tag name="access" description="public" line="415"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="461">
        <name>createKey</name>
        <docblock>
          <description>Create public / private key pair</description>
          <long-description>&lt;p&gt;Returns an array with the following three elements:
 - 'privatekey': The private key.
 - 'publickey':  The public key.
 - 'partialkey': A partially computed key (if the execution time exceeded $timeout).
                 Will need to be passed back to Crypt_RSA::createKey() as the third parameter for further processing.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="447"/>
          <tag name="param" description="Integer $bits" type="\optional" variable="$bits" line="447">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="Integer $timeout" type="\optional" variable="$timeout" line="447">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="Math_BigInteger $p" type="\optional" variable="$partial" line="447">
            <type by_reference="false">\optional</type>
          </tag>
        </docblock>
        <argument line="461">
          <name>$bits</name>
          <default>1024</default>
          <type/>
        </argument>
        <argument line="461">
          <name>$timeout</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="461">
          <name>$partial</name>
          <default>array</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="634">
        <name>_convertPrivateKey</name>
        <docblock>
          <description>Convert a private key to the appropriate format.</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="626"/>
          <tag name="see" description="setPrivateKeyFormat()" line="626"/>
          <tag name="param" description="" type="String" variable="$RSAPrivateKey" line="626">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="626">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="634">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
        <argument line="634">
          <name>$e</name>
          <default/>
          <type/>
        </argument>
        <argument line="634">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
        <argument line="634">
          <name>$primes</name>
          <default/>
          <type/>
        </argument>
        <argument line="634">
          <name>$exponents</name>
          <default/>
          <type/>
        </argument>
        <argument line="634">
          <name>$coefficients</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="715">
        <name>_convertPublicKey</name>
        <docblock>
          <description>Convert a public key to the appropriate format</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="707"/>
          <tag name="see" description="setPublicKeyFormat()" line="707"/>
          <tag name="param" description="" type="String" variable="$RSAPrivateKey" line="707">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="707">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="715">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
        <argument line="715">
          <name>$e</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="766">
        <name>_parseKey</name>
        <docblock>
          <description>Break a public or private key down into its constituant components</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="756"/>
          <tag name="see" description="_convertPublicKey()" line="756"/>
          <tag name="see" description="_convertPrivateKey()" line="756"/>
          <tag name="param" description="" type="String" variable="$key" line="756">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$type" line="756">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="Array" line="756">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="766">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="766">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1089">
        <name>_start_element_handler</name>
        <docblock>
          <description>Start Element Handler</description>
          <long-description>&lt;p&gt;Called by xml_set_element_handler()&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1079"/>
          <tag name="param" description="" type="Resource" variable="$parser" line="1079">
            <type by_reference="false">Resource</type>
          </tag>
          <tag name="param" description="" type="String" variable="$name" line="1079">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$attribs" line="1079">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="1089">
          <name>$parser</name>
          <default/>
          <type/>
        </argument>
        <argument line="1089">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="1089">
          <name>$attribs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1132">
        <name>_stop_element_handler</name>
        <docblock>
          <description>Stop Element Handler</description>
          <long-description>&lt;p&gt;Called by xml_set_element_handler()&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1123"/>
          <tag name="param" description="" type="Resource" variable="$parser" line="1123">
            <type by_reference="false">Resource</type>
          </tag>
          <tag name="param" description="" type="String" variable="$name" line="1123">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1132">
          <name>$parser</name>
          <default/>
          <type/>
        </argument>
        <argument line="1132">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1150">
        <name>_data_handler</name>
        <docblock>
          <description>Data Handler</description>
          <long-description>&lt;p&gt;Called by xml_set_character_data_handler()&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1141"/>
          <tag name="param" description="" type="Resource" variable="$parser" line="1141">
            <type by_reference="false">Resource</type>
          </tag>
          <tag name="param" description="" type="String" variable="$data" line="1141">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1150">
          <name>$parser</name>
          <default/>
          <type/>
        </argument>
        <argument line="1150">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1167">
        <name>loadKey</name>
        <docblock>
          <description>Loads a public or private key</description>
          <long-description>&lt;p&gt;Returns true on success and false on failure (ie. an incorrect password was provided or the key was malformed)&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="1158"/>
          <tag name="param" description="" type="String" variable="$key" line="1158">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="optional" type="Integer" variable="$type" line="1158">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="1167">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="1167">
          <name>$type</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1221">
        <name>setPassword</name>
        <docblock>
          <description>Sets the password</description>
          <long-description>&lt;p&gt;Private keys can be encrypted with a password.  To unset the password, pass in the empty string or false.
Or rather, pass in $password such that empty($password) is true.&lt;/p&gt;
</long-description>
          <tag name="see" description="createKey()" line="1210"/>
          <tag name="see" description="loadKey()" line="1210"/>
          <tag name="access" description="public" line="1210"/>
          <tag name="param" description="" type="String" variable="$password" line="1210">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1221">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1245">
        <name>setPublicKey</name>
        <docblock>
          <description>Defines the public key</description>
          <long-description>&lt;p&gt;Some private key formats define the public exponent and some don't.  Those that don't define it are problematic when
used in certain contexts.  For example, in SSH-2, RSA authentication works by sending the public key along with a
message signed by the private key to the server.  The SSH-2 server looks the public key up in an index of public keys
and if it's present then proceeds to verify the signature.  Problem is, if your private key doesn't include the public
exponent this won't work unless you manually add the public exponent.&lt;/p&gt;

&lt;p&gt;Do note that when a new key is loaded the index will be cleared.&lt;/p&gt;

&lt;p&gt;Returns true on success, false on failure&lt;/p&gt;
</long-description>
          <tag name="see" description="getPublicKey()" line="1226"/>
          <tag name="access" description="public" line="1226"/>
          <tag name="param" description="" type="String" variable="$key" line="1226">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="optional" type="Integer" variable="$type" line="1226">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="Boolean" line="1226">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="1245">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="1245">
          <name>$type</name>
          <default>CRYPT_RSA_PUBLIC_FORMAT_PKCS1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1271">
        <name>getPublicKey</name>
        <docblock>
          <description>Returns the public key</description>
          <long-description>&lt;p&gt;The public key is only returned under two circumstances - if the private key had the public key embedded within it
or if the public key was set via setPublicKey().  If the currently loaded key is supposed to be the public key this
function won't return it since this library, for the most part, doesn't distinguish between public and private keys.&lt;/p&gt;
</long-description>
          <tag name="see" description="getPublicKey()" line="1259"/>
          <tag name="access" description="public" line="1259"/>
          <tag name="param" description="" type="String" variable="$key" line="1259">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="optional" type="Integer" variable="$type" line="1259">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="1271">
          <name>$type</name>
          <default>CRYPT_RSA_PUBLIC_FORMAT_PKCS1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1293">
        <name>setPrivateKey</name>
        <docblock>
          <description>Defines the private key</description>
          <long-description>
</long-description>
          <tag name="see" description="setPrivateKey()" line="1284"/>
          <tag name="access" description="public" line="1284"/>
          <tag name="param" description="" type="String" variable="$key" line="1284">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="optional" type="Integer" variable="$type" line="1284">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="Boolean" line="1284">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="1293">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="1293">
          <name>$type</name>
          <default>CRYPT_RSA_PUBLIC_FORMAT_PKCS1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1315">
        <name>getPrivateKey</name>
        <docblock>
          <description>Returns the private key</description>
          <long-description>
</long-description>
          <tag name="see" description="getPrivateKey()" line="1308"/>
          <tag name="access" description="public" line="1308"/>
          <tag name="param" description="" type="String" variable="$key" line="1308">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1335">
        <name>_generateMinMax</name>
        <docblock>
          <description>Generates the smallest and largest numbers requiring $bits bits</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="1328"/>
          <tag name="param" description="" type="Integer" variable="$bits" line="1328">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="Array" line="1328">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="1335">
          <name>$bits</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1364">
        <name>_decodeLength</name>
        <docblock>
          <description>DER-decode the length</description>
          <long-description>&lt;p&gt;DER supports lengths up to (2&lt;strong&gt;8)&lt;/strong&gt;127, however, we'll only support lengths up to (2&lt;strong&gt;8)&lt;/strong&gt;4.  See
{@link http://itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf#p=13 X.690 &#xFFFD; 8.1.3} for more information.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1354"/>
          <tag name="param" description="" type="String" variable="$string" line="1354">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="Integer" line="1354">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="1364">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1385">
        <name>_encodeLength</name>
        <docblock>
          <description>DER-encode the length</description>
          <long-description>&lt;p&gt;DER supports lengths up to (2&lt;strong&gt;8)&lt;/strong&gt;127, however, we'll only support lengths up to (2&lt;strong&gt;8)&lt;/strong&gt;4.  See
{@link http://itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf#p=13 X.690 &#xFFFD; 8.1.3} for more information.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1375"/>
          <tag name="param" description="" type="Integer" variable="$length" line="1375">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="String" line="1375">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1385">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1405">
        <name>_string_shift</name>
        <docblock>
          <description>String Shift</description>
          <long-description>&lt;p&gt;Inspired by array_shift&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="String" variable="$string" line="1395">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="Integer $index" type="\optional" variable="$index" line="1395">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="String" line="1395">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="1395"/>
        </docblock>
        <argument line="1405">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="1405">
          <name>$index</name>
          <default>1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1419">
        <name>setPrivateKeyFormat</name>
        <docblock>
          <description>Determines the private key format</description>
          <long-description>
</long-description>
          <tag name="see" description="createKey()" line="1412"/>
          <tag name="access" description="public" line="1412"/>
          <tag name="param" description="" type="Integer" variable="$format" line="1412">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="1419">
          <name>$format</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1431">
        <name>setPublicKeyFormat</name>
        <docblock>
          <description>Determines the public key format</description>
          <long-description>
</long-description>
          <tag name="see" description="createKey()" line="1424"/>
          <tag name="access" description="public" line="1424"/>
          <tag name="param" description="" type="Integer" variable="$format" line="1424">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="1431">
          <name>$format</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1445">
        <name>setHash</name>
        <docblock>
          <description>Determines which hashing function should be used</description>
          <long-description>&lt;p&gt;Used with signature production / verification and (if the encryption mode is CRYPT_RSA_ENCRYPTION_OAEP) encryption and
decryption.  If $hash isn't supported, sha1 is used.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="1436"/>
          <tag name="param" description="" type="String" variable="$hash" line="1436">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1445">
          <name>$hash</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1474">
        <name>setMGFHash</name>
        <docblock>
          <description>Determines which hashing function should be used for the mask generation function</description>
          <long-description>&lt;p&gt;The mask generation function is used by CRYPT_RSA_ENCRYPTION_OAEP and CRYPT_RSA_SIGNATURE_PSS and although it's
best if Hash and MGFHash are set to the same thing this is not a requirement.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="1465"/>
          <tag name="param" description="" type="String" variable="$hash" line="1465">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1474">
          <name>$hash</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1503">
        <name>setSaltLength</name>
        <docblock>
          <description>Determines the salt length</description>
          <long-description>&lt;p&gt;To quote from {@link http://tools.ietf.org/html/rfc3447#page-38 RFC3447#page-38}:&lt;/p&gt;

&lt;p&gt;Typical salt lengths in octets are hLen (the length of the output
   of the hash function Hash) and 0.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="1492"/>
          <tag name="param" description="" type="Integer" variable="$format" line="1492">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="1503">
          <name>$sLen</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1516">
        <name>_random</name>
        <docblock>
          <description>Generates a random string x bytes long</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="1508"/>
          <tag name="param" description="" type="Integer" variable="$bytes" line="1508">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="param" description="Integer $nonzero" type="\optional" variable="$nonzero" line="1508">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="String" line="1508">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1516">
          <name>$bytes</name>
          <default/>
          <type/>
        </argument>
        <argument line="1516">
          <name>$nonzero</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1543">
        <name>_i2osp</name>
        <docblock>
          <description>Integer-to-Octet-String primitive</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-4.1 RFC3447#section-4.1}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1533"/>
          <tag name="param" description="" type="\Math_BigInteger" variable="$x" line="1533">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$xLen" line="1533">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="String" line="1533">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1543">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="1543">
          <name>$xLen</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1562">
        <name>_os2ip</name>
        <docblock>
          <description>Octet-String-to-Integer primitive</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-4.2 RFC3447#section-4.2}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1553"/>
          <tag name="param" description="" type="String" variable="$x" line="1553">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="1553">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="1562">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1576">
        <name>_exponentiate</name>
        <docblock>
          <description>Exponentiate with or without Chinese Remainder Theorem</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-5.1.1 RFC3447#section-5.1.2}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1567"/>
          <tag name="param" description="" type="\Math_BigInteger" variable="$x" line="1567">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="1567">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="1576">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1657">
        <name>_blind</name>
        <docblock>
          <description>Performs RSA Blinding</description>
          <long-description>&lt;p&gt;Protects against timing attacks by employing RSA Blinding.
Returns $x-&gt;modPow($this-&gt;exponents[$i], $this-&gt;primes[$i])&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1645"/>
          <tag name="param" description="" type="\Math_BigInteger" variable="$x" line="1645">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="" type="\Math_BigInteger" variable="$r" line="1645">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$i" line="1645">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="1645">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="1657">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="1657">
          <name>$r</name>
          <default/>
          <type/>
        </argument>
        <argument line="1657">
          <name>$i</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1678">
        <name>_rsaep</name>
        <docblock>
          <description>RSAEP</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-5.1.1 RFC3447#section-5.1.1}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1669"/>
          <tag name="param" description="" type="\Math_BigInteger" variable="$m" line="1669">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="1669">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="1678">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1696">
        <name>_rsadp</name>
        <docblock>
          <description>RSADP</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-5.1.2 RFC3447#section-5.1.2}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1687"/>
          <tag name="param" description="" type="\Math_BigInteger" variable="$c" line="1687">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="1687">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="1696">
          <name>$c</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1714">
        <name>_rsasp1</name>
        <docblock>
          <description>RSASP1</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-5.2.1 RFC3447#section-5.2.1}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1705"/>
          <tag name="param" description="" type="\Math_BigInteger" variable="$m" line="1705">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="1705">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="1714">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1732">
        <name>_rsavp1</name>
        <docblock>
          <description>RSAVP1</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-5.2.2 RFC3447#section-5.2.2}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1723"/>
          <tag name="param" description="" type="\Math_BigInteger" variable="$s" line="1723">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="1723">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="1732">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1751">
        <name>_mgf1</name>
        <docblock>
          <description>MGF1</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#appendix-B.2.1 RFC3447#appendix-B.2.1}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1741"/>
          <tag name="param" description="" type="String" variable="$mgfSeed" line="1741">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$mgfLen" line="1741">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="String" line="1741">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1751">
          <name>$mgfSeed</name>
          <default/>
          <type/>
        </argument>
        <argument line="1751">
          <name>$maskLen</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1776">
        <name>_rsaes_oaep_encrypt</name>
        <docblock>
          <description>RSAES-OAEP-ENCRYPT</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-7.1.1 RFC3447#section-7.1.1} and
{http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding OAES}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1765"/>
          <tag name="param" description="" type="String" variable="$m" line="1765">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="String" variable="$l" line="1765">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="1765">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1776">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
        <argument line="1776">
          <name>$l</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1839">
        <name>_rsaes_oaep_decrypt</name>
        <docblock>
          <description>RSAES-OAEP-DECRYPT</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-7.1.2 RFC3447#section-7.1.2}.  The fact that the error
messages aren't distinguishable from one another hinders debugging, but, to quote from RFC3447#section-7.1.2:&lt;/p&gt;

&lt;p&gt;Note.  Care must be taken to ensure that an opponent cannot
   distinguish the different error conditions in Step 3.g, whether by
   error message or timing, or, more generally, learn partial
   information about the encoded message EM.  Otherwise an opponent may
   be able to obtain useful information about the decryption of the
   ciphertext C, leading to a chosen-ciphertext attack such as the one
   observed by Manger [36].&lt;/p&gt;

&lt;p&gt;As for $l...  to quote from {@link http://tools.ietf.org/html/rfc3447#page-17 RFC3447#page-17}:&lt;/p&gt;

&lt;p&gt;Both the encryption and the decryption operations of RSAES-OAEP take
   the value of a label L as input.  In this version of PKCS #1, L is
   the empty string; other uses of the label are outside the scope of
   this document.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1813"/>
          <tag name="param" description="" type="String" variable="$c" line="1813">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="String" variable="$l" line="1813">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="1813">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1839">
          <name>$c</name>
          <default/>
          <type/>
        </argument>
        <argument line="1839">
          <name>$l</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1897">
        <name>_rsaes_pkcs1_v1_5_encrypt</name>
        <docblock>
          <description>RSAES-PKCS1-V1_5-ENCRYPT</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-7.2.1 RFC3447#section-7.2.1}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1888"/>
          <tag name="param" description="" type="String" variable="$m" line="1888">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="1888">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1897">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1943">
        <name>_rsaes_pkcs1_v1_5_decrypt</name>
        <docblock>
          <description>RSAES-PKCS1-V1_5-DECRYPT</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-7.2.2 RFC3447#section-7.2.2}.&lt;/p&gt;

&lt;p&gt;For compatability purposes, this function departs slightly from the description given in RFC3447.
The reason being that RFC2313#section-8.1 (PKCS#1 v1.5) states that ciphertext's encrypted by the
private key should have the second byte set to either 0 or 1 and that ciphertext's encrypted by the
public key should have the second byte set to 2.  In RFC3447 (PKCS#1 v2.1), the second byte is supposed
to be 2 regardless of which key is used.  for compatability purposes, we'll just check to make sure the
second byte is 2 or less.  If it is, we'll accept the decrypted string as valid.&lt;/p&gt;

&lt;p&gt;As a consequence of this, a private key encrypted ciphertext produced with Crypt_RSA may not decrypt
with a strictly PKCS#1 v1.5 compliant RSA implementation.  Public key encrypted ciphertext's should but
not private key encrypted ciphertext's.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1923"/>
          <tag name="param" description="" type="String" variable="$c" line="1923">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="1923">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="1943">
          <name>$c</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1992">
        <name>_emsa_pss_encode</name>
        <docblock>
          <description>EMSA-PSS-ENCODE</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-9.1.1 RFC3447#section-9.1.1}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="1983"/>
          <tag name="param" description="" type="String" variable="$m" line="1983">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$emBits" line="1983">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="1992">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
        <argument line="1992">
          <name>$emBits</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2029">
        <name>_emsa_pss_verify</name>
        <docblock>
          <description>EMSA-PSS-VERIFY</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-9.1.2 RFC3447#section-9.1.2}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="2018"/>
          <tag name="param" description="" type="String" variable="$m" line="2018">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="String" variable="$em" line="2018">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$emBits" line="2018">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="String" line="2018">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="2029">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
        <argument line="2029">
          <name>$em</name>
          <default/>
          <type/>
        </argument>
        <argument line="2029">
          <name>$emBits</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2074">
        <name>_rsassa_pss_sign</name>
        <docblock>
          <description>RSASSA-PSS-SIGN</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-8.1.1 RFC3447#section-8.1.1}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="2065"/>
          <tag name="param" description="" type="String" variable="$m" line="2065">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="2065">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="2074">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2101">
        <name>_rsassa_pss_verify</name>
        <docblock>
          <description>RSASSA-PSS-VERIFY</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-8.1.2 RFC3447#section-8.1.2}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="2091"/>
          <tag name="param" description="" type="String" variable="$m" line="2091">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="String" variable="$s" line="2091">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="2091">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="2101">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
        <argument line="2101">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2141">
        <name>_emsa_pkcs1_v1_5_encode</name>
        <docblock>
          <description>EMSA-PKCS1-V1_5-ENCODE</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-9.2 RFC3447#section-9.2}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="2131"/>
          <tag name="param" description="" type="String" variable="$m" line="2131">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$emLen" line="2131">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="String" line="2131">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="2141">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
        <argument line="2141">
          <name>$emLen</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2192">
        <name>_rsassa_pkcs1_v1_5_sign</name>
        <docblock>
          <description>RSASSA-PKCS1-V1_5-SIGN</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-8.2.1 RFC3447#section-8.2.1}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="2183"/>
          <tag name="param" description="" type="String" variable="$m" line="2183">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="2183">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="2192">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2220">
        <name>_rsassa_pkcs1_v1_5_verify</name>
        <docblock>
          <description>RSASSA-PKCS1-V1_5-VERIFY</description>
          <long-description>&lt;p&gt;See {@link http://tools.ietf.org/html/rfc3447#section-8.2.2 RFC3447#section-8.2.2}.&lt;/p&gt;
</long-description>
          <tag name="access" description="private" line="2211"/>
          <tag name="param" description="" type="String" variable="$m" line="2211">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="2211">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="2220">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
        <argument line="2220">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2264">
        <name>setEncryptionMode</name>
        <docblock>
          <description>Set Encryption Mode</description>
          <long-description>&lt;p&gt;Valid values include CRYPT_RSA_ENCRYPTION_OAEP and CRYPT_RSA_ENCRYPTION_PKCS1.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="2256"/>
          <tag name="param" description="" type="Integer" variable="$mode" line="2256">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="2264">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2277">
        <name>setSignatureMode</name>
        <docblock>
          <description>Set Signature Mode</description>
          <long-description>&lt;p&gt;Valid values include CRYPT_RSA_SIGNATURE_PSS and CRYPT_RSA_SIGNATURE_PKCS1&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="2269"/>
          <tag name="param" description="" type="Integer" variable="$mode" line="2269">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="2277">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2294">
        <name>encrypt</name>
        <docblock>
          <description>Encryption</description>
          <long-description>&lt;p&gt;Both CRYPT_RSA_ENCRYPTION_OAEP and CRYPT_RSA_ENCRYPTION_PKCS1 both place limits on how long $plaintext can be.
If $plaintext exceeds those limits it will be broken up so that it does and the resultant ciphertext's will
be concatenated together.&lt;/p&gt;
</long-description>
          <tag name="see" description="decrypt()" line="2282"/>
          <tag name="access" description="public" line="2282"/>
          <tag name="param" description="" type="String" variable="$plaintext" line="2282">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="2282">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="2294">
          <name>$plaintext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2333">
        <name>decrypt</name>
        <docblock>
          <description>Decryption</description>
          <long-description>
</long-description>
          <tag name="see" description="encrypt()" line="2325"/>
          <tag name="access" description="public" line="2325"/>
          <tag name="param" description="" type="String" variable="$plaintext" line="2325">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="2325">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="2333">
          <name>$ciphertext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2370">
        <name>sign</name>
        <docblock>
          <description>Create a signature</description>
          <long-description>
</long-description>
          <tag name="see" description="verify()" line="2362"/>
          <tag name="access" description="public" line="2362"/>
          <tag name="param" description="" type="String" variable="$message" line="2362">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="String" line="2362">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="2370">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2394">
        <name>verify</name>
        <docblock>
          <description>Verifies a signature</description>
          <long-description>
</long-description>
          <tag name="see" description="sign()" line="2385"/>
          <tag name="access" description="public" line="2385"/>
          <tag name="param" description="" type="String" variable="$message" line="2385">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="" type="String" variable="$signature" line="2385">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="Boolean" line="2385">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="2394">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="2394">
          <name>$signature</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\Crypt\TripleDES.php" hash="84ae479b4517be07993e8d66725471ae">
    <docblock>
      <description>Pure-PHP implementation of Triple DES.</description>
      <long-description>&lt;p&gt;Uses mcrypt, if available, and an internal implementation, otherwise.  Operates in the EDE3 mode (encrypt-decrypt-encrypt).&lt;/p&gt;

&lt;p&gt;PHP versions 4 and 5&lt;/p&gt;

&lt;p&gt;Here's a short example of how to use this library:
&lt;code&gt;
&lt;?php
   include('Crypt/TripleDES.php');

   $des = new Crypt_TripleDES();

   $des-&gt;setKey('abcdefghijklmnopqrstuvwx');

   $size = 10 * 1024;
   $plaintext = '';
   for ($i = 0; $i &lt; $size; $i++) {
       $plaintext.= 'a';
   }

   echo $des-&gt;decrypt($des-&gt;encrypt($plaintext));
?&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Crypt"/>
      <tag name="subpackage" description="Crypt_TripleDES"/>
      <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;"/>
      <tag name="copyright" description="MMVII Jim Wigginton"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
      <tag name="version" description="$Id: TripleDES.php,v 1.13 2010/02/26 03:40:25 terrafrost Exp $"/>
      <tag name="link" description="http://phpseclib.sourceforge.net" link="http://phpseclib.sourceforge.net"/>
    </docblock>
    <include type="Require Once" line="60">
      <name>lib/Crypt/DES.php</name>
    </include>
    <constant namespace="default" line="67">
      <name>CRYPT_DES_MODE_3CBC</name>
      <value>-2</value>
      <docblock>
        <description>Encrypt / decrypt using inner chaining</description>
        <long-description>&lt;p&gt;Inner chaining is used by SSH-1 and is generally considered to be less secure then outer chaining (CRYPT_DES_MODE_CBC3).&lt;/p&gt;
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="74">
      <name>CRYPT_DES_MODE_CBC3</name>
      <value>CRYPT_DES_MODE_CBC</value>
      <docblock>
        <description>Encrypt / decrypt using outer chaining</description>
        <long-description>&lt;p&gt;Outer chaining is used by SSH-2 and when the mode is set to CRYPT_DES_MODE_CBC.&lt;/p&gt;
</long-description>
      </docblock>
    </constant>
    <class final="false" abstract="false" line="85" namespace="default">
      <name>Crypt_TripleDES</name>
      <extends/>
      <full_name>\Crypt_TripleDES</full_name>
      <docblock>
        <description>Pure-PHP implementation of Triple DES.</description>
        <long-description>
</long-description>
        <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;" line="76"/>
        <tag name="version" description="0.1.0" line="76"/>
        <tag name="access" description="public" line="76"/>
        <tag name="package" description="Crypt" line="76"/>
        <tag name="subpackage" description="Crypt_TripleDES" line="76"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="93">
        <name>$key</name>
        <default>\0\0\0\0\0\0\0\0</default>
        <docblock>
          <description>The Three Keys</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::setKey()" line="86"/>
          <tag name="var" description="" type="String" line="86">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="86"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="102">
        <name>$mode</name>
        <default>CRYPT_DES_MODE_CBC</default>
        <docblock>
          <description>The Encryption Mode</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::Crypt_TripleDES()" line="95"/>
          <tag name="var" description="" type="Integer" line="95">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="95"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="111">
        <name>$continuousBuffer</name>
        <default>false</default>
        <docblock>
          <description>Continuous Buffer status</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::enableContinuousBuffer()" line="104"/>
          <tag name="var" description="" type="Boolean" line="104">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="104"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="120">
        <name>$padding</name>
        <default>true</default>
        <docblock>
          <description>Padding status</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::enablePadding()" line="113"/>
          <tag name="var" description="" type="Boolean" line="113">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="113"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="129">
        <name>$iv</name>
        <default>\0\0\0\0\0\0\0\0</default>
        <docblock>
          <description>The Initialization Vector</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::setIV()" line="122"/>
          <tag name="var" description="" type="String" line="122">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="122"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="138">
        <name>$encryptIV</name>
        <default>\0\0\0\0\0\0\0\0</default>
        <docblock>
          <description>A "sliding" Initialization Vector</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::enableContinuousBuffer()" line="131"/>
          <tag name="var" description="" type="String" line="131">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="131"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="147">
        <name>$decryptIV</name>
        <default>\0\0\0\0\0\0\0\0</default>
        <docblock>
          <description>A "sliding" Initialization Vector</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::enableContinuousBuffer()" line="140"/>
          <tag name="var" description="" type="String" line="140">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="140"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="155">
        <name>$des</name>
        <default/>
        <docblock>
          <description>The Crypt_DES objects</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Array" line="149">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="149"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="167">
        <name>$enmcrypt</name>
        <default/>
        <docblock>
          <description>mcrypt resource for encryption</description>
          <long-description>&lt;p&gt;The mcrypt resource can be recreated every time something needs to be created or it can be created just once.
Since mcrypt operates in continuous mode, by default, it'll need to be recreated when in non-continuous mode.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_TripleDES::encrypt()" line="157"/>
          <tag name="var" description="" type="String" line="157">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="157"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="179">
        <name>$demcrypt</name>
        <default/>
        <docblock>
          <description>mcrypt resource for decryption</description>
          <long-description>&lt;p&gt;The mcrypt resource can be recreated every time something needs to be created or it can be created just once.
Since mcrypt operates in continuous mode, by default, it'll need to be recreated when in non-continuous mode.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_TripleDES::decrypt()" line="169"/>
          <tag name="var" description="" type="String" line="169">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="169"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="189">
        <name>$enchanged</name>
        <default>true</default>
        <docblock>
          <description>Does the enmcrypt resource need to be (re)initialized?</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::setKey()" line="181"/>
          <tag name="see" description="Crypt_TripleDES::setIV()" line="181"/>
          <tag name="var" description="" type="Boolean" line="181">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="181"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="199">
        <name>$dechanged</name>
        <default>true</default>
        <docblock>
          <description>Does the demcrypt resource need to be (re)initialized?</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::setKey()" line="191"/>
          <tag name="see" description="Crypt_TripleDES::setIV()" line="191"/>
          <tag name="var" description="" type="Boolean" line="191">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="191"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="208">
        <name>$paddable</name>
        <default>false</default>
        <docblock>
          <description>Is the mode one that is paddable?</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::Crypt_TripleDES()" line="201"/>
          <tag name="var" description="" type="Boolean" line="201">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="201"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="217">
        <name>$enbuffer</name>
        <default/>
        <docblock>
          <description>Encryption buffer for CTR, OFB and CFB modes</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::encrypt()" line="210"/>
          <tag name="var" description="" type="String" line="210">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="210"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="226">
        <name>$debuffer</name>
        <default/>
        <docblock>
          <description>Decryption buffer for CTR, OFB and CFB modes</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::decrypt()" line="219"/>
          <tag name="var" description="" type="String" line="219">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="219"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="236">
        <name>$ecb</name>
        <default/>
        <docblock>
          <description>mcrypt resource for CFB mode</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::encrypt()" line="228"/>
          <tag name="see" description="Crypt_TripleDES::decrypt()" line="228"/>
          <tag name="var" description="" type="String" line="228">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="228"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="248">
        <name>Crypt_TripleDES</name>
        <docblock>
          <description>Default Constructor.</description>
          <long-description>&lt;p&gt;Determines whether or not the mcrypt extension should be used.  $mode should only, at present, be
CRYPT_DES_MODE_ECB or CRYPT_DES_MODE_CBC.  If not explictly set, CRYPT_DES_MODE_CBC will be used.&lt;/p&gt;
</long-description>
          <tag name="param" description="Integer $mode" type="\optional" variable="$mode" line="238">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="\Crypt_TripleDES" line="238">
            <type by_reference="false">\Crypt_TripleDES</type>
          </tag>
          <tag name="access" description="public" line="238"/>
        </docblock>
        <argument line="248">
          <name>$mode</name>
          <default>CRYPT_DES_MODE_CBC</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="345">
        <name>setKey</name>
        <docblock>
          <description>Sets the key.</description>
          <long-description>&lt;p&gt;Keys can be of any length.  Triple DES, itself, can use 128-bit (eg. strlen($key) == 16) or
192-bit (eg. strlen($key) == 24) keys.  This function pads and truncates $key as appropriate.&lt;/p&gt;

&lt;p&gt;DES also requires that every eighth bit be a parity bit, however, we'll ignore that.&lt;/p&gt;

&lt;p&gt;If the key is not explicitly set, it'll be assumed to be all zero's.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="332"/>
          <tag name="param" description="" type="String" variable="$key" line="332">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="345">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="376">
        <name>setIV</name>
        <docblock>
          <description>Sets the initialization vector. (optional)</description>
          <long-description>&lt;p&gt;SetIV is not required when CRYPT_DES_MODE_ECB is being used.  If not explictly set, it'll be assumed
to be all zero's.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="367"/>
          <tag name="param" description="" type="String" variable="$iv" line="367">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="376">
          <name>$iv</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="399">
        <name>_generate_xor</name>
        <docblock>
          <description>Generate CTR XOR encryption key</description>
          <long-description>&lt;p&gt;Encrypt the output of this and XOR it against the ciphertext / plaintext to get the
plaintext / ciphertext in CTR mode.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_TripleDES::decrypt()" line="387"/>
          <tag name="see" description="Crypt_TripleDES::encrypt()" line="387"/>
          <tag name="access" description="private" line="387"/>
          <tag name="param" description="" type="Integer" variable="$length" line="387">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="param" description="" type="String" variable="$iv" line="387">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="399">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
        <argument line="399">
          <name>$iv</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="431">
        <name>encrypt</name>
        <docblock>
          <description>Encrypts a message.</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="425"/>
          <tag name="param" description="" type="String" variable="$plaintext" line="425">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="431">
          <name>$plaintext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="638">
        <name>decrypt</name>
        <docblock>
          <description>Decrypts a message.</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="632"/>
          <tag name="param" description="" type="String" variable="$ciphertext" line="632">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="638">
          <name>$ciphertext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="877">
        <name>enableContinuousBuffer</name>
        <docblock>
          <description>Treat consecutive "packets" as if they are a continuous buffer.</description>
          <long-description>&lt;p&gt;Say you have a 16-byte plaintext $plaintext.  Using the default behavior, the two following code snippets
will yield different outputs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
   echo $des-&gt;encrypt(substr($plaintext, 0, 8));
   echo $des-&gt;encrypt(substr($plaintext, 8, 8));
&lt;/code&gt;
&lt;code&gt;
   echo $des-&gt;encrypt($plaintext);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The solution is to enable the continuous buffer.  Although this will resolve the above discrepancy, it creates
another, as demonstrated with the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
   $des-&gt;encrypt(substr($plaintext, 0, 8));
   echo $des-&gt;decrypt($des-&gt;encrypt(substr($plaintext, 8, 8)));
&lt;/code&gt;
&lt;code&gt;
   echo $des-&gt;decrypt($des-&gt;encrypt(substr($plaintext, 8, 8)));
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With the continuous buffer disabled, these would yield the same output.  With it enabled, they yield different
outputs.  The reason is due to the fact that the initialization vector's change after every encryption /
decryption round when the continuous buffer is enabled.  When it's disabled, they remain constant.&lt;/p&gt;

&lt;p&gt;Put another way, when the continuous buffer is enabled, the state of the Crypt_DES() object changes after each
encryption / decryption round, whereas otherwise, it'd remain constant.  For this reason, it's recommended that
continuous buffers not be used.  They do offer better security and are, in fact, sometimes required (SSH uses them),
however, they are also less intuitive and more likely to cause you problems.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_TripleDES::disableContinuousBuffer()" line="840"/>
          <tag name="access" description="public" line="840"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="895">
        <name>disableContinuousBuffer</name>
        <docblock>
          <description>Treat consecutive packets as if they are a discontinuous buffer.</description>
          <long-description>&lt;p&gt;The default behavior.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_TripleDES::enableContinuousBuffer()" line="887"/>
          <tag name="access" description="public" line="887"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="922">
        <name>enablePadding</name>
        <docblock>
          <description>Pad "packets".</description>
          <long-description>&lt;p&gt;DES works by encrypting eight bytes at a time.  If you ever need to encrypt or decrypt something that's not
a multiple of eight, it becomes necessary to pad the input so that it's length is a multiple of eight.&lt;/p&gt;

&lt;p&gt;Padding is enabled by default.  Sometimes, however, it is undesirable to pad strings.  Such is the case in SSH1,
where "packets" are padded with random bytes before being encrypted.  Unpad these packets and you risk stripping
away characters that shouldn't be stripped away. (SSH knows how many bytes are added because the length is
transmitted separately)&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_TripleDES::disablePadding()" line="908"/>
          <tag name="access" description="public" line="908"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="933">
        <name>disablePadding</name>
        <docblock>
          <description>Do not pad packets.</description>
          <long-description>
</long-description>
          <tag name="see" description="Crypt_TripleDES::enablePadding()" line="927"/>
          <tag name="access" description="public" line="927"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="950">
        <name>_pad</name>
        <docblock>
          <description>Pads a string</description>
          <long-description>&lt;p&gt;Pads a string using the RSA PKCS padding standards so that its length is a multiple of the blocksize (8).
8 - (strlen($text) &amp;amp; 7) bytes are added, each of which is equal to chr(8 - (strlen($text) &amp;amp; 7)&lt;/p&gt;

&lt;p&gt;If padding is disabled and $text is not a multiple of the blocksize, the string will be padded regardless
and padding will, hence forth, be enabled.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_TripleDES::_unpad()" line="938"/>
          <tag name="access" description="private" line="938"/>
        </docblock>
        <argument line="950">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="976">
        <name>_unpad</name>
        <docblock>
          <description>Unpads a string</description>
          <long-description>&lt;p&gt;If padding is enabled and the reported padding length is invalid the encryption key will be assumed to be wrong
and false will be returned.&lt;/p&gt;
</long-description>
          <tag name="see" description="Crypt_TripleDES::_pad()" line="967"/>
          <tag name="access" description="private" line="967"/>
        </docblock>
        <argument line="976">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1001">
        <name>_string_shift</name>
        <docblock>
          <description>String Shift</description>
          <long-description>&lt;p&gt;Inspired by array_shift&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="String" variable="$string" line="991">
            <type by_reference="false">String</type>
          </tag>
          <tag name="param" description="Integer $index" type="\optional" variable="$index" line="991">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="String" line="991">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="991"/>
        </docblock>
        <argument line="1001">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="1001">
          <name>$index</name>
          <default>1</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="lib\Math\BigInteger.php" hash="bdd2453d0b057dd009b6d7baa4de75b3">
    <docblock>
      <description>Pure-PHP arbitrary precision integer arithmetic library.</description>
      <long-description>&lt;p&gt;Supports base-2, base-10, base-16, and base-256 numbers.  Uses the GMP or BCMath extensions, if available,
and an internal implementation, otherwise.&lt;/p&gt;

&lt;p&gt;PHP versions 4 and 5&lt;/p&gt;

&lt;p&gt;{@internal (all DocBlock comments regarding implementation - such as the one that follows - refer to the
{@link MATH_BIGINTEGER_MODE_INTERNAL MATH_BIGINTEGER_MODE_INTERNAL} mode)&lt;/p&gt;

&lt;p&gt;Math_BigInteger uses base-2&lt;strong&gt;26 to perform operations such as multiplication and division and
base-2&lt;/strong&gt;52 (ie. two base 2&lt;strong&gt;26 digits) to perform addition and subtraction.  Because the largest possible
value when multiplying two base-2&lt;/strong&gt;26 numbers together is a base-2**52 number, double precision floating
point numbers - numbers that should be supported on most hardware and whose significand is 53 bits - are
used.  As a consequence, bitwise operators such as &gt;&gt; and &amp;lt;&amp;lt; cannot be used, nor can the modulo operator %,
which only supports integers.  Although this fact will slow this library down, the fact that such a high
base is being used should more than compensate.&lt;/p&gt;

&lt;p&gt;When PHP version 6 is officially released, we'll be able to use 64-bit integers.  This should, once again,
allow bitwise operators, and will increase the maximum possible base to 2&lt;strong&gt;31 (or 2&lt;/strong&gt;62 for addition /
subtraction).&lt;/p&gt;

&lt;p&gt;Numbers are stored in {@link http://en.wikipedia.org/wiki/Endianness little endian} format.  ie.
(new Math_BigInteger(pow(2, 26)))-&gt;value = array(0, 1)&lt;/p&gt;

&lt;p&gt;Useful resources are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{@link http://www.cacr.math.uwaterloo.ca/hac/about/chap14.pdf Handbook of Applied Cryptography (HAC)}&lt;/li&gt;
&lt;li&gt;{@link http://math.libtomcrypt.com/files/tommath.pdf Multi-Precision Math (MPM)}&lt;/li&gt;
&lt;li&gt;Java's BigInteger classes.  See /j2se/src/share/classes/java/math in jdk-1_5_0-src-jrl.zip&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example of how to use this library:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger(2);
   $b = new Math_BigInteger(3);

   $c = $a-&gt;add($b);

   echo $c-&gt;toString(); // outputs 5
?&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="Math"/>
      <tag name="subpackage" description="Math_BigInteger"/>
      <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;"/>
      <tag name="copyright" description="MMVI Jim Wigginton"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
      <tag name="version" description="$Id: BigInteger.php,v 1.33 2010/03/22 22:32:03 terrafrost Exp $"/>
      <tag name="link" description="http://pear.php.net/package/Math_BigInteger" link="http://pear.php.net/package/Math_BigInteger"/>
    </docblock>
    <constant namespace="default" line="87">
      <name>MATH_BIGINTEGER_MONTGOMERY</name>
      <value>0</value>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag name="see" description="Math_BigInteger::_montgomery()" line="83"/>
        <tag name="see" description="Math_BigInteger::_prepMontgomery()" line="83"/>
      </docblock>
    </constant>
    <constant namespace="default" line="91">
      <name>MATH_BIGINTEGER_BARRETT</name>
      <value>1</value>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag name="see" description="Math_BigInteger::_barrett()" line="88"/>
      </docblock>
    </constant>
    <constant namespace="default" line="95">
      <name>MATH_BIGINTEGER_POWEROF2</name>
      <value>2</value>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag name="see" description="Math_BigInteger::_mod2()" line="92"/>
      </docblock>
    </constant>
    <constant namespace="default" line="99">
      <name>MATH_BIGINTEGER_CLASSIC</name>
      <value>3</value>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag name="see" description="Math_BigInteger::_remainder()" line="96"/>
      </docblock>
    </constant>
    <constant namespace="default" line="103">
      <name>MATH_BIGINTEGER_NONE</name>
      <value>4</value>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag name="see" description="Math_BigInteger::__clone()" line="100"/>
      </docblock>
    </constant>
    <constant namespace="default" line="117">
      <name>MATH_BIGINTEGER_VALUE</name>
      <value>0</value>
      <docblock>
        <description>$result[MATH_BIGINTEGER_VALUE] contains the value.</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="121">
      <name>MATH_BIGINTEGER_SIGN</name>
      <value>1</value>
      <docblock>
        <description>$result[MATH_BIGINTEGER_SIGN] contains the sign.</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="134">
      <name>MATH_BIGINTEGER_VARIABLE</name>
      <value>0</value>
      <docblock>
        <description>Cache constants</description>
        <long-description>&lt;p&gt;$cache[MATH_BIGINTEGER_VARIABLE] tells us whether or not the cached data is still valid.&lt;/p&gt;
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="138">
      <name>MATH_BIGINTEGER_DATA</name>
      <value>1</value>
      <docblock>
        <description>$cache[MATH_BIGINTEGER_DATA] contains the cached data.</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="150">
      <name>MATH_BIGINTEGER_MODE_INTERNAL</name>
      <value>1</value>
      <docblock>
        <description>To use the pure-PHP implementation</description>
        <long-description>
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="156">
      <name>MATH_BIGINTEGER_MODE_BCMATH</name>
      <value>2</value>
      <docblock>
        <description>To use the BCMath library</description>
        <long-description>&lt;p&gt;(if enabled; otherwise, the internal implementation will be used)&lt;/p&gt;
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="162">
      <name>MATH_BIGINTEGER_MODE_GMP</name>
      <value>3</value>
      <docblock>
        <description>To use the GMP library</description>
        <long-description>&lt;p&gt;(if present; otherwise, either the BCMath or the internal implementation will be used)&lt;/p&gt;
</long-description>
      </docblock>
    </constant>
    <constant namespace="default" line="173">
      <name>MATH_BIGINTEGER_MAX_DIGIT52</name>
      <value>pow(2, 52)</value>
    </constant>
    <constant namespace="default" line="182">
      <name>MATH_BIGINTEGER_KARATSUBA_CUTOFF</name>
      <value>25</value>
      <docblock>
        <description>Karatsuba Cutoff</description>
        <long-description>&lt;p&gt;At what point do we switch between Karatsuba multiplication and schoolbook long multiplication?&lt;/p&gt;
</long-description>
        <tag name="access" description="private" line="175"/>
      </docblock>
    </constant>
    <class final="false" abstract="false" line="194" namespace="default">
      <name>Math_BigInteger</name>
      <extends/>
      <full_name>\Math_BigInteger</full_name>
      <docblock>
        <description>Pure-PHP arbitrary precision integer arithmetic library. Supports base-2, base-10, base-16, and base-256
numbers.</description>
        <long-description>
</long-description>
        <tag name="author" description="Jim Wigginton &amp;lt;terrafrost@php.net&amp;gt;" line="184"/>
        <tag name="version" description="1.0.0RC4" line="184"/>
        <tag name="access" description="public" line="184"/>
        <tag name="package" description="Math" line="184"/>
        <tag name="subpackage" description="Math_BigInteger" line="184"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="201">
        <name>$value</name>
        <default/>
        <docblock>
          <description>Holds the BigInteger's value.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Array" line="195">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="195"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="209">
        <name>$is_negative</name>
        <default>false</default>
        <docblock>
          <description>Holds the BigInteger's magnitude.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="Boolean" line="203">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="private" line="203"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="217">
        <name>$generator</name>
        <default>mt_rand</default>
        <docblock>
          <description>Random number generator function</description>
          <long-description>
</long-description>
          <tag name="see" description="setRandomGenerator()" line="211"/>
          <tag name="access" description="private" line="211"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="225">
        <name>$precision</name>
        <default/>
        <docblock>
          <description>Precision</description>
          <long-description>
</long-description>
          <tag name="see" description="setPrecision()" line="219"/>
          <tag name="access" description="private" line="219"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="233">
        <name>$bitmask</name>
        <default>false</default>
        <docblock>
          <description>Precision Bitmask</description>
          <long-description>
</long-description>
          <tag name="see" description="setPrecision()" line="227"/>
          <tag name="access" description="private" line="227"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="247">
        <name>$hex</name>
        <default/>
        <docblock>
          <description>Mode independant value used for serialization.</description>
          <long-description>&lt;p&gt;If the bcmath or gmp extensions are installed $this-&gt;value will be a non-serializable resource, hence the need for
a variable that'll be serializable regardless of whether or not extensions are being used.  Unlike $this-&gt;value,
however, $this-&gt;hex is only calculated when $this-&gt;__sleep() is called.&lt;/p&gt;
</long-description>
          <tag name="see" description="__sleep()" line="235"/>
          <tag name="see" description="__wakeup()" line="235"/>
          <tag name="var" description="" type="String" line="235">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="235"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="271">
        <name>Math_BigInteger</name>
        <docblock>
          <description>Converts base-2, base-10, base-16, and binary strings (eg. base-256) to BigIntegers.</description>
          <long-description>&lt;p&gt;If the second parameter - $base - is negative, then it will be assumed that the number's are encoded using
two's compliment.  The sole exception to this is -10, which is treated the same as 10 is.&lt;/p&gt;

&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger('0x32', 16); // 50 in base-16

   echo $a-&gt;toString(); // outputs 50
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="base-10 number or base-$base number if $base set." type="\optional" variable="$x" line="249">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="integer $base" type="\optional" variable="$base" line="249">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="249">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="249"/>
        </docblock>
        <argument line="271">
          <name>$x</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="271">
          <name>$base</name>
          <default>10</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="475">
        <name>toBytes</name>
        <docblock>
          <description>Converts a BigInteger to a byte string (eg. base-256).</description>
          <long-description>&lt;p&gt;Negative numbers are saved as positive numbers, unless $twos_compliment is set to true, at which point, they're
saved as two's compliment.&lt;/p&gt;

&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger('65');

   echo $a-&gt;toBytes(); // outputs chr(65)
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Boolean" variable="$twos_compliment" line="453">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="return" description="" type="String" line="453">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="public" line="453"/>
          <tag name="internal" description="Converts a base-2**26 number to base-2**8" line="453"/>
        </docblock>
        <argument line="475">
          <name>$twos_compliment</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="572">
        <name>toHex</name>
        <docblock>
          <description>Converts a BigInteger to a hex string (eg. base-16)).</description>
          <long-description>&lt;p&gt;Negative numbers are saved as positive numbers, unless $twos_compliment is set to true, at which point, they're
saved as two's compliment.&lt;/p&gt;

&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger('65');

   echo $a-&gt;toHex(); // outputs '41'
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Boolean" variable="$twos_compliment" line="550">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="return" description="" type="String" line="550">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="public" line="550"/>
          <tag name="internal" description="Converts a base-2**26 number to base-2**8" line="550"/>
        </docblock>
        <argument line="572">
          <name>$twos_compliment</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="599">
        <name>toBits</name>
        <docblock>
          <description>Converts a BigInteger to a bit string (eg. base-2).</description>
          <long-description>&lt;p&gt;Negative numbers are saved as positive numbers, unless $twos_compliment is set to true, at which point, they're
saved as two's compliment.&lt;/p&gt;

&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger('65');

   echo $a-&gt;toBits(); // outputs '1000001'
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Boolean" variable="$twos_compliment" line="577">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="return" description="" type="String" line="577">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="public" line="577"/>
          <tag name="internal" description="Converts a base-2**26 number to base-2**2" line="577"/>
        </docblock>
        <argument line="599">
          <name>$twos_compliment</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="630">
        <name>toString</name>
        <docblock>
          <description>Converts a BigInteger to a base-10 number.</description>
          <long-description>&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger('50');

   echo $a-&gt;toString(); // outputs 50
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="return" description="" type="String" line="612">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="public" line="612"/>
          <tag name="internal" description="Converts a base-2**26 number to base-10**7 (which is pretty much base-10)" line="612"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="681">
        <name>copy</name>
        <docblock>
          <description>Copy an object</description>
          <long-description>&lt;p&gt;PHP5 passes objects by reference while PHP4 passes by value.  As such, we need a function to guarantee
that all objects are passed by value, when appropriate.  More information can be found here:&lt;/p&gt;

&lt;p&gt;{@link http://php.net/language.oop5.basic#51624}&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="669"/>
          <tag name="see" description="__clone()" line="669"/>
          <tag name="return" description="" type="\Math_BigInteger" line="669">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="701">
        <name>__toString</name>
        <docblock>
          <description>__toString() magic method</description>
          <long-description>&lt;p&gt;Will be called, automatically, if you're supporting just PHP5.  If you're supporting PHP4, you'll need to call
toString().&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="692"/>
          <tag name="internal" description="Implemented per a suggestion by Techie-Michael - thanks!" line="692"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="718">
        <name>__clone</name>
        <docblock>
          <description>__clone() magic method</description>
          <long-description>&lt;p&gt;Although you can call Math_BigInteger::__toString() directly in PHP5, you cannot call Math_BigInteger::__clone()
directly in PHP5.  You can in PHP4 since it's not a magic method, but in PHP5, you have to call it by using the PHP5
only syntax of $y = clone $x.  As such, if you're trying to write an application that works on both PHP4 and PHP5,
call Math_BigInteger::copy(), instead.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="706"/>
          <tag name="see" description="copy()" line="706"/>
          <tag name="return" description="" type="\Math_BigInteger" line="706">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="731">
        <name>__sleep</name>
        <docblock>
          <description>__sleep() magic method</description>
          <long-description>&lt;p&gt;Will be called, automatically, when serialize() is called on a Math_BigInteger object.&lt;/p&gt;
</long-description>
          <tag name="see" description="__wakeup()" line="723"/>
          <tag name="access" description="public" line="723"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="753">
        <name>__wakeup</name>
        <docblock>
          <description>__wakeup() magic method</description>
          <long-description>&lt;p&gt;Will be called, automatically, when unserialize() is called on a Math_BigInteger object.&lt;/p&gt;
</long-description>
          <tag name="see" description="__sleep()" line="745"/>
          <tag name="access" description="public" line="745"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="787">
        <name>add</name>
        <docblock>
          <description>Adds two BigIntegers.</description>
          <long-description>&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger('10');
   $b = new Math_BigInteger('20');

   $c = $a-&gt;add($b);

   echo $c-&gt;toString(); // outputs 30
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$y" line="765">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="765">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="765"/>
          <tag name="internal" description="Performs base-2**52 addition" line="765"/>
        </docblock>
        <argument line="787">
          <name>$y</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="821">
        <name>_add</name>
        <docblock>
          <description>Performs addition.</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="Array" variable="$x_value" line="811">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Boolean" variable="$x_negative" line="811">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$y_value" line="811">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Boolean" variable="$y_negative" line="811">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="return" description="" type="Array" line="811">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="811"/>
        </docblock>
        <argument line="821">
          <name>$x_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="821">
          <name>$x_negative</name>
          <default/>
          <type/>
        </argument>
        <argument line="821">
          <name>$y_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="821">
          <name>$y_negative</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="918">
        <name>subtract</name>
        <docblock>
          <description>Subtracts two BigIntegers.</description>
          <long-description>&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger('10');
   $b = new Math_BigInteger('20');

   $c = $a-&gt;subtract($b);

   echo $c-&gt;toString(); // outputs -10
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$y" line="896">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="896">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="896"/>
          <tag name="internal" description="Performs base-2**52 subtraction" line="896"/>
        </docblock>
        <argument line="918">
          <name>$y</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="952">
        <name>_subtract</name>
        <docblock>
          <description>Performs subtraction.</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="Array" variable="$x_value" line="942">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Boolean" variable="$x_negative" line="942">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$y_value" line="942">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Boolean" variable="$y_negative" line="942">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="return" description="" type="Array" line="942">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="942"/>
        </docblock>
        <argument line="952">
          <name>$x_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="952">
          <name>$x_negative</name>
          <default/>
          <type/>
        </argument>
        <argument line="952">
          <name>$y_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="952">
          <name>$y_negative</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1053">
        <name>multiply</name>
        <docblock>
          <description>Multiplies two BigIntegers</description>
          <long-description>&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger('10');
   $b = new Math_BigInteger('20');

   $c = $a-&gt;multiply($b);

   echo $c-&gt;toString(); // outputs 200
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$x" line="1032">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="1032">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="1032"/>
        </docblock>
        <argument line="1053">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1087">
        <name>_multiply</name>
        <docblock>
          <description>Performs multiplication.</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="Array" variable="$x_value" line="1077">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Boolean" variable="$x_negative" line="1077">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$y_value" line="1077">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Boolean" variable="$y_negative" line="1077">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="return" description="" type="Array" line="1077">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="1077"/>
        </docblock>
        <argument line="1087">
          <name>$x_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="1087">
          <name>$x_negative</name>
          <default/>
          <type/>
        </argument>
        <argument line="1087">
          <name>$y_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="1087">
          <name>$y_negative</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1124">
        <name>_regularMultiply</name>
        <docblock>
          <description>Performs long multiplication on two BigIntegers</description>
          <long-description>&lt;p&gt;Modeled after 'multiply' in MutableBigInteger.java.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Array" variable="$x_value" line="1114">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$y_value" line="1114">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Array" line="1114">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="1114"/>
        </docblock>
        <argument line="1124">
          <name>$x_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="1124">
          <name>$y_value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1188">
        <name>_karatsuba</name>
        <docblock>
          <description>Performs Karatsuba multiplication on two BigIntegers</description>
          <long-description>&lt;p&gt;See {@link http://en.wikipedia.org/wiki/Karatsuba_algorithm Karatsuba algorithm} and
{@link http://math.libtomcrypt.com/files/tommath.pdf#page=120 MPM 5.2.3}.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Array" variable="$x_value" line="1177">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$y_value" line="1177">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Array" line="1177">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="1177"/>
        </docblock>
        <argument line="1188">
          <name>$x_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="1188">
          <name>$y_value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1226">
        <name>_square</name>
        <docblock>
          <description>Performs squaring</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="Array" variable="$x" line="1219">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Array" line="1219">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="1219"/>
        </docblock>
        <argument line="1226">
          <name>$x</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1244">
        <name>_baseSquare</name>
        <docblock>
          <description>Performs traditional squaring on two BigIntegers</description>
          <long-description>&lt;p&gt;Squaring can be done faster than multiplying a number by itself can be.  See
{@link http://www.cacr.math.uwaterloo.ca/hac/about/chap14.pdf#page=7 HAC 14.2.4} /
{@link http://math.libtomcrypt.com/files/tommath.pdf#page=141 MPM 5.3} for more information.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Array" variable="$value" line="1233">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Array" line="1233">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="1233"/>
        </docblock>
        <argument line="1244">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1283">
        <name>_karatsubaSquare</name>
        <docblock>
          <description>Performs Karatsuba "squaring" on two BigIntegers</description>
          <long-description>&lt;p&gt;See {@link http://en.wikipedia.org/wiki/Karatsuba_algorithm Karatsuba algorithm} and
{@link http://math.libtomcrypt.com/files/tommath.pdf#page=151 MPM 5.3.4}.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Array" variable="$value" line="1273">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Array" line="1273">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="1273"/>
        </docblock>
        <argument line="1283">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1340">
        <name>divide</name>
        <docblock>
          <description>Divides two BigIntegers.</description>
          <long-description>&lt;p&gt;Returns an array whose first element contains the quotient and whose second element contains the
"common residue".  If the remainder would be positive, the "common residue" and the remainder are the
same.  If the remainder would be negative, the "common residue" is equal to the sum of the remainder
and the divisor (basically, the "common residue" is the first positive modulo).&lt;/p&gt;

&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger('10');
   $b = new Math_BigInteger('20');

   list($quotient, $remainder) = $a-&gt;divide($b);

   echo $quotient-&gt;toString(); // outputs 0
   echo "\r\n";
   echo $remainder-&gt;toString(); // outputs 10
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$y" line="1311">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="Array" line="1311">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="public" line="1311"/>
          <tag name="internal" description="This function is based off of {@link http://www.cacr.math.uwaterloo.ca/hac/about/chap14.pdf#page=9 HAC 14.20}." line="1311"/>
        </docblock>
        <argument line="1340">
          <name>$y</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1522">
        <name>_divide_digit</name>
        <docblock>
          <description>Divides a BigInteger by a regular integer</description>
          <long-description>&lt;p&gt;abc / x = a00 / x + b0 / x + c / x&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Array" variable="$dividend" line="1512">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$divisor" line="1512">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Array" line="1512">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="1512"/>
        </docblock>
        <argument line="1522">
          <name>$dividend</name>
          <default/>
          <type/>
        </argument>
        <argument line="1522">
          <name>$divisor</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1578">
        <name>modPow</name>
        <docblock>
          <description>Performs modular exponentiation.</description>
          <long-description>&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger('10');
   $b = new Math_BigInteger('20');
   $c = new Math_BigInteger('30');

   $c = $a-&gt;modPow($b, $c);

   echo $c-&gt;toString(); // outputs 10
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$e" line="1536">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="" type="\Math_BigInteger" variable="$n" line="1536">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="1536">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="1536"/>
          <tag name="internal" description="The most naive approach to modular exponentiation has very unreasonable requirements, and&#13;&#10;and although the approach involving repeated squaring does vastly better, it, too, is impractical&#13;&#10;for our purposes.  The reason being that division - by far the most complicated and time-consuming&#13;&#10;of the basic operations (eg. +,-,*,/) - occurs multiple times within it.&#13;&#10;Modular reductions resolve this issue.  Although an individual modular reduction takes more time&#13;&#10;then an individual division, when performed in succession (with the same modulo), they&amp;#039;re a lot faster.&#13;&#10;The two most commonly used modular reductions are Barrett and Montgomery reduction.  Montgomery reduction,&#13;&#10;although faster, only works when the gcd of the modulo and of the base being used is 1.  In RSA, when the&#13;&#10;base is a power of two, the modulo - a product of two primes - is always going to have a gcd of 1 (because&#13;&#10;the product of two odd numbers is odd), but what about when RSA isn&amp;#039;t used?&#13;&#10;In contrast, Barrett reduction has no such constraint.  As such, some bigint implementations perform a&#13;&#10;Barrett reduction after every operation in the modpow function.  Others perform Barrett reductions when the&#13;&#10;modulo is even and Montgomery reductions when the modulo is odd.  BigInteger.java&amp;#039;s modPow method, however,&#13;&#10;uses a trick involving the Chinese Remainder Theorem to factor the even modulo into two numbers - one odd and&#13;&#10;the other, a power of two - and recombine them, later.  This is the method that this modPow function uses.&#13;&#10;{@link http://islab.oregonstate.edu/papers/j34monex.pdf Montgomery Reduction with Even Modulus} elaborates." line="1536"/>
        </docblock>
        <argument line="1578">
          <name>$e</name>
          <default/>
          <type/>
        </argument>
        <argument line="1578">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1677">
        <name>powMod</name>
        <docblock>
          <description>Performs modular exponentiation.</description>
          <long-description>&lt;p&gt;Alias for Math_BigInteger::modPow()&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$e" line="1667">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="" type="\Math_BigInteger" variable="$n" line="1667">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="1667">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="1667"/>
        </docblock>
        <argument line="1677">
          <name>$e</name>
          <default/>
          <type/>
        </argument>
        <argument line="1677">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1696">
        <name>_slidingWindow</name>
        <docblock>
          <description>Sliding Window k-ary Modular Exponentiation</description>
          <long-description>&lt;p&gt;Based on {@link http://www.cacr.math.uwaterloo.ca/hac/about/chap14.pdf#page=27 HAC 14.85} /
{@link http://math.libtomcrypt.com/files/tommath.pdf#page=210 MPM 7.7}.  In a departure from those algorithims,
however, this function performs a modular reduction after every multiplication and squaring operation.
As such, this function has the same preconditions that the reductions being used do.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$e" line="1682">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="" type="\Math_BigInteger" variable="$n" line="1682">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$mode" line="1682">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="1682">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="private" line="1682"/>
        </docblock>
        <argument line="1696">
          <name>$e</name>
          <default/>
          <type/>
        </argument>
        <argument line="1696">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
        <argument line="1696">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1771">
        <name>_reduce</name>
        <docblock>
          <description>Modular reduction</description>
          <long-description>&lt;p&gt;For most $modes this will return the remainder.&lt;/p&gt;
</long-description>
          <tag name="see" description="_slidingWindow()" line="1759"/>
          <tag name="access" description="private" line="1759"/>
          <tag name="param" description="" type="Array" variable="$x" line="1759">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$n" line="1759">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$mode" line="1759">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="Array" line="1759">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="1771">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="1771">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
        <argument line="1771">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1808">
        <name>_prepareReduce</name>
        <docblock>
          <description>Modular reduction preperation</description>
          <long-description>
</long-description>
          <tag name="see" description="_slidingWindow()" line="1798"/>
          <tag name="access" description="private" line="1798"/>
          <tag name="param" description="" type="Array" variable="$x" line="1798">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$n" line="1798">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$mode" line="1798">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="Array" line="1798">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="1808">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="1808">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
        <argument line="1808">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1827">
        <name>_multiplyReduce</name>
        <docblock>
          <description>Modular multiply</description>
          <long-description>
</long-description>
          <tag name="see" description="_slidingWindow()" line="1816"/>
          <tag name="access" description="private" line="1816"/>
          <tag name="param" description="" type="Array" variable="$x" line="1816">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$y" line="1816">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$n" line="1816">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$mode" line="1816">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="Array" line="1816">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="1827">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="1827">
          <name>$y</name>
          <default/>
          <type/>
        </argument>
        <argument line="1827">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
        <argument line="1827">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1846">
        <name>_squareReduce</name>
        <docblock>
          <description>Modular square</description>
          <long-description>
</long-description>
          <tag name="see" description="_slidingWindow()" line="1836"/>
          <tag name="access" description="private" line="1836"/>
          <tag name="param" description="" type="Array" variable="$x" line="1836">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$n" line="1836">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Integer" variable="$mode" line="1836">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="Array" line="1836">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="1846">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="1846">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
        <argument line="1846">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1865">
        <name>_mod2</name>
        <docblock>
          <description>Modulos for Powers of Two</description>
          <long-description>&lt;p&gt;Calculates $x%$n, where $n = 2**$e, for some $e.  Since this is basically the same as doing $x &amp;amp; ($n-1),
we'll just use this function as a wrapper for doing that.&lt;/p&gt;
</long-description>
          <tag name="see" description="_slidingWindow()" line="1854"/>
          <tag name="access" description="private" line="1854"/>
          <tag name="param" description="Math_BigInteger" type="" variable="$n" line="1854"/>
          <tag name="return" description="" type="\Math_BigInteger" line="1854">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="1865">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1896">
        <name>_barrett</name>
        <docblock>
          <description>Barrett Modular Reduction</description>
          <long-description>&lt;p&gt;See {@link http://www.cacr.math.uwaterloo.ca/hac/about/chap14.pdf#page=14 HAC 14.3.3} /
{@link http://math.libtomcrypt.com/files/tommath.pdf#page=165 MPM 6.2.5} for more information.  Modified slightly,
so as not to require negative numbers (initially, this script didn't support negative numbers).&lt;/p&gt;

&lt;p&gt;Employs "folding", as described at
{@link http://www.cosic.esat.kuleuven.be/publications/thesis-149.pdf#page=66 thesis-149.pdf#page=66}.  To quote from
it, "the idea [behind folding] is to find a value x' such that x (mod m) = x' (mod m), with x' being smaller than x."&lt;/p&gt;

&lt;p&gt;Unfortunately, the "Barrett Reduction with Folding" algorithm described in thesis-149.pdf is not, as written, all that
usable on account of (1) its not using reasonable radix points as discussed in
{@link http://math.libtomcrypt.com/files/tommath.pdf#page=162 MPM 6.2.2} and (2) the fact that, even with reasonable
radix points, it only works when there are an even number of digits in the denominator.  The reason for (2) is that
(x &gt;&gt; 1) + (x &gt;&gt; 1) != x / 2 + x / 2.  If x is even, they're the same, but if x is odd, they're not.  See the in-line
comments for details.&lt;/p&gt;
</long-description>
          <tag name="see" description="_slidingWindow()" line="1872"/>
          <tag name="access" description="private" line="1872"/>
          <tag name="param" description="" type="Array" variable="$n" line="1872">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$m" line="1872">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Array" line="1872">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="1896">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
        <argument line="1896">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1993">
        <name>_regularBarrett</name>
        <docblock>
          <description>(Regular) Barrett Modular Reduction</description>
          <long-description>&lt;p&gt;For numbers with more than four digits Math_BigInteger::_barrett() is faster.  The difference between that and this
is that this function does not fold the denominator into a smaller form.&lt;/p&gt;
</long-description>
          <tag name="see" description="_slidingWindow()" line="1981"/>
          <tag name="access" description="private" line="1981"/>
          <tag name="param" description="" type="Array" variable="$x" line="1981">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$n" line="1981">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Array" line="1981">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="1993">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="1993">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2066">
        <name>_multiplyLower</name>
        <docblock>
          <description>Performs long multiplication up to $stop digits</description>
          <long-description>&lt;p&gt;If you're going to be doing array_slice($product-&gt;value, 0, $stop), some cycles can be saved.&lt;/p&gt;
</long-description>
          <tag name="see" description="_regularBarrett()" line="2053"/>
          <tag name="param" description="" type="Array" variable="$x_value" line="2053">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Boolean" variable="$x_negative" line="2053">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$y_value" line="2053">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Boolean" variable="$y_negative" line="2053">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="return" description="" type="Array" line="2053">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="2053"/>
        </docblock>
        <argument line="2066">
          <name>$x_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="2066">
          <name>$x_negative</name>
          <default/>
          <type/>
        </argument>
        <argument line="2066">
          <name>$y_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="2066">
          <name>$y_negative</name>
          <default/>
          <type/>
        </argument>
        <argument line="2066">
          <name>$stop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2145">
        <name>_montgomery</name>
        <docblock>
          <description>Montgomery Modular Reduction</description>
          <long-description>&lt;p&gt;($x-&gt;_prepMontgomery($n))-&gt;_montgomery($n) yields $x % $n.
{@link http://math.libtomcrypt.com/files/tommath.pdf#page=170 MPM 6.3} provides insights on how this can be
improved upon (basically, by using the comba method).  gcd($n, 2) must be equal to one for this function
to work correctly.&lt;/p&gt;
</long-description>
          <tag name="see" description="_prepMontgomery()" line="2130"/>
          <tag name="see" description="_slidingWindow()" line="2130"/>
          <tag name="access" description="private" line="2130"/>
          <tag name="param" description="" type="Array" variable="$x" line="2130">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$n" line="2130">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Array" line="2130">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="2145">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="2145">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2193">
        <name>_montgomeryMultiply</name>
        <docblock>
          <description>Montgomery Multiply</description>
          <long-description>&lt;p&gt;Interleaves the montgomery reduction and long multiplication algorithms together as described in
{@link http://www.cacr.math.uwaterloo.ca/hac/about/chap14.pdf#page=13 HAC 14.36}&lt;/p&gt;
</long-description>
          <tag name="see" description="_prepMontgomery()" line="2179"/>
          <tag name="see" description="_montgomery()" line="2179"/>
          <tag name="access" description="private" line="2179"/>
          <tag name="param" description="" type="Array" variable="$x" line="2179">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$y" line="2179">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$m" line="2179">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Array" line="2179">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="2193">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="2193">
          <name>$y</name>
          <default/>
          <type/>
        </argument>
        <argument line="2193">
          <name>$m</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2239">
        <name>_prepMontgomery</name>
        <docblock>
          <description>Prepare a number for use in Montgomery Modular Reductions</description>
          <long-description>
</long-description>
          <tag name="see" description="_montgomery()" line="2229"/>
          <tag name="see" description="_slidingWindow()" line="2229"/>
          <tag name="access" description="private" line="2229"/>
          <tag name="param" description="" type="Array" variable="$x" line="2229">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$n" line="2229">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Array" line="2229">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="2239">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="2239">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2276">
        <name>_modInverse67108864</name>
        <docblock>
          <description>Modular Inverse of a number mod 2**26 (eg. 67108864)</description>
          <long-description>&lt;p&gt;Based off of the bnpInvDigit function implemented and justified in the following URL:&lt;/p&gt;

&lt;p&gt;{@link http://www-cs-students.stanford.edu/~tjw/jsbn/jsbn.js}&lt;/p&gt;

&lt;p&gt;The following URL provides more info:&lt;/p&gt;

&lt;p&gt;{@link http://groups.google.com/group/sci.crypt/msg/7a137205c1be7d85}&lt;/p&gt;

&lt;p&gt;As for why we do all the bitmasking...  strange things can happen when converting from floats to ints. For
instance, on some computers, var_dump((int) -4294967297) yields int(-1) and on others, it yields
int(-2147483648).  To avoid problems stemming from this, we use bitmasks to guarantee that ints aren't
auto-converted to floats.  The outermost bitmask is present because without it, there's no guarantee that
the "residue" returned would be the so-called "common residue".  We use fmod, in the last step, because the
maximum possible $x is 26 bits and the maximum $result is 16 bits.  Thus, we have to be able to handle up to
40 bits, which only 64-bit floating points will support.&lt;/p&gt;

&lt;p&gt;Thanks to Pedro Gimeno Fortea for input!&lt;/p&gt;
</long-description>
          <tag name="see" description="_montgomery()" line="2250"/>
          <tag name="access" description="private" line="2250"/>
          <tag name="param" description="" type="Array" variable="$x" line="2250">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="return" description="" type="Integer" line="2250">
            <type by_reference="false">Integer</type>
          </tag>
        </docblock>
        <argument line="2276">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2316">
        <name>modInverse</name>
        <docblock>
          <description>Calculates modular inverses.</description>
          <long-description>&lt;p&gt;Say you have (30 mod 17 * x mod 17) mod 17 == 1.  x can be found using modular inverses.&lt;/p&gt;

&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger(30);
   $b = new Math_BigInteger(17);

   $c = $a-&gt;modInverse($b);
   echo $c-&gt;toString(); // outputs 4

   echo "\r\n";

   $d = $a-&gt;multiply($c);
   list(, $d) = $d-&gt;divide($b);
   echo $d; // outputs 1 (as per the definition of modular inverse)
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$n" line="2287">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="false, if no modular inverse exists, Math_BigInteger, otherwise." type="mixed" line="2287">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="access" description="public" line="2287"/>
          <tag name="internal" description="See {@link http://www.cacr.math.uwaterloo.ca/hac/about/chap14.pdf#page=21 HAC 14.64} for more information." line="2287"/>
        </docblock>
        <argument line="2316">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2382">
        <name>extendedGCD</name>
        <docblock>
          <description>Calculates the greatest common divisor and B&#xFFFD;zout's identity.</description>
          <long-description>&lt;p&gt;Say you have 693 and 609.  The GCD is 21.  B&#xFFFD;zout's identity states that there exist integers x and y such that
693&lt;em&gt;x + 609&lt;/em&gt;y == 21.  In point of fact, there are actually an infinite number of x and y combinations and which
combination is returned is dependant upon which mode is in use.  See
{@link http://en.wikipedia.org/wiki/B%C3%A9zout%27s_identity B&#xFFFD;zout's identity - Wikipedia} for more information.&lt;/p&gt;

&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger(693);
   $b = new Math_BigInteger(609);

   extract($a-&gt;extendedGCD($b));

   echo $gcd-&gt;toString() . "\r\n"; // outputs 21
   echo $a-&gt;toString() * $x-&gt;toString() + $b-&gt;toString() * $y-&gt;toString(); // outputs 21
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$n" line="2352">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="2352">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2352"/>
          <tag name="internal" description="Calculates the GCD using the binary xGCD algorithim described in&#13;&#10;{@link http://www.cacr.math.uwaterloo.ca/hac/about/chap14.pdf#page=19 HAC 14.61}.  As the text above 14.61 notes,&#13;&#10;the more traditional algorithim requires &amp;quot;relatively costly multiple-precision divisions&amp;quot;." line="2352"/>
        </docblock>
        <argument line="2382">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2513">
        <name>gcd</name>
        <docblock>
          <description>Calculates the greatest common divisor</description>
          <long-description>&lt;p&gt;Say you have 693 and 609.  The GCD is 21.&lt;/p&gt;

&lt;p&gt;Here's an example:
&lt;code&gt;
&lt;?php
   include('Math/BigInteger.php');

   $a = new Math_BigInteger(693);
   $b = new Math_BigInteger(609);

   $gcd = a-&gt;extendedGCD($b);

   echo $gcd-&gt;toString() . "\r\n"; // outputs 21
?&gt;
&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$n" line="2490">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="2490">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2490"/>
        </docblock>
        <argument line="2513">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2525">
        <name>abs</name>
        <docblock>
          <description>Absolute value.</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="\Math_BigInteger" line="2519">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2519"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2561">
        <name>compare</name>
        <docblock>
          <description>Compares two numbers.</description>
          <long-description>&lt;p&gt;Although one might think !$x-&gt;compare($y) means $x != $y, it, in fact, means the opposite.  The reason for this is
demonstrated thusly:&lt;/p&gt;

&lt;p&gt;$x  &gt; $y: $x-&gt;compare($y)  &gt; 0
$x  &amp;lt; $y: $x-&gt;compare($y)  &amp;lt; 0
$x == $y: $x-&gt;compare($y) == 0&lt;/p&gt;

&lt;p&gt;Note how the same comparison operator is used.  If you want to test for equality, use $x-&gt;equals($y).&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$x" line="2543">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="&amp;lt; 0 if $this is less than $x; &amp;gt; 0 if $this is greater than $x, and 0 if they are equal." type="Integer" line="2543">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="public" line="2543"/>
          <tag name="see" description="equals()" line="2543"/>
          <tag name="internal" description="Could return $this-&amp;gt;subtract($x), but that&amp;#039;s not as fast as what we do do." line="2543"/>
        </docblock>
        <argument line="2561">
          <name>$y</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2584">
        <name>_compare</name>
        <docblock>
          <description>Compares two numbers.</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="Array" variable="$x_value" line="2573">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Boolean" variable="$x_negative" line="2573">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="param" description="" type="Array" variable="$y_value" line="2573">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="param" description="" type="Boolean" variable="$y_negative" line="2573">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="return" description="" type="Integer" line="2573">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="see" description="compare()" line="2573"/>
          <tag name="access" description="private" line="2573"/>
        </docblock>
        <argument line="2584">
          <name>$x_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="2584">
          <name>$x_negative</name>
          <default/>
          <type/>
        </argument>
        <argument line="2584">
          <name>$y_value</name>
          <default/>
          <type/>
        </argument>
        <argument line="2584">
          <name>$y_negative</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2619">
        <name>equals</name>
        <docblock>
          <description>Tests the equality of two numbers.</description>
          <long-description>&lt;p&gt;If you need to see if one number is greater than or less than another number, use Math_BigInteger::compare()&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$x" line="2609">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="return" description="" type="Boolean" line="2609">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="public" line="2609"/>
          <tag name="see" description="compare()" line="2609"/>
        </docblock>
        <argument line="2619">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2639">
        <name>setPrecision</name>
        <docblock>
          <description>Set Precision</description>
          <long-description>&lt;p&gt;Some bitwise operations give different results depending on the precision being used.  Examples include left
shift, not, and rotates.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$x" line="2629">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2629"/>
          <tag name="return" description="" type="\Math_BigInteger" line="2629">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="2639">
          <name>$bits</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2660">
        <name>bitwise_and</name>
        <docblock>
          <description>Logical And</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$x" line="2652">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2652"/>
          <tag name="internal" description="Implemented per a request by Lluis Pamies i Juarez &amp;lt;lluis _a_ pamies.cat&amp;gt;" line="2652"/>
          <tag name="return" description="" type="\Math_BigInteger" line="2652">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="2660">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2701">
        <name>bitwise_or</name>
        <docblock>
          <description>Logical Or</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$x" line="2693">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2693"/>
          <tag name="internal" description="Implemented per a request by Lluis Pamies i Juarez &amp;lt;lluis _a_ pamies.cat&amp;gt;" line="2693"/>
          <tag name="return" description="" type="\Math_BigInteger" line="2693">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="2701">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2741">
        <name>bitwise_xor</name>
        <docblock>
          <description>Logical Exclusive-Or</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="\Math_BigInteger" variable="$x" line="2733">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2733"/>
          <tag name="internal" description="Implemented per a request by Lluis Pamies i Juarez &amp;lt;lluis _a_ pamies.cat&amp;gt;" line="2733"/>
          <tag name="return" description="" type="\Math_BigInteger" line="2733">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
        <argument line="2741">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2780">
        <name>bitwise_not</name>
        <docblock>
          <description>Logical Not</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="2773"/>
          <tag name="internal" description="Implemented per a request by Lluis Pamies i Juarez &amp;lt;lluis _a_ pamies.cat&amp;gt;" line="2773"/>
          <tag name="return" description="" type="\Math_BigInteger" line="2773">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2819">
        <name>bitwise_rightShift</name>
        <docblock>
          <description>Logical Right Shift</description>
          <long-description>&lt;p&gt;Shifts BigInteger's by $shift bits, effectively dividing by 2**$shift.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Integer" variable="$shift" line="2809">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="2809">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2809"/>
          <tag name="internal" description="The only version that yields any speed increases is the internal version." line="2809"/>
        </docblock>
        <argument line="2819">
          <name>$shift</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2857">
        <name>bitwise_leftShift</name>
        <docblock>
          <description>Logical Left Shift</description>
          <long-description>&lt;p&gt;Shifts BigInteger's by $shift bits, effectively multiplying by 2**$shift.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Integer" variable="$shift" line="2847">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="2847">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2847"/>
          <tag name="internal" description="The only version that yields any speed increases is the internal version." line="2847"/>
        </docblock>
        <argument line="2857">
          <name>$shift</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2894">
        <name>bitwise_leftRotate</name>
        <docblock>
          <description>Logical Left Rotate</description>
          <long-description>&lt;p&gt;Instead of the top x bits being dropped they're appended to the shifted bit string.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Integer" variable="$shift" line="2885">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="2885">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2885"/>
        </docblock>
        <argument line="2894">
          <name>$shift</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2938">
        <name>bitwise_rightRotate</name>
        <docblock>
          <description>Logical Right Rotate</description>
          <long-description>&lt;p&gt;Instead of the bottom x bits being dropped they're prepended to the shifted bit string.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Integer" variable="$shift" line="2929">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="2929">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2929"/>
        </docblock>
        <argument line="2938">
          <name>$shift</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2957">
        <name>setRandomGenerator</name>
        <docblock>
          <description>Set random number generator function</description>
          <long-description>&lt;p&gt;$generator should be the name of a random generating function whose first parameter is the minimum
value and whose second parameter is the maximum value.  If this function needs to be seeded, it should
be seeded prior to calling Math_BigInteger::random() or Math_BigInteger::randomPrime()&lt;/p&gt;

&lt;p&gt;If the random generating function is not explicitly set, it'll be assumed to be mt_rand().&lt;/p&gt;
</long-description>
          <tag name="see" description="random()" line="2943"/>
          <tag name="see" description="randomPrime()" line="2943"/>
          <tag name="param" description="String $generator" type="\optional" variable="$generator" line="2943">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="access" description="public" line="2943"/>
        </docblock>
        <argument line="2957">
          <name>$generator</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2970">
        <name>random</name>
        <docblock>
          <description>Generate a random number</description>
          <long-description>
</long-description>
          <tag name="param" description="Integer $min" type="\optional" variable="$min" line="2962">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="Integer $max" type="\optional" variable="$max" line="2962">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="2962">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="2962"/>
        </docblock>
        <argument line="2970">
          <name>$min</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="2970">
          <name>$max</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3034">
        <name>randomPrime</name>
        <docblock>
          <description>Generate a random prime number.</description>
          <long-description>&lt;p&gt;If there's not a prime within the given range, false will be returned.  If more than $timeout seconds have elapsed,
give up and return false.&lt;/p&gt;
</long-description>
          <tag name="param" description="Integer $min" type="\optional" variable="$min" line="3021">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="Integer $max" type="\optional" variable="$max" line="3021">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="param" description="Integer $timeout" type="\optional" variable="$timeout" line="3021">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="\Math_BigInteger" line="3021">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="public" line="3021"/>
          <tag name="internal" description="See {@link http://www.cacr.math.uwaterloo.ca/hac/about/chap4.pdf#page=15 HAC 4.44}." line="3021"/>
        </docblock>
        <argument line="3034">
          <name>$min</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="3034">
          <name>$max</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="3034">
          <name>$timeout</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3135">
        <name>_make_odd</name>
        <docblock>
          <description>Make the current number odd</description>
          <long-description>&lt;p&gt;If the current number is odd it'll be unchanged.  If it's even, one will be added to it.&lt;/p&gt;
</long-description>
          <tag name="see" description="randomPrime()" line="3127"/>
          <tag name="access" description="private" line="3127"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3165">
        <name>isPrime</name>
        <docblock>
          <description>Checks a numer to see if it's prime</description>
          <long-description>&lt;p&gt;Assuming the $t parameter is not set, this function has an error rate of 2**-80.  The main motivation for the
$t parameter is distributability.  Math_BigInteger::randomPrime() can be distributed accross multiple pageloads
on a website instead of just one.&lt;/p&gt;
</long-description>
          <tag name="param" description="Integer $t" type="\optional" variable="$t" line="3151">
            <type by_reference="false">\optional</type>
          </tag>
          <tag name="return" description="" type="Boolean" line="3151">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag name="access" description="public" line="3151"/>
          <tag name="internal" description="Uses the&#13;&#10;{@link http://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test Miller-Rabin primality test}.  See&#13;&#10;{@link http://www.cacr.math.uwaterloo.ca/hac/about/chap4.pdf#page=8 HAC 4.24}." line="3151"/>
        </docblock>
        <argument line="3165">
          <name>$t</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3311">
        <name>_lshift</name>
        <docblock>
          <description>Logical Left Shift</description>
          <long-description>&lt;p&gt;Shifts BigInteger's by $shift bits.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Integer" variable="$shift" line="3303">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="3303"/>
        </docblock>
        <argument line="3311">
          <name>$shift</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3346">
        <name>_rshift</name>
        <docblock>
          <description>Logical Right Shift</description>
          <long-description>&lt;p&gt;Shifts BigInteger's by $shift bits.&lt;/p&gt;
</long-description>
          <tag name="param" description="" type="Integer" variable="$shift" line="3338">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="3338"/>
        </docblock>
        <argument line="3346">
          <name>$shift</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3382">
        <name>_normalize</name>
        <docblock>
          <description>Normalize</description>
          <long-description>&lt;p&gt;Removes leading zeros and truncates (if necessary) to maintain the appropriate precision&lt;/p&gt;
</long-description>
          <tag name="param" description="Math_BigInteger" type="" variable="$result" line="3372"/>
          <tag name="return" description="" type="\Math_BigInteger" line="3372">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="see" description="_trim()" line="3372"/>
          <tag name="access" description="private" line="3372"/>
        </docblock>
        <argument line="3382">
          <name>$result</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3430">
        <name>_trim</name>
        <docblock>
          <description>Trim</description>
          <long-description>&lt;p&gt;Removes leading zeros&lt;/p&gt;
</long-description>
          <tag name="return" description="" type="\Math_BigInteger" line="3422">
            <type by_reference="false">\Math_BigInteger</type>
          </tag>
          <tag name="access" description="private" line="3422"/>
        </docblock>
        <argument line="3430">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3450">
        <name>_array_repeat</name>
        <docblock>
          <description>Array Repeat</description>
          <long-description>
</long-description>
          <tag name="param" description="Array" type="\$input" variable="$input" line="3442">
            <type by_reference="false">\$input</type>
          </tag>
          <tag name="param" description="mixed" type="\$multiplier" variable="$multiplier" line="3442">
            <type by_reference="false">\$multiplier</type>
          </tag>
          <tag name="return" description="" type="Array" line="3442">
            <type by_reference="false">Array</type>
          </tag>
          <tag name="access" description="private" line="3442"/>
        </docblock>
        <argument line="3450">
          <name>$input</name>
          <default/>
          <type/>
        </argument>
        <argument line="3450">
          <name>$multiplier</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3465">
        <name>_base256_lshift</name>
        <docblock>
          <description>Logical Left Shift</description>
          <long-description>&lt;p&gt;Shifts binary strings $shift bits, essentially multiplying by 2**$shift.&lt;/p&gt;
</long-description>
          <tag name="param" description="String" type="\$x" variable="$x" line="3455">
            <type by_reference="false">\$x</type>
          </tag>
          <tag name="param" description="Integer" type="\$shift" variable="$shift" line="3455">
            <type by_reference="false">\$shift</type>
          </tag>
          <tag name="return" description="" type="String" line="3455">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="3455"/>
        </docblock>
        <argument line="3465">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="3465">
          <name>$shift</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3494">
        <name>_base256_rshift</name>
        <docblock>
          <description>Logical Right Shift</description>
          <long-description>&lt;p&gt;Shifts binary strings $shift bits, essentially dividing by 2**$shift and returning the remainder.&lt;/p&gt;
</long-description>
          <tag name="param" description="String" type="\$x" variable="$x" line="3484">
            <type by_reference="false">\$x</type>
          </tag>
          <tag name="param" description="Integer" type="\$shift" variable="$shift" line="3484">
            <type by_reference="false">\$shift</type>
          </tag>
          <tag name="return" description="" type="String" line="3484">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="3484"/>
        </docblock>
        <argument line="3494">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="3494">
          <name>$shift</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3535">
        <name>_int2bytes</name>
        <docblock>
          <description>Converts 32-bit integers to bytes.</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="Integer" variable="$x" line="3528">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="return" description="" type="String" line="3528">
            <type by_reference="false">String</type>
          </tag>
          <tag name="access" description="private" line="3528"/>
        </docblock>
        <argument line="3535">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3547">
        <name>_bytes2int</name>
        <docblock>
          <description>Converts bytes to 32-bit integers</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="String" variable="$x" line="3540">
            <type by_reference="false">String</type>
          </tag>
          <tag name="return" description="" type="Integer" line="3540">
            <type by_reference="false">Integer</type>
          </tag>
          <tag name="access" description="private" line="3540"/>
        </docblock>
        <argument line="3547">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="verify.php" hash="00f0c0aba11a2e85484f3492c37e542a">
    <docblock>
      <description>Verifier</description>
      <long-description>&lt;p&gt;Verifies an assertion received via HTTP POST and returns a JSON object.&lt;/p&gt;

&lt;p&gt;LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.&lt;/p&gt;
</long-description>
      <tag name="package" description="BrowserID"/>
      <tag name="author" description="Benjamin Kr&#xE4;mer &amp;lt;benjamin.kraemer@alien-scripts.de&amp;gt;"/>
      <tag name="copyright" description="Alien-Scripts.de Benjamin Kr&#xE4;mer"/>
      <tag name="license" description="http://www.opensource.org/licenses/mit-license.html  MIT License"/>
    </docblock>
    <include type="Require Once" line="37">
      <name>lib/browserid.php</name>
    </include>
  </file>
  <package name=""/>
  <package name="Algs">
    <subpackage>DS</subpackage>
    <subpackage>RS</subpackage>
  </package>
  <package name="BrowserID">
    <subpackage>Algs</subpackage>
    <subpackage>Assertion</subpackage>
    <subpackage>Cert</subpackage>
    <subpackage>CertAssertion</subpackage>
    <subpackage>CertBundle</subpackage>
    <subpackage>CertParams</subpackage>
    <subpackage>Configuration</subpackage>
    <subpackage>Primary</subpackage>
    <subpackage>Secrets</subpackage>
    <subpackage>Utils</subpackage>
    <subpackage>Verifier</subpackage>
    <subpackage>WebToken</subpackage>
  </package>
  <package name="Crypt">
    <subpackage>Crypt_AES</subpackage>
    <subpackage>Crypt_DES</subpackage>
    <subpackage>Crypt_DSA</subpackage>
    <subpackage>Crypt_Hash</subpackage>
    <subpackage>Crypt_Random</subpackage>
    <subpackage>Crypt_RC4</subpackage>
    <subpackage>Crypt_Rijndael</subpackage>
    <subpackage>Crypt_RSA</subpackage>
    <subpackage>Crypt_TripleDES</subpackage>
  </package>
  <package name="Math">
    <subpackage>Math_BigInteger</subpackage>
  </package>
  <namespace name="default"/>
  <marker>todo</marker>
  <marker>fixme</marker>
</project>
