<?php
/**
 * BrowserID assertion verifier
 *
 * Verifies an assertion bundle that was generated by the users browser. This 
 * can be used to assure that the assertion is valid and to get the payload sent 
 * with the assertion.
 *
 * Here's a short example of how to use this library:
 * <code>
 * <?php
 *    include('lib/browserid.php');
 *
 *    $response = Verifier::verify($assertion, 'yoursite.org');
 *    if ($response["status"] == "okay") {
 *        $_SESSION['email'] = $response["email"];
 *        ...
 *    } else {
 *        echo $response["reason"];
 *        ...
 *    }
 * ?>
 * </code>
 *
 * LICENSE: Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package    BrowserID
 * @subpackage Verifier
 * @author     Benjamin Krämer <benjamin.kraemer@alien-scripts.de>
 * @copyright  Alien-Scripts.de Benjamin Krämer
 * @license    http://www.opensource.org/licenses/mit-license.html  MIT License
 */

/**
 * Include Configuration
 */
require_once(BROWSERID_BASE_PATH."lib/BrowserID/configuration.php");

/**
 * Include Utils
 */
require_once(BROWSERID_BASE_PATH."lib/BrowserID/utils.php");

/**
 * Verifier
 *
 * @package     BrowserID
 * @subpackage  Verifier
 * @author      Benjamin Krämer <benjamin.kraemer@alien-scripts.de>
 * @version     1.0.0
 */
class Verifier {
    
    /**
     * Verifies a given assertion bundle for validity and against the audience.
     * 
     * @access public
     * @static
     * @param String $assertion The serialized assertion bundle
     * @param String $audience The audience as valid URL
     * @return array An array containing status okay on success or failure on error
     */
    public static function verify($assertion, $audience) {
        if (Configuration::getInstance()->get('use_remote_verifier'))
            return Verifier::verifyRemote($assertion, $audience);
        else
            return Verifier::verifyLocally($assertion, $audience);
    }
    
    /**
     * Verifies a given assertion bundle for validity and against the audience 
     * using the local server and without requesting Mozilla's fallback verifier.
     * 
     * !!! THIS IS THE CURRENTLY __NOT__ ADVISED METHOD WHEN USED IN PRODUCTION MODE !!!
     * 
     * @access private
     * @static
     * @param String $assertion The serialized assertion bundle
     * @param String $audience The audience as valid URL
     * @return array An array containing status okay on success or failure on error
     */
    private static function verifyLocally($assertion, $audience)
    {

        /**
         * Include CertAssertion
         */
        require_once(BROWSERID_BASE_PATH."lib/BrowserID/cert_assertion.php");

        try {
            $certassertion = new CertAssertion($assertion, $audience);
            $result = $certassertion->verify();
            $certChain = &$result["certChain"];
            // TODO: Contains the additional payload of the assertion, may be added later!
            //$payload = &$result["payload"];
            $assertion = &$result["assertion"];

            // principal and issuer are in the last cert
            $lastCert = &$certChain[sizeof($certChain) - 1];
            $principal = $lastCert->getCertParams()->getPrincipal();
            $principal = $principal["email"];
            $issuer = $lastCert->getAssertion()->getIssuer();

            $result = array(
                "status" => "okay",
                "email" => $principal,
                "audience" => $assertion->getAudience(),
                "expires" => $assertion->getExpiresAt(),
                "issuer" => $issuer
            );
            return json_encode($result);
        } catch (Exception $e) {
            //console.log($e->getTraceAsString());
            return json_encode(array("status"=>"failure", "reason"=>$e->getMessage()));
        }
    }
    
    /**
     * Verifies a given assertion bundle for validity and against the audience 
     * by requesting Mozilla's fallback verifier.
     * 
     * !!! THIS IS THE CURRENTLY ADVISED METHOD WHEN USED IN PRODUCTION MODE !!!
     * 
     * @access private
     * @static
     * @param String $assertion The serialized assertion bundle
     * @param String $audience The audience as valid URL
     * @return array An array containing status okay on success or failure on error
     */
    private static function verifyRemote($assertion, $audience)
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, Configuration::getInstance()->get('remote_verifier_url'));
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array("assertion" => $assertion, "audience" => $audience)));
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
        if (substr(PHP_OS, 0, 3) == 'WIN') {
            if (!isset($cabundle)) {
                $inst = Configuration::getInstance();
                $cabundle = Utils::path_concat($inst->get('base_path'), $inst->get('var_path'), 'cabundle.crt');
            }
            curl_setopt($ch, CURLOPT_CAINFO, $cabundle);
        }
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
        $buffer = curl_exec($ch);
        curl_close($ch);
        return $buffer;
    }
}
?>